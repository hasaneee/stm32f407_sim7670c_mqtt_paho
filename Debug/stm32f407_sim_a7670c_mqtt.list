
stm32f407_sim_a7670c_mqtt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000764c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ab0  080077e0  080077e0  000087e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008290  08008290  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008290  08008290  00009290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008298  08008298  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008298  08008298  00009298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800829c  0800829c  0000929c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080082a0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a1d4  2**0
                  CONTENTS
 10 .bss          0000047c  200001d4  200001d4  0000a1d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000650  20000650  0000a1d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c144  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025b7  00000000  00000000  00016348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009f8  00000000  00000000  00018900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007c6  00000000  00000000  000192f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021fa8  00000000  00000000  00019abe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d130  00000000  00000000  0003ba66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5508  00000000  00000000  00048b96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010e09e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003880  00000000  00000000  0010e0e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  00111964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080077c4 	.word	0x080077c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	080077c4 	.word	0x080077c4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <DebugPrint>:
#include <string.h>
#include "debug_utils.h"

extern UART_HandleTypeDef huart4; // UART4 handle for debugging

void DebugPrint(const char* message) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
    if (message != NULL) {
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d00a      	beq.n	8000ebc <DebugPrint+0x24>
        HAL_UART_Transmit(&huart4, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f7ff f9e2 	bl	8000270 <strlen>
 8000eac:	4603      	mov	r3, r0
 8000eae:	b29a      	uxth	r2, r3
 8000eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb4:	6879      	ldr	r1, [r7, #4]
 8000eb6:	4803      	ldr	r0, [pc, #12]	@ (8000ec4 <DebugPrint+0x2c>)
 8000eb8:	f003 f9b0 	bl	800421c <HAL_UART_Transmit>
    }
}
 8000ebc:	bf00      	nop
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	20000464 	.word	0x20000464

08000ec8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b09e      	sub	sp, #120	@ 0x78
 8000ecc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ece:	f002 f9cb 	bl	8003268 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ed2:	f000 f8e7 	bl	80010a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ed6:	f000 f9a1 	bl	800121c <MX_GPIO_Init>
  MX_UART4_Init();
 8000eda:	f000 f94b 	bl	8001174 <MX_UART4_Init>
  MX_UART5_Init();
 8000ede:	f000 f973 	bl	80011c8 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  DebugPrint("Powering on SIM module...\r\n");
 8000ee2:	485c      	ldr	r0, [pc, #368]	@ (8001054 <main+0x18c>)
 8000ee4:	f7ff ffd8 	bl	8000e98 <DebugPrint>
  //SIM_PowerOn();
  HAL_Delay(5000);
 8000ee8:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000eec:	f002 fa2e 	bl	800334c <HAL_Delay>
  DebugPrint("Resetting SIM module...\r\n");
 8000ef0:	4859      	ldr	r0, [pc, #356]	@ (8001058 <main+0x190>)
 8000ef2:	f7ff ffd1 	bl	8000e98 <DebugPrint>
  SIM_Reset();
 8000ef6:	f001 fc07 	bl	8002708 <SIM_Reset>
  HAL_Delay(5000);
 8000efa:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000efe:	f002 fa25 	bl	800334c <HAL_Delay>
  //ResetMCU();
  DebugPrint("Initializing SIM module and network...\r\n");
 8000f02:	4856      	ldr	r0, [pc, #344]	@ (800105c <main+0x194>)
 8000f04:	f7ff ffc8 	bl	8000e98 <DebugPrint>
  if (Network_Init() != 0) {
 8000f08:	f001 fb9a 	bl	8002640 <Network_Init>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d013      	beq.n	8000f3a <main+0x72>
	  while (1){
		  DebugPrint("Network initialization failed.\r\n");
 8000f12:	4853      	ldr	r0, [pc, #332]	@ (8001060 <main+0x198>)
 8000f14:	f7ff ffc0 	bl	8000e98 <DebugPrint>
		  HAL_Delay(3000);
 8000f18:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000f1c:	f002 fa16 	bl	800334c <HAL_Delay>
		  SIM_Reset();
 8000f20:	f001 fbf2 	bl	8002708 <SIM_Reset>
		  HAL_Delay(10000);
 8000f24:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000f28:	f002 fa10 	bl	800334c <HAL_Delay>
		  //ResetMCU();
		  if(Network_Init() == 0){
 8000f2c:	f001 fb88 	bl	8002640 <Network_Init>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d000      	beq.n	8000f38 <main+0x70>
		  DebugPrint("Network initialization failed.\r\n");
 8000f36:	e7ec      	b.n	8000f12 <main+0x4a>
			  break;
 8000f38:	bf00      	nop
		  }
	  }
  }
  */

  MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;
 8000f3a:	4a4a      	ldr	r2, [pc, #296]	@ (8001064 <main+0x19c>)
 8000f3c:	f107 0310 	add.w	r3, r7, #16
 8000f40:	4611      	mov	r1, r2
 8000f42:	2258      	movs	r2, #88	@ 0x58
 8000f44:	4618      	mov	r0, r3
 8000f46:	f004 fbf4 	bl	8005732 <memcpy>
  //MQTTMessage msg = {QOS0, 1, 0,1, "Hasan", 14};

  // Modify the connectData fields
    connectData.MQTTVersion = 4; // MQTT version 3.1.1
 8000f4a:	2304      	movs	r3, #4
 8000f4c:	763b      	strb	r3, [r7, #24]
    connectData.keepAliveInterval = 60; // 60 seconds keep-alive
 8000f4e:	233c      	movs	r3, #60	@ 0x3c
 8000f50:	853b      	strh	r3, [r7, #40]	@ 0x28
    connectData.cleansession = 1; // Clean session flag
 8000f52:	2301      	movs	r3, #1
 8000f54:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    connectData.clientID.cstring = MQTT_CLIENT_ID; // Unique client identifier
 8000f58:	4b43      	ldr	r3, [pc, #268]	@ (8001068 <main+0x1a0>)
 8000f5a:	61fb      	str	r3, [r7, #28]
    connectData.username.cstring = NULL; // Optional: set username if required
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	653b      	str	r3, [r7, #80]	@ 0x50
    connectData.password.cstring = NULL; // Optional: set password if required
 8000f60:	2300      	movs	r3, #0
 8000f62:	65fb      	str	r3, [r7, #92]	@ 0x5c

	NetworkInit(&network, &huart5);
 8000f64:	4941      	ldr	r1, [pc, #260]	@ (800106c <main+0x1a4>)
 8000f66:	4842      	ldr	r0, [pc, #264]	@ (8001070 <main+0x1a8>)
 8000f68:	f001 f998 	bl	800229c <NetworkInit>

	if(ConnectNetwork(&network, MQTT_BROKER, MQTT_PORT) != SUCCESS){
 8000f6c:	f240 725b 	movw	r2, #1883	@ 0x75b
 8000f70:	4940      	ldr	r1, [pc, #256]	@ (8001074 <main+0x1ac>)
 8000f72:	483f      	ldr	r0, [pc, #252]	@ (8001070 <main+0x1a8>)
 8000f74:	f001 f9ae 	bl	80022d4 <ConnectNetwork>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d013      	beq.n	8000fa6 <main+0xde>
		while(1){
			DebugPrint("Connected to MQTT broker FAILED!!!.\r\n");
 8000f7e:	483e      	ldr	r0, [pc, #248]	@ (8001078 <main+0x1b0>)
 8000f80:	f7ff ff8a 	bl	8000e98 <DebugPrint>
			HAL_Delay(1000);
 8000f84:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f88:	f002 f9e0 	bl	800334c <HAL_Delay>
			if(ConnectNetwork(&network, MQTT_BROKER, MQTT_PORT) == SUCCESS){
 8000f8c:	f240 725b 	movw	r2, #1883	@ 0x75b
 8000f90:	4938      	ldr	r1, [pc, #224]	@ (8001074 <main+0x1ac>)
 8000f92:	4837      	ldr	r0, [pc, #220]	@ (8001070 <main+0x1a8>)
 8000f94:	f001 f99e 	bl	80022d4 <ConnectNetwork>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d1ef      	bne.n	8000f7e <main+0xb6>
				DebugPrint("Connected to MQTT broker successfully.\r\n");
 8000f9e:	4837      	ldr	r0, [pc, #220]	@ (800107c <main+0x1b4>)
 8000fa0:	f7ff ff7a 	bl	8000e98 <DebugPrint>
				break;
 8000fa4:	e002      	b.n	8000fac <main+0xe4>
			}
		}
	}else{
		DebugPrint("Connected to MQTT broker successfully.\r\n");
 8000fa6:	4835      	ldr	r0, [pc, #212]	@ (800107c <main+0x1b4>)
 8000fa8:	f7ff ff76 	bl	8000e98 <DebugPrint>
	}

	MQTTClientInit(&client, &network, TIMEOUT_MS, sendbuf, sizeof(sendbuf), readbuf, sizeof(readbuf));
 8000fac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fb0:	9302      	str	r3, [sp, #8]
 8000fb2:	4b33      	ldr	r3, [pc, #204]	@ (8001080 <main+0x1b8>)
 8000fb4:	9301      	str	r3, [sp, #4]
 8000fb6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fba:	9300      	str	r3, [sp, #0]
 8000fbc:	4b31      	ldr	r3, [pc, #196]	@ (8001084 <main+0x1bc>)
 8000fbe:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000fc2:	492b      	ldr	r1, [pc, #172]	@ (8001070 <main+0x1a8>)
 8000fc4:	4830      	ldr	r0, [pc, #192]	@ (8001088 <main+0x1c0>)
 8000fc6:	f000 fc08 	bl	80017da <MQTTClientInit>

	if(MQTTConnect(&client, &connectData) != SUCCESSES){
 8000fca:	f107 0310 	add.w	r3, r7, #16
 8000fce:	4619      	mov	r1, r3
 8000fd0:	482d      	ldr	r0, [pc, #180]	@ (8001088 <main+0x1c0>)
 8000fd2:	f001 f817 	bl	8002004 <MQTTConnect>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d013      	beq.n	8001004 <main+0x13c>
		while(1){
			DebugPrint("FAILED to connect MQTTClient!!!.\r\n");
 8000fdc:	482b      	ldr	r0, [pc, #172]	@ (800108c <main+0x1c4>)
 8000fde:	f7ff ff5b 	bl	8000e98 <DebugPrint>
			HAL_Delay(1000);
 8000fe2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fe6:	f002 f9b1 	bl	800334c <HAL_Delay>
			if(MQTTConnect(&client, &connectData) == SUCCESS){
 8000fea:	f107 0310 	add.w	r3, r7, #16
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4825      	ldr	r0, [pc, #148]	@ (8001088 <main+0x1c0>)
 8000ff2:	f001 f807 	bl	8002004 <MQTTConnect>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d1ef      	bne.n	8000fdc <main+0x114>
				DebugPrint("Connect MQTTClient successfully.\r\n");
 8000ffc:	4824      	ldr	r0, [pc, #144]	@ (8001090 <main+0x1c8>)
 8000ffe:	f7ff ff4b 	bl	8000e98 <DebugPrint>
				break;
 8001002:	e002      	b.n	800100a <main+0x142>
			}
		}
	} else{
		DebugPrint("Connect MQTTClient successfully.\r\n");
 8001004:	4822      	ldr	r0, [pc, #136]	@ (8001090 <main+0x1c8>)
 8001006:	f7ff ff47 	bl	8000e98 <DebugPrint>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MQTTMessage message;
	  message.qos = QOS0;
 800100a:	2300      	movs	r3, #0
 800100c:	703b      	strb	r3, [r7, #0]
	  message.retained = 0;
 800100e:	2300      	movs	r3, #0
 8001010:	707b      	strb	r3, [r7, #1]
	  message.dup = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	70bb      	strb	r3, [r7, #2]
	  message.payload = (void*)"Hello MQTT";
 8001016:	4b1f      	ldr	r3, [pc, #124]	@ (8001094 <main+0x1cc>)
 8001018:	60bb      	str	r3, [r7, #8]
	  message.payloadlen = strlen("Hello MQTT");
 800101a:	230a      	movs	r3, #10
 800101c:	60fb      	str	r3, [r7, #12]

	  if (MQTTPublish(&client, "device/hasan/data", &message) != 0) {
 800101e:	463b      	mov	r3, r7
 8001020:	461a      	mov	r2, r3
 8001022:	491d      	ldr	r1, [pc, #116]	@ (8001098 <main+0x1d0>)
 8001024:	4818      	ldr	r0, [pc, #96]	@ (8001088 <main+0x1c0>)
 8001026:	f000 fffe 	bl	8002026 <MQTTPublish>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d005      	beq.n	800103c <main+0x174>
	      DebugPrint("Failed to publish the message.\r\n");
 8001030:	481a      	ldr	r0, [pc, #104]	@ (800109c <main+0x1d4>)
 8001032:	f7ff ff31 	bl	8000e98 <DebugPrint>
	      return -1;
 8001036:	f04f 33ff 	mov.w	r3, #4294967295
 800103a:	e007      	b.n	800104c <main+0x184>
	  }
	  DebugPrint("Message published successfully.\r\n");
 800103c:	4818      	ldr	r0, [pc, #96]	@ (80010a0 <main+0x1d8>)
 800103e:	f7ff ff2b 	bl	8000e98 <DebugPrint>
	  HAL_Delay(1000);
 8001042:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001046:	f002 f981 	bl	800334c <HAL_Delay>
  {
 800104a:	e7de      	b.n	800100a <main+0x142>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 800104c:	4618      	mov	r0, r3
 800104e:	3768      	adds	r7, #104	@ 0x68
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	080077fc 	.word	0x080077fc
 8001058:	08007818 	.word	0x08007818
 800105c:	08007834 	.word	0x08007834
 8001060:	08007860 	.word	0x08007860
 8001064:	080079ac 	.word	0x080079ac
 8001068:	08007884 	.word	0x08007884
 800106c:	200004ac 	.word	0x200004ac
 8001070:	200001f0 	.word	0x200001f0
 8001074:	08007894 	.word	0x08007894
 8001078:	080078a8 	.word	0x080078a8
 800107c:	080078d0 	.word	0x080078d0
 8001080:	20000364 	.word	0x20000364
 8001084:	20000264 	.word	0x20000264
 8001088:	200001fc 	.word	0x200001fc
 800108c:	080078fc 	.word	0x080078fc
 8001090:	08007920 	.word	0x08007920
 8001094:	08007944 	.word	0x08007944
 8001098:	08007950 	.word	0x08007950
 800109c:	08007964 	.word	0x08007964
 80010a0:	08007988 	.word	0x08007988

080010a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b094      	sub	sp, #80	@ 0x50
 80010a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010aa:	f107 0320 	add.w	r3, r7, #32
 80010ae:	2230      	movs	r2, #48	@ 0x30
 80010b0:	2100      	movs	r1, #0
 80010b2:	4618      	mov	r0, r3
 80010b4:	f004 fa95 	bl	80055e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010b8:	f107 030c 	add.w	r3, r7, #12
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c8:	2300      	movs	r3, #0
 80010ca:	60bb      	str	r3, [r7, #8]
 80010cc:	4b27      	ldr	r3, [pc, #156]	@ (800116c <SystemClock_Config+0xc8>)
 80010ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010d0:	4a26      	ldr	r2, [pc, #152]	@ (800116c <SystemClock_Config+0xc8>)
 80010d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80010d8:	4b24      	ldr	r3, [pc, #144]	@ (800116c <SystemClock_Config+0xc8>)
 80010da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010e0:	60bb      	str	r3, [r7, #8]
 80010e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010e4:	2300      	movs	r3, #0
 80010e6:	607b      	str	r3, [r7, #4]
 80010e8:	4b21      	ldr	r3, [pc, #132]	@ (8001170 <SystemClock_Config+0xcc>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a20      	ldr	r2, [pc, #128]	@ (8001170 <SystemClock_Config+0xcc>)
 80010ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010f2:	6013      	str	r3, [r2, #0]
 80010f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001170 <SystemClock_Config+0xcc>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010fc:	607b      	str	r3, [r7, #4]
 80010fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001100:	2302      	movs	r3, #2
 8001102:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001104:	2301      	movs	r3, #1
 8001106:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001108:	2310      	movs	r3, #16
 800110a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800110c:	2302      	movs	r3, #2
 800110e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001110:	2300      	movs	r3, #0
 8001112:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001114:	2308      	movs	r3, #8
 8001116:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 8001118:	2350      	movs	r3, #80	@ 0x50
 800111a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800111c:	2302      	movs	r3, #2
 800111e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001120:	2304      	movs	r3, #4
 8001122:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001124:	f107 0320 	add.w	r3, r7, #32
 8001128:	4618      	mov	r0, r3
 800112a:	f002 fbcf 	bl	80038cc <HAL_RCC_OscConfig>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001134:	f000 f8d8 	bl	80012e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001138:	230f      	movs	r3, #15
 800113a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800113c:	2302      	movs	r3, #2
 800113e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001144:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001148:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800114a:	2300      	movs	r3, #0
 800114c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800114e:	f107 030c 	add.w	r3, r7, #12
 8001152:	2102      	movs	r1, #2
 8001154:	4618      	mov	r0, r3
 8001156:	f002 fe31 	bl	8003dbc <HAL_RCC_ClockConfig>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001160:	f000 f8c2 	bl	80012e8 <Error_Handler>
  }
}
 8001164:	bf00      	nop
 8001166:	3750      	adds	r7, #80	@ 0x50
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40023800 	.word	0x40023800
 8001170:	40007000 	.word	0x40007000

08001174 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001178:	4b11      	ldr	r3, [pc, #68]	@ (80011c0 <MX_UART4_Init+0x4c>)
 800117a:	4a12      	ldr	r2, [pc, #72]	@ (80011c4 <MX_UART4_Init+0x50>)
 800117c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800117e:	4b10      	ldr	r3, [pc, #64]	@ (80011c0 <MX_UART4_Init+0x4c>)
 8001180:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001184:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001186:	4b0e      	ldr	r3, [pc, #56]	@ (80011c0 <MX_UART4_Init+0x4c>)
 8001188:	2200      	movs	r2, #0
 800118a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800118c:	4b0c      	ldr	r3, [pc, #48]	@ (80011c0 <MX_UART4_Init+0x4c>)
 800118e:	2200      	movs	r2, #0
 8001190:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001192:	4b0b      	ldr	r3, [pc, #44]	@ (80011c0 <MX_UART4_Init+0x4c>)
 8001194:	2200      	movs	r2, #0
 8001196:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001198:	4b09      	ldr	r3, [pc, #36]	@ (80011c0 <MX_UART4_Init+0x4c>)
 800119a:	220c      	movs	r2, #12
 800119c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800119e:	4b08      	ldr	r3, [pc, #32]	@ (80011c0 <MX_UART4_Init+0x4c>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80011a4:	4b06      	ldr	r3, [pc, #24]	@ (80011c0 <MX_UART4_Init+0x4c>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80011aa:	4805      	ldr	r0, [pc, #20]	@ (80011c0 <MX_UART4_Init+0x4c>)
 80011ac:	f002 ffe6 	bl	800417c <HAL_UART_Init>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80011b6:	f000 f897 	bl	80012e8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	20000464 	.word	0x20000464
 80011c4:	40004c00 	.word	0x40004c00

080011c8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80011cc:	4b11      	ldr	r3, [pc, #68]	@ (8001214 <MX_UART5_Init+0x4c>)
 80011ce:	4a12      	ldr	r2, [pc, #72]	@ (8001218 <MX_UART5_Init+0x50>)
 80011d0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80011d2:	4b10      	ldr	r3, [pc, #64]	@ (8001214 <MX_UART5_Init+0x4c>)
 80011d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011d8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80011da:	4b0e      	ldr	r3, [pc, #56]	@ (8001214 <MX_UART5_Init+0x4c>)
 80011dc:	2200      	movs	r2, #0
 80011de:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80011e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001214 <MX_UART5_Init+0x4c>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80011e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001214 <MX_UART5_Init+0x4c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80011ec:	4b09      	ldr	r3, [pc, #36]	@ (8001214 <MX_UART5_Init+0x4c>)
 80011ee:	220c      	movs	r2, #12
 80011f0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011f2:	4b08      	ldr	r3, [pc, #32]	@ (8001214 <MX_UART5_Init+0x4c>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80011f8:	4b06      	ldr	r3, [pc, #24]	@ (8001214 <MX_UART5_Init+0x4c>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80011fe:	4805      	ldr	r0, [pc, #20]	@ (8001214 <MX_UART5_Init+0x4c>)
 8001200:	f002 ffbc 	bl	800417c <HAL_UART_Init>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800120a:	f000 f86d 	bl	80012e8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	200004ac 	.word	0x200004ac
 8001218:	40005000 	.word	0x40005000

0800121c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b088      	sub	sp, #32
 8001220:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001222:	f107 030c 	add.w	r3, r7, #12
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	609a      	str	r2, [r3, #8]
 800122e:	60da      	str	r2, [r3, #12]
 8001230:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	60bb      	str	r3, [r7, #8]
 8001236:	4b29      	ldr	r3, [pc, #164]	@ (80012dc <MX_GPIO_Init+0xc0>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123a:	4a28      	ldr	r2, [pc, #160]	@ (80012dc <MX_GPIO_Init+0xc0>)
 800123c:	f043 0304 	orr.w	r3, r3, #4
 8001240:	6313      	str	r3, [r2, #48]	@ 0x30
 8001242:	4b26      	ldr	r3, [pc, #152]	@ (80012dc <MX_GPIO_Init+0xc0>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001246:	f003 0304 	and.w	r3, r3, #4
 800124a:	60bb      	str	r3, [r7, #8]
 800124c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	607b      	str	r3, [r7, #4]
 8001252:	4b22      	ldr	r3, [pc, #136]	@ (80012dc <MX_GPIO_Init+0xc0>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001256:	4a21      	ldr	r2, [pc, #132]	@ (80012dc <MX_GPIO_Init+0xc0>)
 8001258:	f043 0301 	orr.w	r3, r3, #1
 800125c:	6313      	str	r3, [r2, #48]	@ 0x30
 800125e:	4b1f      	ldr	r3, [pc, #124]	@ (80012dc <MX_GPIO_Init+0xc0>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	607b      	str	r3, [r7, #4]
 8001268:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	603b      	str	r3, [r7, #0]
 800126e:	4b1b      	ldr	r3, [pc, #108]	@ (80012dc <MX_GPIO_Init+0xc0>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001272:	4a1a      	ldr	r2, [pc, #104]	@ (80012dc <MX_GPIO_Init+0xc0>)
 8001274:	f043 0308 	orr.w	r3, r3, #8
 8001278:	6313      	str	r3, [r2, #48]	@ 0x30
 800127a:	4b18      	ldr	r3, [pc, #96]	@ (80012dc <MX_GPIO_Init+0xc0>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127e:	f003 0308 	and.w	r3, r3, #8
 8001282:	603b      	str	r3, [r7, #0]
 8001284:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8001286:	2200      	movs	r2, #0
 8001288:	210c      	movs	r1, #12
 800128a:	4815      	ldr	r0, [pc, #84]	@ (80012e0 <MX_GPIO_Init+0xc4>)
 800128c:	f002 fb04 	bl	8003898 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001290:	2200      	movs	r2, #0
 8001292:	2110      	movs	r1, #16
 8001294:	4813      	ldr	r0, [pc, #76]	@ (80012e4 <MX_GPIO_Init+0xc8>)
 8001296:	f002 faff 	bl	8003898 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800129a:	230c      	movs	r3, #12
 800129c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129e:	2301      	movs	r3, #1
 80012a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a6:	2300      	movs	r3, #0
 80012a8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012aa:	f107 030c 	add.w	r3, r7, #12
 80012ae:	4619      	mov	r1, r3
 80012b0:	480b      	ldr	r0, [pc, #44]	@ (80012e0 <MX_GPIO_Init+0xc4>)
 80012b2:	f002 f955 	bl	8003560 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80012b6:	2310      	movs	r3, #16
 80012b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ba:	2301      	movs	r3, #1
 80012bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c2:	2300      	movs	r3, #0
 80012c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c6:	f107 030c 	add.w	r3, r7, #12
 80012ca:	4619      	mov	r1, r3
 80012cc:	4805      	ldr	r0, [pc, #20]	@ (80012e4 <MX_GPIO_Init+0xc8>)
 80012ce:	f002 f947 	bl	8003560 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012d2:	bf00      	nop
 80012d4:	3720      	adds	r7, #32
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40023800 	.word	0x40023800
 80012e0:	40020800 	.word	0x40020800
 80012e4:	40020000 	.word	0x40020000

080012e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012ec:	b672      	cpsid	i
}
 80012ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012f0:	bf00      	nop
 80012f2:	e7fd      	b.n	80012f0 <Error_Handler+0x8>

080012f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	607b      	str	r3, [r7, #4]
 80012fe:	4b10      	ldr	r3, [pc, #64]	@ (8001340 <HAL_MspInit+0x4c>)
 8001300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001302:	4a0f      	ldr	r2, [pc, #60]	@ (8001340 <HAL_MspInit+0x4c>)
 8001304:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001308:	6453      	str	r3, [r2, #68]	@ 0x44
 800130a:	4b0d      	ldr	r3, [pc, #52]	@ (8001340 <HAL_MspInit+0x4c>)
 800130c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800130e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001312:	607b      	str	r3, [r7, #4]
 8001314:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	603b      	str	r3, [r7, #0]
 800131a:	4b09      	ldr	r3, [pc, #36]	@ (8001340 <HAL_MspInit+0x4c>)
 800131c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131e:	4a08      	ldr	r2, [pc, #32]	@ (8001340 <HAL_MspInit+0x4c>)
 8001320:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001324:	6413      	str	r3, [r2, #64]	@ 0x40
 8001326:	4b06      	ldr	r3, [pc, #24]	@ (8001340 <HAL_MspInit+0x4c>)
 8001328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800132a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800132e:	603b      	str	r3, [r7, #0]
 8001330:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	40023800 	.word	0x40023800

08001344 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08c      	sub	sp, #48	@ 0x30
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134c:	f107 031c 	add.w	r3, r7, #28
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
 800135a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a41      	ldr	r2, [pc, #260]	@ (8001468 <HAL_UART_MspInit+0x124>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d12c      	bne.n	80013c0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	61bb      	str	r3, [r7, #24]
 800136a:	4b40      	ldr	r3, [pc, #256]	@ (800146c <HAL_UART_MspInit+0x128>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136e:	4a3f      	ldr	r2, [pc, #252]	@ (800146c <HAL_UART_MspInit+0x128>)
 8001370:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001374:	6413      	str	r3, [r2, #64]	@ 0x40
 8001376:	4b3d      	ldr	r3, [pc, #244]	@ (800146c <HAL_UART_MspInit+0x128>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800137e:	61bb      	str	r3, [r7, #24]
 8001380:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	617b      	str	r3, [r7, #20]
 8001386:	4b39      	ldr	r3, [pc, #228]	@ (800146c <HAL_UART_MspInit+0x128>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138a:	4a38      	ldr	r2, [pc, #224]	@ (800146c <HAL_UART_MspInit+0x128>)
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	6313      	str	r3, [r2, #48]	@ 0x30
 8001392:	4b36      	ldr	r3, [pc, #216]	@ (800146c <HAL_UART_MspInit+0x128>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	617b      	str	r3, [r7, #20]
 800139c:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800139e:	2303      	movs	r3, #3
 80013a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a2:	2302      	movs	r3, #2
 80013a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013aa:	2303      	movs	r3, #3
 80013ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80013ae:	2308      	movs	r3, #8
 80013b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b2:	f107 031c 	add.w	r3, r7, #28
 80013b6:	4619      	mov	r1, r3
 80013b8:	482d      	ldr	r0, [pc, #180]	@ (8001470 <HAL_UART_MspInit+0x12c>)
 80013ba:	f002 f8d1 	bl	8003560 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 80013be:	e04f      	b.n	8001460 <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==UART5)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a2b      	ldr	r2, [pc, #172]	@ (8001474 <HAL_UART_MspInit+0x130>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d14a      	bne.n	8001460 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_UART5_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	613b      	str	r3, [r7, #16]
 80013ce:	4b27      	ldr	r3, [pc, #156]	@ (800146c <HAL_UART_MspInit+0x128>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d2:	4a26      	ldr	r2, [pc, #152]	@ (800146c <HAL_UART_MspInit+0x128>)
 80013d4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80013d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80013da:	4b24      	ldr	r3, [pc, #144]	@ (800146c <HAL_UART_MspInit+0x128>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013e2:	613b      	str	r3, [r7, #16]
 80013e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	4b20      	ldr	r3, [pc, #128]	@ (800146c <HAL_UART_MspInit+0x128>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ee:	4a1f      	ldr	r2, [pc, #124]	@ (800146c <HAL_UART_MspInit+0x128>)
 80013f0:	f043 0304 	orr.w	r3, r3, #4
 80013f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013f6:	4b1d      	ldr	r3, [pc, #116]	@ (800146c <HAL_UART_MspInit+0x128>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fa:	f003 0304 	and.w	r3, r3, #4
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	60bb      	str	r3, [r7, #8]
 8001406:	4b19      	ldr	r3, [pc, #100]	@ (800146c <HAL_UART_MspInit+0x128>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140a:	4a18      	ldr	r2, [pc, #96]	@ (800146c <HAL_UART_MspInit+0x128>)
 800140c:	f043 0308 	orr.w	r3, r3, #8
 8001410:	6313      	str	r3, [r2, #48]	@ 0x30
 8001412:	4b16      	ldr	r3, [pc, #88]	@ (800146c <HAL_UART_MspInit+0x128>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001416:	f003 0308 	and.w	r3, r3, #8
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800141e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001422:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001424:	2302      	movs	r3, #2
 8001426:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800142c:	2303      	movs	r3, #3
 800142e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001430:	2308      	movs	r3, #8
 8001432:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001434:	f107 031c 	add.w	r3, r7, #28
 8001438:	4619      	mov	r1, r3
 800143a:	480f      	ldr	r0, [pc, #60]	@ (8001478 <HAL_UART_MspInit+0x134>)
 800143c:	f002 f890 	bl	8003560 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001440:	2304      	movs	r3, #4
 8001442:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001444:	2302      	movs	r3, #2
 8001446:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800144c:	2303      	movs	r3, #3
 800144e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001450:	2308      	movs	r3, #8
 8001452:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001454:	f107 031c 	add.w	r3, r7, #28
 8001458:	4619      	mov	r1, r3
 800145a:	4808      	ldr	r0, [pc, #32]	@ (800147c <HAL_UART_MspInit+0x138>)
 800145c:	f002 f880 	bl	8003560 <HAL_GPIO_Init>
}
 8001460:	bf00      	nop
 8001462:	3730      	adds	r7, #48	@ 0x30
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	40004c00 	.word	0x40004c00
 800146c:	40023800 	.word	0x40023800
 8001470:	40020000 	.word	0x40020000
 8001474:	40005000 	.word	0x40005000
 8001478:	40020800 	.word	0x40020800
 800147c:	40020c00 	.word	0x40020c00

08001480 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001484:	bf00      	nop
 8001486:	e7fd      	b.n	8001484 <NMI_Handler+0x4>

08001488 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	 __asm("TST LR, #4");
 800148c:	f01e 0f04 	tst.w	lr, #4
	 __asm("ITE EQ");
 8001490:	bf0c      	ite	eq
	 __asm("MRSEQ R0, MSP");
 8001492:	f3ef 8008 	mrseq	r0, MSP
	 __asm("MRSNE R0, PSP");
 8001496:	f3ef 8009 	mrsne	r0, PSP
	// __asm("B HardFault_Details");
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800149a:	bf00      	nop
 800149c:	e7fd      	b.n	800149a <HardFault_Handler+0x12>

0800149e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014a2:	bf00      	nop
 80014a4:	e7fd      	b.n	80014a2 <MemManage_Handler+0x4>

080014a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014a6:	b480      	push	{r7}
 80014a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014aa:	bf00      	nop
 80014ac:	e7fd      	b.n	80014aa <BusFault_Handler+0x4>

080014ae <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014b2:	bf00      	nop
 80014b4:	e7fd      	b.n	80014b2 <UsageFault_Handler+0x4>

080014b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014b6:	b480      	push	{r7}
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014c8:	bf00      	nop
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr

080014d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014d2:	b480      	push	{r7}
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	MilliTimer_Handler();
 80014e4:	f000 fe66 	bl	80021b4 <MilliTimer_Handler>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014e8:	f001 ff10 	bl	800330c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014ec:	bf00      	nop
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  return 1;
 80014f4:	2301      	movs	r3, #1
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <_kill>:

int _kill(int pid, int sig)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800150a:	f004 f8e5 	bl	80056d8 <__errno>
 800150e:	4603      	mov	r3, r0
 8001510:	2216      	movs	r2, #22
 8001512:	601a      	str	r2, [r3, #0]
  return -1;
 8001514:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001518:	4618      	mov	r0, r3
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}

08001520 <_exit>:

void _exit (int status)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001528:	f04f 31ff 	mov.w	r1, #4294967295
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f7ff ffe7 	bl	8001500 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001532:	bf00      	nop
 8001534:	e7fd      	b.n	8001532 <_exit+0x12>

08001536 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b086      	sub	sp, #24
 800153a:	af00      	add	r7, sp, #0
 800153c:	60f8      	str	r0, [r7, #12]
 800153e:	60b9      	str	r1, [r7, #8]
 8001540:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001542:	2300      	movs	r3, #0
 8001544:	617b      	str	r3, [r7, #20]
 8001546:	e00a      	b.n	800155e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001548:	f3af 8000 	nop.w
 800154c:	4601      	mov	r1, r0
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	1c5a      	adds	r2, r3, #1
 8001552:	60ba      	str	r2, [r7, #8]
 8001554:	b2ca      	uxtb	r2, r1
 8001556:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	3301      	adds	r3, #1
 800155c:	617b      	str	r3, [r7, #20]
 800155e:	697a      	ldr	r2, [r7, #20]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	429a      	cmp	r2, r3
 8001564:	dbf0      	blt.n	8001548 <_read+0x12>
  }

  return len;
 8001566:	687b      	ldr	r3, [r7, #4]
}
 8001568:	4618      	mov	r0, r3
 800156a:	3718      	adds	r7, #24
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800157c:	2300      	movs	r3, #0
 800157e:	617b      	str	r3, [r7, #20]
 8001580:	e009      	b.n	8001596 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	1c5a      	adds	r2, r3, #1
 8001586:	60ba      	str	r2, [r7, #8]
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	4618      	mov	r0, r3
 800158c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	3301      	adds	r3, #1
 8001594:	617b      	str	r3, [r7, #20]
 8001596:	697a      	ldr	r2, [r7, #20]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	429a      	cmp	r2, r3
 800159c:	dbf1      	blt.n	8001582 <_write+0x12>
  }
  return len;
 800159e:	687b      	ldr	r3, [r7, #4]
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3718      	adds	r7, #24
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <_close>:

int _close(int file)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015d0:	605a      	str	r2, [r3, #4]
  return 0;
 80015d2:	2300      	movs	r3, #0
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <_isatty>:

int _isatty(int file)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015e8:	2301      	movs	r3, #1
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015f6:	b480      	push	{r7}
 80015f8:	b085      	sub	sp, #20
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	60f8      	str	r0, [r7, #12]
 80015fe:	60b9      	str	r1, [r7, #8]
 8001600:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001602:	2300      	movs	r3, #0
}
 8001604:	4618      	mov	r0, r3
 8001606:	3714      	adds	r7, #20
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001618:	4a14      	ldr	r2, [pc, #80]	@ (800166c <_sbrk+0x5c>)
 800161a:	4b15      	ldr	r3, [pc, #84]	@ (8001670 <_sbrk+0x60>)
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001624:	4b13      	ldr	r3, [pc, #76]	@ (8001674 <_sbrk+0x64>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d102      	bne.n	8001632 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800162c:	4b11      	ldr	r3, [pc, #68]	@ (8001674 <_sbrk+0x64>)
 800162e:	4a12      	ldr	r2, [pc, #72]	@ (8001678 <_sbrk+0x68>)
 8001630:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001632:	4b10      	ldr	r3, [pc, #64]	@ (8001674 <_sbrk+0x64>)
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4413      	add	r3, r2
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	429a      	cmp	r2, r3
 800163e:	d207      	bcs.n	8001650 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001640:	f004 f84a 	bl	80056d8 <__errno>
 8001644:	4603      	mov	r3, r0
 8001646:	220c      	movs	r2, #12
 8001648:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800164a:	f04f 33ff 	mov.w	r3, #4294967295
 800164e:	e009      	b.n	8001664 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001650:	4b08      	ldr	r3, [pc, #32]	@ (8001674 <_sbrk+0x64>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001656:	4b07      	ldr	r3, [pc, #28]	@ (8001674 <_sbrk+0x64>)
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4413      	add	r3, r2
 800165e:	4a05      	ldr	r2, [pc, #20]	@ (8001674 <_sbrk+0x64>)
 8001660:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001662:	68fb      	ldr	r3, [r7, #12]
}
 8001664:	4618      	mov	r0, r3
 8001666:	3718      	adds	r7, #24
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	20020000 	.word	0x20020000
 8001670:	00000400 	.word	0x00000400
 8001674:	200004f4 	.word	0x200004f4
 8001678:	20000650 	.word	0x20000650

0800167c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001680:	4b06      	ldr	r3, [pc, #24]	@ (800169c <SystemInit+0x20>)
 8001682:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001686:	4a05      	ldr	r2, [pc, #20]	@ (800169c <SystemInit+0x20>)
 8001688:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800168c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001690:	bf00      	nop
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	e000ed00 	.word	0xe000ed00

080016a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80016a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016d8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80016a4:	f7ff ffea 	bl	800167c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016a8:	480c      	ldr	r0, [pc, #48]	@ (80016dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016aa:	490d      	ldr	r1, [pc, #52]	@ (80016e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016ac:	4a0d      	ldr	r2, [pc, #52]	@ (80016e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016b0:	e002      	b.n	80016b8 <LoopCopyDataInit>

080016b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016b6:	3304      	adds	r3, #4

080016b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016bc:	d3f9      	bcc.n	80016b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016be:	4a0a      	ldr	r2, [pc, #40]	@ (80016e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016c0:	4c0a      	ldr	r4, [pc, #40]	@ (80016ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80016c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016c4:	e001      	b.n	80016ca <LoopFillZerobss>

080016c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016c8:	3204      	adds	r2, #4

080016ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016cc:	d3fb      	bcc.n	80016c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016ce:	f004 f809 	bl	80056e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016d2:	f7ff fbf9 	bl	8000ec8 <main>
  bx  lr    
 80016d6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80016d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016e0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80016e4:	080082a0 	.word	0x080082a0
  ldr r2, =_sbss
 80016e8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80016ec:	20000650 	.word	0x20000650

080016f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016f0:	e7fe      	b.n	80016f0 <ADC_IRQHandler>

080016f2 <NewMessageData>:
#include "MQTTClient.h"

#include <stdio.h>
#include <string.h>

static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
 80016f2:	b480      	push	{r7}
 80016f4:	b085      	sub	sp, #20
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	60f8      	str	r0, [r7, #12]
 80016fa:	60b9      	str	r1, [r7, #8]
 80016fc:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	68ba      	ldr	r2, [r7, #8]
 8001702:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	601a      	str	r2, [r3, #0]
}
 800170a:	bf00      	nop
 800170c:	3714      	adds	r7, #20
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
 8001716:	b480      	push	{r7}
 8001718:	b083      	sub	sp, #12
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001726:	4293      	cmp	r3, r2
 8001728:	d003      	beq.n	8001732 <getNextPacketId+0x1c>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	3301      	adds	r3, #1
 8001730:	e000      	b.n	8001734 <getNextPacketId+0x1e>
 8001732:	2301      	movs	r3, #1
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	6013      	str	r3, [r2, #0]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
}
 800173c:	4618      	mov	r0, r3
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
 8001748:	b5f0      	push	{r4, r5, r6, r7, lr}
 800174a:	b087      	sub	sp, #28
 800174c:	af00      	add	r7, sp, #0
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	60b9      	str	r1, [r7, #8]
 8001752:	607a      	str	r2, [r7, #4]
    int rc = FAILURE,
 8001754:	f04f 33ff 	mov.w	r3, #4294967295
 8001758:	617b      	str	r3, [r7, #20]
        sent = 0;
 800175a:	2300      	movs	r3, #0
 800175c:	613b      	str	r3, [r7, #16]

    while (sent < length && !TimerIsExpired(timer))
 800175e:	e018      	b.n	8001792 <sendPacket+0x4a>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001764:	681c      	ldr	r4, [r3, #0]
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	6d5d      	ldr	r5, [r3, #84]	@ 0x54
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	691a      	ldr	r2, [r3, #16]
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	18d6      	adds	r6, r2, r3
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f000 fd7c 	bl	8002270 <TimerLeftMS>
 8001778:	4603      	mov	r3, r0
 800177a:	68ba      	ldr	r2, [r7, #8]
 800177c:	4631      	mov	r1, r6
 800177e:	4628      	mov	r0, r5
 8001780:	47a0      	blx	r4
 8001782:	6178      	str	r0, [r7, #20]
        if (rc < 0)  // there was an error writing the data
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	2b00      	cmp	r3, #0
 8001788:	db0e      	blt.n	80017a8 <sendPacket+0x60>
            break;
        sent += rc;
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	4413      	add	r3, r2
 8001790:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	429a      	cmp	r2, r3
 8001798:	da07      	bge.n	80017aa <sendPacket+0x62>
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f000 fd26 	bl	80021ec <TimerIsExpired>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d0dc      	beq.n	8001760 <sendPacket+0x18>
 80017a6:	e000      	b.n	80017aa <sendPacket+0x62>
            break;
 80017a8:	bf00      	nop
    }
    if (sent == length)
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d10b      	bne.n	80017ca <sendPacket+0x82>
    {
        TimerCountdown(&c->last_sent, c->keepAliveInterval); // record the fact that we have successfully sent the packet
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	f103 0258 	add.w	r2, r3, #88	@ 0x58
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	4619      	mov	r1, r3
 80017be:	4610      	mov	r0, r2
 80017c0:	f000 fd3e 	bl	8002240 <TimerCountdown>
        rc = SUCCESS;
 80017c4:	2300      	movs	r3, #0
 80017c6:	617b      	str	r3, [r7, #20]
 80017c8:	e002      	b.n	80017d0 <sendPacket+0x88>
    }
    else
        rc = FAILURE;
 80017ca:	f04f 33ff 	mov.w	r3, #4294967295
 80017ce:	617b      	str	r3, [r7, #20]
    return rc;
 80017d0:	697b      	ldr	r3, [r7, #20]
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	371c      	adds	r7, #28
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080017da <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	b086      	sub	sp, #24
 80017de:	af00      	add	r7, sp, #0
 80017e0:	60f8      	str	r0, [r7, #12]
 80017e2:	60b9      	str	r1, [r7, #8]
 80017e4:	607a      	str	r2, [r7, #4]
 80017e6:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	68ba      	ldr	r2, [r7, #8]
 80017ec:	655a      	str	r2, [r3, #84]	@ 0x54

    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 80017ee:	2300      	movs	r3, #0
 80017f0:	617b      	str	r3, [r7, #20]
 80017f2:	e008      	b.n	8001806 <MQTTClientInit+0x2c>
        c->messageHandlers[i].topicFilter = 0;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	697a      	ldr	r2, [r7, #20]
 80017f8:	3205      	adds	r2, #5
 80017fa:	2100      	movs	r1, #0
 80017fc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	3301      	adds	r3, #1
 8001804:	617b      	str	r3, [r7, #20]
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	2b04      	cmp	r3, #4
 800180a:	ddf3      	ble.n	80017f4 <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	683a      	ldr	r2, [r7, #0]
 8001816:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	6a3a      	ldr	r2, [r7, #32]
 800181c:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001822:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001828:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	2200      	movs	r2, #0
 800182e:	621a      	str	r2, [r3, #32]
    c->cleansession = 0;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2200      	movs	r2, #0
 8001834:	625a      	str	r2, [r3, #36]	@ 0x24
    c->ping_outstanding = 0;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2200      	movs	r2, #0
 800183a:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2200      	movs	r2, #0
 8001840:	651a      	str	r2, [r3, #80]	@ 0x50
	  c->next_packetid = 1;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	2201      	movs	r2, #1
 8001846:	601a      	str	r2, [r3, #0]
    TimerInit(&c->last_sent);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	3358      	adds	r3, #88	@ 0x58
 800184c:	4618      	mov	r0, r3
 800184e:	f000 fcbf 	bl	80021d0 <TimerInit>
    TimerInit(&c->last_received);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	3360      	adds	r3, #96	@ 0x60
 8001856:	4618      	mov	r0, r3
 8001858:	f000 fcba 	bl	80021d0 <TimerInit>
	#if defined(MQTT_TASK)
		  MutexInit(&c->mutex);
	#endif
}
 800185c:	bf00      	nop
 800185e:	3718      	adds	r7, #24
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
 8001864:	b590      	push	{r4, r7, lr}
 8001866:	b08b      	sub	sp, #44	@ 0x2c
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
 8001870:	2301      	movs	r3, #1
 8001872:	627b      	str	r3, [r7, #36]	@ 0x24
    int len = 0;
 8001874:	2300      	movs	r3, #0
 8001876:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
 8001878:	2304      	movs	r3, #4
 800187a:	61fb      	str	r3, [r7, #28]

    *value = 0;
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
 8001882:	f04f 33ff 	mov.w	r3, #4294967295
 8001886:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 8001888:	6a3b      	ldr	r3, [r7, #32]
 800188a:	3301      	adds	r3, #1
 800188c:	623b      	str	r3, [r7, #32]
 800188e:	6a3a      	ldr	r2, [r7, #32]
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	429a      	cmp	r2, r3
 8001894:	dd03      	ble.n	800189e <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
 8001896:	f04f 33ff 	mov.w	r3, #4294967295
 800189a:	61bb      	str	r3, [r7, #24]
            goto exit;
 800189c:	e021      	b.n	80018e2 <decodePacket+0x7e>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018a2:	685c      	ldr	r4, [r3, #4]
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80018a8:	f107 0117 	add.w	r1, r7, #23
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2201      	movs	r2, #1
 80018b0:	47a0      	blx	r4
 80018b2:	61b8      	str	r0, [r7, #24]
        if (rc != 1)
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d112      	bne.n	80018e0 <decodePacket+0x7c>
            goto exit;
        *value += (i & 127) * multiplier;
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	7dfb      	ldrb	r3, [r7, #23]
 80018c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80018c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80018c6:	fb01 f303 	mul.w	r3, r1, r3
 80018ca:	441a      	add	r2, r3
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
 80018d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d2:	01db      	lsls	r3, r3, #7
 80018d4:	627b      	str	r3, [r7, #36]	@ 0x24
    } while ((i & 128) != 0);
 80018d6:	7dfb      	ldrb	r3, [r7, #23]
 80018d8:	b25b      	sxtb	r3, r3
 80018da:	2b00      	cmp	r3, #0
 80018dc:	dbd1      	blt.n	8001882 <decodePacket+0x1e>
exit:
 80018de:	e000      	b.n	80018e2 <decodePacket+0x7e>
            goto exit;
 80018e0:	bf00      	nop
    return len;
 80018e2:	6a3b      	ldr	r3, [r7, #32]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	372c      	adds	r7, #44	@ 0x2c
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd90      	pop	{r4, r7, pc}

080018ec <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
 80018ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018ee:	b089      	sub	sp, #36	@ 0x24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
    MQTTHeader header = {0};
 80018f6:	2300      	movs	r3, #0
 80018f8:	617b      	str	r3, [r7, #20]
    int len = 0;
 80018fa:	2300      	movs	r3, #0
 80018fc:	61bb      	str	r3, [r7, #24]
    int rem_len = 0;
 80018fe:	2300      	movs	r3, #0
 8001900:	613b      	str	r3, [r7, #16]

    /* 1. read the header byte.  This has the packet type in it */
    int rc = c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer));
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001906:	685c      	ldr	r4, [r3, #4]
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	6d5d      	ldr	r5, [r3, #84]	@ 0x54
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	695e      	ldr	r6, [r3, #20]
 8001910:	68b8      	ldr	r0, [r7, #8]
 8001912:	f000 fcad 	bl	8002270 <TimerLeftMS>
 8001916:	4603      	mov	r3, r0
 8001918:	2201      	movs	r2, #1
 800191a:	4631      	mov	r1, r6
 800191c:	4628      	mov	r0, r5
 800191e:	47a0      	blx	r4
 8001920:	61f8      	str	r0, [r7, #28]
    if (rc != 1)
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d15d      	bne.n	80019e4 <readPacket+0xf8>
        goto exit;

    len = 1;
 8001928:	2301      	movs	r3, #1
 800192a:	61bb      	str	r3, [r7, #24]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
 800192c:	68b8      	ldr	r0, [r7, #8]
 800192e:	f000 fc9f 	bl	8002270 <TimerLeftMS>
 8001932:	4602      	mov	r2, r0
 8001934:	f107 0310 	add.w	r3, r7, #16
 8001938:	4619      	mov	r1, r3
 800193a:	68f8      	ldr	r0, [r7, #12]
 800193c:	f7ff ff92 	bl	8001864 <decodePacket>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	695b      	ldr	r3, [r3, #20]
 8001944:	3301      	adds	r3, #1
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	4611      	mov	r1, r2
 800194a:	4618      	mov	r0, r3
 800194c:	f001 f99b 	bl	8002c86 <MQTTPacket_encode>
 8001950:	4602      	mov	r2, r0
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	4413      	add	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]

    if (rem_len > (c->readbuf_size - len))
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	68da      	ldr	r2, [r3, #12]
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	4293      	cmp	r3, r2
 8001964:	d203      	bcs.n	800196e <readPacket+0x82>
    {
        rc = BUFFER_OVERFLOW;
 8001966:	f06f 0301 	mvn.w	r3, #1
 800196a:	61fb      	str	r3, [r7, #28]
        goto exit;
 800196c:	e03d      	b.n	80019ea <readPacket+0xfe>
    }

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (rc = c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len)) {
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	2b00      	cmp	r3, #0
 8001972:	dd20      	ble.n	80019b6 <readPacket+0xca>
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001978:	685c      	ldr	r4, [r3, #4]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	6d5d      	ldr	r5, [r3, #84]	@ 0x54
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	695a      	ldr	r2, [r3, #20]
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	18d6      	adds	r6, r2, r3
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	607b      	str	r3, [r7, #4]
 800198a:	68b8      	ldr	r0, [r7, #8]
 800198c:	f000 fc70 	bl	8002270 <TimerLeftMS>
 8001990:	4603      	mov	r3, r0
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	4631      	mov	r1, r6
 8001996:	4628      	mov	r0, r5
 8001998:	47a0      	blx	r4
 800199a:	4602      	mov	r2, r0
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	429a      	cmp	r2, r3
 80019a0:	bf14      	ite	ne
 80019a2:	2301      	movne	r3, #1
 80019a4:	2300      	moveq	r3, #0
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	61fb      	str	r3, [r7, #28]
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d002      	beq.n	80019b6 <readPacket+0xca>
        rc = 0;
 80019b0:	2300      	movs	r3, #0
 80019b2:	61fb      	str	r3, [r7, #28]
        goto exit;
 80019b4:	e019      	b.n	80019ea <readPacket+0xfe>
    }

    header.byte = c->readbuf[0];
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	695b      	ldr	r3, [r3, #20]
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	753b      	strb	r3, [r7, #20]
    rc = header.bits.type;
 80019be:	7d3b      	ldrb	r3, [r7, #20]
 80019c0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	61fb      	str	r3, [r7, #28]
    if (c->keepAliveInterval > 0)
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d00b      	beq.n	80019e8 <readPacket+0xfc>
        TimerCountdown(&c->last_received, c->keepAliveInterval); // record the fact that we have successfully received a packet
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	699b      	ldr	r3, [r3, #24]
 80019da:	4619      	mov	r1, r3
 80019dc:	4610      	mov	r0, r2
 80019de:	f000 fc2f 	bl	8002240 <TimerCountdown>
 80019e2:	e002      	b.n	80019ea <readPacket+0xfe>
        goto exit;
 80019e4:	bf00      	nop
 80019e6:	e000      	b.n	80019ea <readPacket+0xfe>
exit:
 80019e8:	bf00      	nop
    return rc;
 80019ea:	69fb      	ldr	r3, [r7, #28]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3724      	adds	r7, #36	@ 0x24
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080019f4 <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b087      	sub	sp, #28
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	4413      	add	r3, r2
 8001a12:	60bb      	str	r3, [r7, #8]

    while (*curf && curn < curn_end)
 8001a14:	e039      	b.n	8001a8a <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	2b2f      	cmp	r3, #47	@ 0x2f
 8001a1c:	d103      	bne.n	8001a26 <isTopicMatched+0x32>
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	2b2f      	cmp	r3, #47	@ 0x2f
 8001a24:	d13a      	bne.n	8001a9c <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	2b2b      	cmp	r3, #43	@ 0x2b
 8001a2c:	d009      	beq.n	8001a42 <isTopicMatched+0x4e>
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	2b23      	cmp	r3, #35	@ 0x23
 8001a34:	d005      	beq.n	8001a42 <isTopicMatched+0x4e>
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	781a      	ldrb	r2, [r3, #0]
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d12e      	bne.n	8001aa0 <isTopicMatched+0xac>
            break;
        if (*curf == '+')
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	2b2b      	cmp	r3, #43	@ 0x2b
 8001a48:	d112      	bne.n	8001a70 <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 8001a50:	e005      	b.n	8001a5e <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	3301      	adds	r3, #1
 8001a56:	613b      	str	r3, [r7, #16]
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 8001a5e:	68fa      	ldr	r2, [r7, #12]
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d20b      	bcs.n	8001a7e <isTopicMatched+0x8a>
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	2b2f      	cmp	r3, #47	@ 0x2f
 8001a6c:	d1f1      	bne.n	8001a52 <isTopicMatched+0x5e>
 8001a6e:	e006      	b.n	8001a7e <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	2b23      	cmp	r3, #35	@ 0x23
 8001a76:	d102      	bne.n	8001a7e <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	613b      	str	r3, [r7, #16]
        curf++;
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	3301      	adds	r3, #1
 8001a82:	617b      	str	r3, [r7, #20]
        curn++;
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	3301      	adds	r3, #1
 8001a88:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d007      	beq.n	8001aa2 <isTopicMatched+0xae>
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d3bd      	bcc.n	8001a16 <isTopicMatched+0x22>
 8001a9a:	e002      	b.n	8001aa2 <isTopicMatched+0xae>
            break;
 8001a9c:	bf00      	nop
 8001a9e:	e000      	b.n	8001aa2 <isTopicMatched+0xae>
            break;
 8001aa0:	bf00      	nop
    };

    return (curn == curn_end) && (*curf == '\0');
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d105      	bne.n	8001ab6 <isTopicMatched+0xc2>
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d101      	bne.n	8001ab6 <isTopicMatched+0xc2>
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e000      	b.n	8001ab8 <isTopicMatched+0xc4>
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	b2db      	uxtb	r3, r3
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	371c      	adds	r7, #28
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr

08001ac6 <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b08a      	sub	sp, #40	@ 0x28
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	60f8      	str	r0, [r7, #12]
 8001ace:	60b9      	str	r1, [r7, #8]
 8001ad0:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
 8001ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad6:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8001ad8:	2300      	movs	r3, #0
 8001ada:	627b      	str	r3, [r7, #36]	@ 0x24
 8001adc:	e03c      	b.n	8001b58 <deliverMessage+0x92>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ae2:	3205      	adds	r2, #5
 8001ae4:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d032      	beq.n	8001b52 <deliverMessage+0x8c>
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001af0:	3205      	adds	r2, #5
 8001af2:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8001af6:	4619      	mov	r1, r3
 8001af8:	68b8      	ldr	r0, [r7, #8]
 8001afa:	f001 fa93 	bl	8003024 <MQTTPacket_equals>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d10b      	bne.n	8001b1c <deliverMessage+0x56>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b08:	3205      	adds	r2, #5
 8001b0a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8001b0e:	68b9      	ldr	r1, [r7, #8]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff ff6f 	bl	80019f4 <isTopicMatched>
 8001b16:	4603      	mov	r3, r0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d01a      	beq.n	8001b52 <deliverMessage+0x8c>
        {
            if (c->messageHandlers[i].fp != NULL)
 8001b1c:	68fa      	ldr	r2, [r7, #12]
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b20:	3305      	adds	r3, #5
 8001b22:	00db      	lsls	r3, r3, #3
 8001b24:	4413      	add	r3, r2
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d012      	beq.n	8001b52 <deliverMessage+0x8c>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
 8001b2c:	f107 0318 	add.w	r3, r7, #24
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	68b9      	ldr	r1, [r7, #8]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff fddc 	bl	80016f2 <NewMessageData>
                c->messageHandlers[i].fp(&md);
 8001b3a:	68fa      	ldr	r2, [r7, #12]
 8001b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b3e:	3305      	adds	r3, #5
 8001b40:	00db      	lsls	r3, r3, #3
 8001b42:	4413      	add	r3, r2
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f107 0218 	add.w	r2, r7, #24
 8001b4a:	4610      	mov	r0, r2
 8001b4c:	4798      	blx	r3
                rc = SUCCESS;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8001b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b54:	3301      	adds	r3, #1
 8001b56:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b5a:	2b04      	cmp	r3, #4
 8001b5c:	ddbf      	ble.n	8001ade <deliverMessage+0x18>
            }
        }
    }

    if (rc == FAILURE && c->defaultMessageHandler != NULL)
 8001b5e:	6a3b      	ldr	r3, [r7, #32]
 8001b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b64:	d112      	bne.n	8001b8c <deliverMessage+0xc6>
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d00e      	beq.n	8001b8c <deliverMessage+0xc6>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
 8001b6e:	f107 0310 	add.w	r3, r7, #16
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	68b9      	ldr	r1, [r7, #8]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff fdbb 	bl	80016f2 <NewMessageData>
        c->defaultMessageHandler(&md);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b80:	f107 0210 	add.w	r2, r7, #16
 8001b84:	4610      	mov	r0, r2
 8001b86:	4798      	blx	r3
        rc = SUCCESS;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	623b      	str	r3, [r7, #32]
    }

    return rc;
 8001b8c:	6a3b      	ldr	r3, [r7, #32]
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3728      	adds	r7, #40	@ 0x28
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <keepalive>:


int keepalive(MQTTClient* c)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b086      	sub	sp, #24
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
    int rc = SUCCESS;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	617b      	str	r3, [r7, #20]

    if (c->keepAliveInterval == 0)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	699b      	ldr	r3, [r3, #24]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d03e      	beq.n	8001c28 <keepalive+0x92>
        goto exit;

    if (TimerIsExpired(&c->last_sent) || TimerIsExpired(&c->last_received))
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	3358      	adds	r3, #88	@ 0x58
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f000 fb1c 	bl	80021ec <TimerIsExpired>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d107      	bne.n	8001bca <keepalive+0x34>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	3360      	adds	r3, #96	@ 0x60
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f000 fb14 	bl	80021ec <TimerIsExpired>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d030      	beq.n	8001c2c <keepalive+0x96>
    {
        if (c->ping_outstanding)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	7f1b      	ldrb	r3, [r3, #28]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d003      	beq.n	8001bda <keepalive+0x44>
            rc = FAILURE; /* PINGRESP not received in keepalive interval */
 8001bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bd6:	617b      	str	r3, [r7, #20]
 8001bd8:	e029      	b.n	8001c2e <keepalive+0x98>
        else
        {
            Timer timer;
            TimerInit(&timer);
 8001bda:	f107 0308 	add.w	r3, r7, #8
 8001bde:	4618      	mov	r0, r3
 8001be0:	f000 faf6 	bl	80021d0 <TimerInit>
            TimerCountdownMS(&timer, 1000);
 8001be4:	f107 0308 	add.w	r3, r7, #8
 8001be8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001bec:	4618      	mov	r0, r3
 8001bee:	f000 fb13 	bl	8002218 <TimerCountdownMS>
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	691a      	ldr	r2, [r3, #16]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4610      	mov	r0, r2
 8001bfe:	f000 ff76 	bl	8002aee <MQTTSerialize_pingreq>
 8001c02:	6138      	str	r0, [r7, #16]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESS) // send the ping packet
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	dd11      	ble.n	8001c2e <keepalive+0x98>
 8001c0a:	f107 0308 	add.w	r3, r7, #8
 8001c0e:	461a      	mov	r2, r3
 8001c10:	6939      	ldr	r1, [r7, #16]
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f7ff fd98 	bl	8001748 <sendPacket>
 8001c18:	6178      	str	r0, [r7, #20]
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d106      	bne.n	8001c2e <keepalive+0x98>
                c->ping_outstanding = 1;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	771a      	strb	r2, [r3, #28]
 8001c26:	e002      	b.n	8001c2e <keepalive+0x98>
        goto exit;
 8001c28:	bf00      	nop
 8001c2a:	e000      	b.n	8001c2e <keepalive+0x98>
        }
    }

exit:
 8001c2c:	bf00      	nop
    return rc;
 8001c2e:	697b      	ldr	r3, [r7, #20]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3718      	adds	r7, #24
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <MQTTCleanSession>:


void MQTTCleanSession(MQTTClient* c)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
    int i = 0;
 8001c40:	2300      	movs	r3, #0
 8001c42:	60fb      	str	r3, [r7, #12]

    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8001c44:	2300      	movs	r3, #0
 8001c46:	60fb      	str	r3, [r7, #12]
 8001c48:	e008      	b.n	8001c5c <MQTTCleanSession+0x24>
        c->messageHandlers[i].topicFilter = NULL;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	68fa      	ldr	r2, [r7, #12]
 8001c4e:	3205      	adds	r2, #5
 8001c50:	2100      	movs	r1, #0
 8001c52:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2b04      	cmp	r3, #4
 8001c60:	ddf3      	ble.n	8001c4a <MQTTCleanSession+0x12>
}
 8001c62:	bf00      	nop
 8001c64:	bf00      	nop
 8001c66:	3714      	adds	r7, #20
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <MQTTCloseSession>:


void MQTTCloseSession(MQTTClient* c)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
    c->ping_outstanding = 0;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	771a      	strb	r2, [r3, #28]
    c->isconnected = 0;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	621a      	str	r2, [r3, #32]
    if (c->cleansession)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d002      	beq.n	8001c92 <MQTTCloseSession+0x22>
        MQTTCleanSession(c);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f7ff ffd3 	bl	8001c38 <MQTTCleanSession>
}
 8001c92:	bf00      	nop
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
	...

08001c9c <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
 8001c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c9e:	b095      	sub	sp, #84	@ 0x54
 8001ca0:	af06      	add	r7, sp, #24
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
    int len = 0,
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	637b      	str	r3, [r7, #52]	@ 0x34
        rc = SUCCESS;
 8001caa:	2300      	movs	r3, #0
 8001cac:	633b      	str	r3, [r7, #48]	@ 0x30

    int packet_type = readPacket(c, timer);     /* read the socket, see what work is due */
 8001cae:	6839      	ldr	r1, [r7, #0]
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f7ff fe1b 	bl	80018ec <readPacket>
 8001cb6:	62f8      	str	r0, [r7, #44]	@ 0x2c

    switch (packet_type)
 8001cb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cba:	2b0d      	cmp	r3, #13
 8001cbc:	d81e      	bhi.n	8001cfc <cycle+0x60>
 8001cbe:	a201      	add	r2, pc, #4	@ (adr r2, 8001cc4 <cycle+0x28>)
 8001cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cc4:	08001e53 	.word	0x08001e53
 8001cc8:	08001cfd 	.word	0x08001cfd
 8001ccc:	08001e53 	.word	0x08001e53
 8001cd0:	08001d03 	.word	0x08001d03
 8001cd4:	08001e53 	.word	0x08001e53
 8001cd8:	08001dcf 	.word	0x08001dcf
 8001cdc:	08001dcf 	.word	0x08001dcf
 8001ce0:	08001e53 	.word	0x08001e53
 8001ce4:	08001cfd 	.word	0x08001cfd
 8001ce8:	08001e53 	.word	0x08001e53
 8001cec:	08001cfd 	.word	0x08001cfd
 8001cf0:	08001e53 	.word	0x08001e53
 8001cf4:	08001cfd 	.word	0x08001cfd
 8001cf8:	08001e4b 	.word	0x08001e4b
    {
        default:
            /* no more data to read, unrecoverable. Or read packet fails due to unexpected network error */
            rc = packet_type;
 8001cfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cfe:	633b      	str	r3, [r7, #48]	@ 0x30
            goto exit;
 8001d00:	e0b9      	b.n	8001e76 <cycle+0x1da>
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            msg.payloadlen = 0; /* this is a size_t, but deserialize publish sets this as int */
 8001d02:	2300      	movs	r3, #0
 8001d04:	61fb      	str	r3, [r7, #28]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	695b      	ldr	r3, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	68d2      	ldr	r2, [r2, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 8001d0e:	4616      	mov	r6, r2
 8001d10:	f107 0210 	add.w	r2, r7, #16
 8001d14:	1d15      	adds	r5, r2, #4
 8001d16:	f107 0210 	add.w	r2, r7, #16
 8001d1a:	1c54      	adds	r4, r2, #1
 8001d1c:	f107 010c 	add.w	r1, r7, #12
 8001d20:	f107 0210 	add.w	r2, r7, #16
 8001d24:	1c90      	adds	r0, r2, #2
 8001d26:	9604      	str	r6, [sp, #16]
 8001d28:	9303      	str	r3, [sp, #12]
 8001d2a:	f107 0310 	add.w	r3, r7, #16
 8001d2e:	330c      	adds	r3, #12
 8001d30:	9302      	str	r3, [sp, #8]
 8001d32:	f107 0310 	add.w	r3, r7, #16
 8001d36:	3308      	adds	r3, #8
 8001d38:	9301      	str	r3, [sp, #4]
 8001d3a:	f107 0320 	add.w	r3, r7, #32
 8001d3e:	9300      	str	r3, [sp, #0]
 8001d40:	462b      	mov	r3, r5
 8001d42:	4622      	mov	r2, r4
 8001d44:	f000 fee2 	bl	8002b0c <MQTTDeserialize_publish>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	f040 8090 	bne.w	8001e70 <cycle+0x1d4>
                goto exit;
            msg.qos = (enum QoS)intQoS;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	743b      	strb	r3, [r7, #16]
            deliverMessage(c, &topicName, &msg);
 8001d56:	f107 0210 	add.w	r2, r7, #16
 8001d5a:	f107 0320 	add.w	r3, r7, #32
 8001d5e:	4619      	mov	r1, r3
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f7ff feb0 	bl	8001ac6 <deliverMessage>
            if (msg.qos != QOS0)
 8001d66:	7c3b      	ldrb	r3, [r7, #16]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d074      	beq.n	8001e56 <cycle+0x1ba>
            {
                if (msg.qos == QOS1)
 8001d6c:	7c3b      	ldrb	r3, [r7, #16]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d10c      	bne.n	8001d8c <cycle+0xf0>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6918      	ldr	r0, [r3, #16]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	8abb      	ldrh	r3, [r7, #20]
 8001d7e:	9300      	str	r3, [sp, #0]
 8001d80:	2300      	movs	r3, #0
 8001d82:	2204      	movs	r2, #4
 8001d84:	f001 fa1b 	bl	80031be <MQTTSerialize_ack>
 8001d88:	6378      	str	r0, [r7, #52]	@ 0x34
 8001d8a:	e00e      	b.n	8001daa <cycle+0x10e>
                else if (msg.qos == QOS2)
 8001d8c:	7c3b      	ldrb	r3, [r7, #16]
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d10b      	bne.n	8001daa <cycle+0x10e>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6918      	ldr	r0, [r3, #16]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	8abb      	ldrh	r3, [r7, #20]
 8001d9e:	9300      	str	r3, [sp, #0]
 8001da0:	2300      	movs	r3, #0
 8001da2:	2205      	movs	r2, #5
 8001da4:	f001 fa0b 	bl	80031be <MQTTSerialize_ack>
 8001da8:	6378      	str	r0, [r7, #52]	@ 0x34
                if (len <= 0)
 8001daa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	dc03      	bgt.n	8001db8 <cycle+0x11c>
                    rc = FAILURE;
 8001db0:	f04f 33ff 	mov.w	r3, #4294967295
 8001db4:	633b      	str	r3, [r7, #48]	@ 0x30
 8001db6:	e005      	b.n	8001dc4 <cycle+0x128>
                else
                    rc = sendPacket(c, len, timer);
 8001db8:	683a      	ldr	r2, [r7, #0]
 8001dba:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f7ff fcc3 	bl	8001748 <sendPacket>
 8001dc2:	6338      	str	r0, [r7, #48]	@ 0x30
                if (rc == FAILURE)
 8001dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dca:	d144      	bne.n	8001e56 <cycle+0x1ba>
                    goto exit; // there was a problem
 8001dcc:	e053      	b.n	8001e76 <cycle+0x1da>
        case PUBREC:
        case PUBREL:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	695c      	ldr	r4, [r3, #20]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	f107 020a 	add.w	r2, r7, #10
 8001dda:	f107 0109 	add.w	r1, r7, #9
 8001dde:	f107 0008 	add.w	r0, r7, #8
 8001de2:	9300      	str	r3, [sp, #0]
 8001de4:	4623      	mov	r3, r4
 8001de6:	f000 ff03 	bl	8002bf0 <MQTTDeserialize_ack>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d003      	beq.n	8001df8 <cycle+0x15c>
                rc = FAILURE;
 8001df0:	f04f 33ff 	mov.w	r3, #4294967295
 8001df4:	633b      	str	r3, [r7, #48]	@ 0x30
 8001df6:	e023      	b.n	8001e40 <cycle+0x1a4>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size,
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6918      	ldr	r0, [r3, #16]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	4619      	mov	r1, r3
 8001e02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e04:	2b05      	cmp	r3, #5
 8001e06:	d101      	bne.n	8001e0c <cycle+0x170>
 8001e08:	2206      	movs	r2, #6
 8001e0a:	e000      	b.n	8001e0e <cycle+0x172>
 8001e0c:	2207      	movs	r2, #7
 8001e0e:	897b      	ldrh	r3, [r7, #10]
 8001e10:	9300      	str	r3, [sp, #0]
 8001e12:	2300      	movs	r3, #0
 8001e14:	f001 f9d3 	bl	80031be <MQTTSerialize_ack>
 8001e18:	6378      	str	r0, [r7, #52]	@ 0x34
 8001e1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	dc03      	bgt.n	8001e28 <cycle+0x18c>
                (packet_type == PUBREC) ? PUBREL : PUBCOMP, 0, mypacketid)) <= 0)
                rc = FAILURE;
 8001e20:	f04f 33ff 	mov.w	r3, #4294967295
 8001e24:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e26:	e00b      	b.n	8001e40 <cycle+0x1a4>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESS) // send the PUBREL packet
 8001e28:	683a      	ldr	r2, [r7, #0]
 8001e2a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f7ff fc8b 	bl	8001748 <sendPacket>
 8001e32:	6338      	str	r0, [r7, #48]	@ 0x30
 8001e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d002      	beq.n	8001e40 <cycle+0x1a4>
                rc = FAILURE; // there was a problem
 8001e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e3e:	633b      	str	r3, [r7, #48]	@ 0x30
            if (rc == FAILURE)
 8001e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e46:	d108      	bne.n	8001e5a <cycle+0x1be>
                goto exit; // there was a problem
 8001e48:	e015      	b.n	8001e76 <cycle+0x1da>
        }

        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	771a      	strb	r2, [r3, #28]
            break;
 8001e50:	e004      	b.n	8001e5c <cycle+0x1c0>
            break;
 8001e52:	bf00      	nop
 8001e54:	e002      	b.n	8001e5c <cycle+0x1c0>
            break;
 8001e56:	bf00      	nop
 8001e58:	e000      	b.n	8001e5c <cycle+0x1c0>
            break;
 8001e5a:	bf00      	nop
    }

    if (keepalive(c) != SUCCESS) {
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f7ff fe9a 	bl	8001b96 <keepalive>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d005      	beq.n	8001e74 <cycle+0x1d8>
        //check only keepalive FAILURE status so that previous FAILURE status can be considered as FAULT
        rc = FAILURE;
 8001e68:	f04f 33ff 	mov.w	r3, #4294967295
 8001e6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e6e:	e002      	b.n	8001e76 <cycle+0x1da>
                goto exit;
 8001e70:	bf00      	nop
 8001e72:	e000      	b.n	8001e76 <cycle+0x1da>
    }

exit:
 8001e74:	bf00      	nop
    if (rc == SUCCESS)
 8001e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d102      	bne.n	8001e82 <cycle+0x1e6>
        rc = packet_type;
 8001e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e7e:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e80:	e006      	b.n	8001e90 <cycle+0x1f4>
    else if (c->isconnected)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6a1b      	ldr	r3, [r3, #32]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d002      	beq.n	8001e90 <cycle+0x1f4>
        MQTTCloseSession(c);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f7ff fef0 	bl	8001c70 <MQTTCloseSession>
    return rc;
 8001e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	373c      	adds	r7, #60	@ 0x3c
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e9a:	bf00      	nop

08001e9c <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	60f8      	str	r0, [r7, #12]
 8001ea4:	60b9      	str	r1, [r7, #8]
 8001ea6:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 8001ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8001eac:	617b      	str	r3, [r7, #20]

    do
    {
        if (TimerIsExpired(timer))
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 f99c 	bl	80021ec <TimerIsExpired>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d10c      	bne.n	8001ed4 <waitfor+0x38>
            break; // we timed out
        rc = cycle(c, timer);
 8001eba:	6879      	ldr	r1, [r7, #4]
 8001ebc:	68f8      	ldr	r0, [r7, #12]
 8001ebe:	f7ff feed 	bl	8001c9c <cycle>
 8001ec2:	6178      	str	r0, [r7, #20]
    }
    while (rc != packet_type && rc >= 0);
 8001ec4:	697a      	ldr	r2, [r7, #20]
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d004      	beq.n	8001ed6 <waitfor+0x3a>
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	daed      	bge.n	8001eae <waitfor+0x12>
 8001ed2:	e000      	b.n	8001ed6 <waitfor+0x3a>
            break; // we timed out
 8001ed4:	bf00      	nop

    return rc;
 8001ed6:	697b      	ldr	r3, [r7, #20]
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3718      	adds	r7, #24
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <MQTTConnectWithResults>:




int MQTTConnectWithResults(MQTTClient* c, MQTTPacket_connectData* options, MQTTConnackData* data)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b09e      	sub	sp, #120	@ 0x78
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	607a      	str	r2, [r7, #4]
    Timer connect_timer;
    int rc = FAILURE;
 8001eec:	f04f 33ff 	mov.w	r3, #4294967295
 8001ef0:	677b      	str	r3, [r7, #116]	@ 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
 8001ef2:	4a43      	ldr	r2, [pc, #268]	@ (8002000 <MQTTConnectWithResults+0x120>)
 8001ef4:	f107 0310 	add.w	r3, r7, #16
 8001ef8:	4611      	mov	r1, r2
 8001efa:	2258      	movs	r2, #88	@ 0x58
 8001efc:	4618      	mov	r0, r3
 8001efe:	f003 fc18 	bl	8005732 <memcpy>
    int len = 0;
 8001f02:	2300      	movs	r3, #0
 8001f04:	673b      	str	r3, [r7, #112]	@ 0x70

#if defined(MQTT_TASK)
	  MutexLock(&c->mutex);
#endif
	  if (c->isconnected) /* don't send connect packet again if we are already connected */
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	6a1b      	ldr	r3, [r3, #32]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d164      	bne.n	8001fd8 <MQTTConnectWithResults+0xf8>
		  goto exit;

    TimerInit(&connect_timer);
 8001f0e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001f12:	4618      	mov	r0, r3
 8001f14:	f000 f95c 	bl	80021d0 <TimerInit>
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	685a      	ldr	r2, [r3, #4]
 8001f1c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001f20:	4611      	mov	r1, r2
 8001f22:	4618      	mov	r0, r3
 8001f24:	f000 f978 	bl	8002218 <TimerCountdownMS>

    if (options == 0)
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d102      	bne.n	8001f34 <MQTTConnectWithResults+0x54>
        options = &default_options; /* set default options if none were supplied */
 8001f2e:	f107 0310 	add.w	r3, r7, #16
 8001f32:	60bb      	str	r3, [r7, #8]

    c->keepAliveInterval = options->keepAliveInterval;
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	8b1b      	ldrh	r3, [r3, #24]
 8001f38:	461a      	mov	r2, r3
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	619a      	str	r2, [r3, #24]
    c->cleansession = options->cleansession;
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	7e9b      	ldrb	r3, [r3, #26]
 8001f42:	461a      	mov	r2, r3
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	625a      	str	r2, [r3, #36]	@ 0x24
    TimerCountdown(&c->last_received, c->keepAliveInterval);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	4619      	mov	r1, r3
 8001f54:	4610      	mov	r0, r2
 8001f56:	f000 f973 	bl	8002240 <TimerCountdown>
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6918      	ldr	r0, [r3, #16]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	68ba      	ldr	r2, [r7, #8]
 8001f64:	4619      	mov	r1, r3
 8001f66:	f000 fc49 	bl	80027fc <MQTTSerialize_connect>
 8001f6a:	6738      	str	r0, [r7, #112]	@ 0x70
 8001f6c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	dd34      	ble.n	8001fdc <MQTTConnectWithResults+0xfc>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESS)  // send the connect packet
 8001f72:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001f76:	461a      	mov	r2, r3
 8001f78:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8001f7a:	68f8      	ldr	r0, [r7, #12]
 8001f7c:	f7ff fbe4 	bl	8001748 <sendPacket>
 8001f80:	6778      	str	r0, [r7, #116]	@ 0x74
 8001f82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d12b      	bne.n	8001fe0 <MQTTConnectWithResults+0x100>
        goto exit; // there was a problem

    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
 8001f88:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	2102      	movs	r1, #2
 8001f90:	68f8      	ldr	r0, [r7, #12]
 8001f92:	f7ff ff83 	bl	8001e9c <waitfor>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d119      	bne.n	8001fd0 <MQTTConnectWithResults+0xf0>
    {
        data->rc = 0;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	701a      	strb	r2, [r3, #0]
        data->sessionPresent = 0;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	705a      	strb	r2, [r3, #1]
        if (MQTTDeserialize_connack(&data->sessionPresent, &data->rc, c->readbuf, c->readbuf_size) == 1)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	1c58      	adds	r0, r3, #1
 8001fac:	6879      	ldr	r1, [r7, #4]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	695a      	ldr	r2, [r3, #20]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	f000 fd0d 	bl	80029d4 <MQTTDeserialize_connack>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d103      	bne.n	8001fc8 <MQTTConnectWithResults+0xe8>
            rc = data->rc;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	677b      	str	r3, [r7, #116]	@ 0x74
 8001fc6:	e00c      	b.n	8001fe2 <MQTTConnectWithResults+0x102>
        else
            rc = FAILURE;
 8001fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8001fcc:	677b      	str	r3, [r7, #116]	@ 0x74
 8001fce:	e008      	b.n	8001fe2 <MQTTConnectWithResults+0x102>
    }
    else
        rc = FAILURE;
 8001fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8001fd4:	677b      	str	r3, [r7, #116]	@ 0x74
 8001fd6:	e004      	b.n	8001fe2 <MQTTConnectWithResults+0x102>
		  goto exit;
 8001fd8:	bf00      	nop
 8001fda:	e002      	b.n	8001fe2 <MQTTConnectWithResults+0x102>
        goto exit;
 8001fdc:	bf00      	nop
 8001fde:	e000      	b.n	8001fe2 <MQTTConnectWithResults+0x102>
        goto exit; // there was a problem
 8001fe0:	bf00      	nop

exit:
    if (rc == SUCCESS)
 8001fe2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d105      	bne.n	8001ff4 <MQTTConnectWithResults+0x114>
    {
        c->isconnected = 1;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2201      	movs	r2, #1
 8001fec:	621a      	str	r2, [r3, #32]
        c->ping_outstanding = 0;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	771a      	strb	r2, [r3, #28]

#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif

    return rc;
 8001ff4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3778      	adds	r7, #120	@ 0x78
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	08007a04 	.word	0x08007a04

08002004 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
    MQTTConnackData data;
    return MQTTConnectWithResults(c, options, &data);
 800200e:	f107 030c 	add.w	r3, r7, #12
 8002012:	461a      	mov	r2, r3
 8002014:	6839      	ldr	r1, [r7, #0]
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f7ff ff62 	bl	8001ee0 <MQTTConnectWithResults>
 800201c:	4603      	mov	r3, r0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
 8002026:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002028:	b097      	sub	sp, #92	@ 0x5c
 800202a:	af08      	add	r7, sp, #32
 800202c:	60f8      	str	r0, [r7, #12]
 800202e:	60b9      	str	r1, [r7, #8]
 8002030:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 8002032:	f04f 33ff 	mov.w	r3, #4294967295
 8002036:	637b      	str	r3, [r7, #52]	@ 0x34
    Timer timer;
    MQTTString topic = MQTTString_initializer;
 8002038:	2300      	movs	r3, #0
 800203a:	61fb      	str	r3, [r7, #28]
 800203c:	2300      	movs	r3, #0
 800203e:	623b      	str	r3, [r7, #32]
 8002040:	2300      	movs	r3, #0
 8002042:	627b      	str	r3, [r7, #36]	@ 0x24
    topic.cstring = (char *)topicName;
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	61fb      	str	r3, [r7, #28]
    int len = 0;
 8002048:	2300      	movs	r3, #0
 800204a:	633b      	str	r3, [r7, #48]	@ 0x30

#if defined(MQTT_TASK)
	  MutexLock(&c->mutex);
#endif
	  if (!c->isconnected)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	6a1b      	ldr	r3, [r3, #32]
 8002050:	2b00      	cmp	r3, #0
 8002052:	f000 809b 	beq.w	800218c <MQTTPublish+0x166>
		    goto exit;

    TimerInit(&timer);
 8002056:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800205a:	4618      	mov	r0, r3
 800205c:	f000 f8b8 	bl	80021d0 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	685a      	ldr	r2, [r3, #4]
 8002064:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002068:	4611      	mov	r1, r2
 800206a:	4618      	mov	r0, r3
 800206c:	f000 f8d4 	bl	8002218 <TimerCountdownMS>

    if (message->qos == QOS1 || message->qos == QOS2)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d003      	beq.n	8002080 <MQTTPublish+0x5a>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	2b02      	cmp	r3, #2
 800207e:	d106      	bne.n	800208e <MQTTPublish+0x68>
        message->id = getNextPacketId(c);
 8002080:	68f8      	ldr	r0, [r7, #12]
 8002082:	f7ff fb48 	bl	8001716 <getNextPacketId>
 8002086:	4603      	mov	r3, r0
 8002088:	b29a      	uxth	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	809a      	strh	r2, [r3, #4]

    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	603b      	str	r3, [r7, #0]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	469c      	mov	ip, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	469e      	mov	lr, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	785d      	ldrb	r5, [r3, #1]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	889e      	ldrh	r6, [r3, #4]
              topic, (unsigned char*)message->payload, message->payloadlen);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	68d2      	ldr	r2, [r2, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 80020b0:	9206      	str	r2, [sp, #24]
 80020b2:	9305      	str	r3, [sp, #20]
 80020b4:	ac02      	add	r4, sp, #8
 80020b6:	f107 031c 	add.w	r3, r7, #28
 80020ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80020be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80020c2:	9601      	str	r6, [sp, #4]
 80020c4:	9500      	str	r5, [sp, #0]
 80020c6:	4673      	mov	r3, lr
 80020c8:	2200      	movs	r2, #0
 80020ca:	4661      	mov	r1, ip
 80020cc:	6838      	ldr	r0, [r7, #0]
 80020ce:	f001 f800 	bl	80030d2 <MQTTSerialize_publish>
 80020d2:	6338      	str	r0, [r7, #48]	@ 0x30
    if (len <= 0)
 80020d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	dd5a      	ble.n	8002190 <MQTTPublish+0x16a>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
 80020da:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80020de:	461a      	mov	r2, r3
 80020e0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80020e2:	68f8      	ldr	r0, [r7, #12]
 80020e4:	f7ff fb30 	bl	8001748 <sendPacket>
 80020e8:	6378      	str	r0, [r7, #52]	@ 0x34
 80020ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d151      	bne.n	8002194 <MQTTPublish+0x16e>
        goto exit; // there was a problem

    if (message->qos == QOS1)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d122      	bne.n	800213e <MQTTPublish+0x118>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
 80020f8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80020fc:	461a      	mov	r2, r3
 80020fe:	2104      	movs	r1, #4
 8002100:	68f8      	ldr	r0, [r7, #12]
 8002102:	f7ff fecb 	bl	8001e9c <waitfor>
 8002106:	4603      	mov	r3, r0
 8002108:	2b04      	cmp	r3, #4
 800210a:	d114      	bne.n	8002136 <MQTTPublish+0x110>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	695c      	ldr	r4, [r3, #20]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	f107 021a 	add.w	r2, r7, #26
 8002118:	f107 0119 	add.w	r1, r7, #25
 800211c:	f107 0018 	add.w	r0, r7, #24
 8002120:	9300      	str	r3, [sp, #0]
 8002122:	4623      	mov	r3, r4
 8002124:	f000 fd64 	bl	8002bf0 <MQTTDeserialize_ack>
 8002128:	4603      	mov	r3, r0
 800212a:	2b01      	cmp	r3, #1
 800212c:	d035      	beq.n	800219a <MQTTPublish+0x174>
                rc = FAILURE;
 800212e:	f04f 33ff 	mov.w	r3, #4294967295
 8002132:	637b      	str	r3, [r7, #52]	@ 0x34
 8002134:	e031      	b.n	800219a <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 8002136:	f04f 33ff 	mov.w	r3, #4294967295
 800213a:	637b      	str	r3, [r7, #52]	@ 0x34
 800213c:	e02d      	b.n	800219a <MQTTPublish+0x174>
    }
    else if (message->qos == QOS2)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	2b02      	cmp	r3, #2
 8002144:	d128      	bne.n	8002198 <MQTTPublish+0x172>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
 8002146:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800214a:	461a      	mov	r2, r3
 800214c:	2107      	movs	r1, #7
 800214e:	68f8      	ldr	r0, [r7, #12]
 8002150:	f7ff fea4 	bl	8001e9c <waitfor>
 8002154:	4603      	mov	r3, r0
 8002156:	2b07      	cmp	r3, #7
 8002158:	d114      	bne.n	8002184 <MQTTPublish+0x15e>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	695c      	ldr	r4, [r3, #20]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	f107 0216 	add.w	r2, r7, #22
 8002166:	f107 0115 	add.w	r1, r7, #21
 800216a:	f107 0014 	add.w	r0, r7, #20
 800216e:	9300      	str	r3, [sp, #0]
 8002170:	4623      	mov	r3, r4
 8002172:	f000 fd3d 	bl	8002bf0 <MQTTDeserialize_ack>
 8002176:	4603      	mov	r3, r0
 8002178:	2b01      	cmp	r3, #1
 800217a:	d00e      	beq.n	800219a <MQTTPublish+0x174>
                rc = FAILURE;
 800217c:	f04f 33ff 	mov.w	r3, #4294967295
 8002180:	637b      	str	r3, [r7, #52]	@ 0x34
 8002182:	e00a      	b.n	800219a <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 8002184:	f04f 33ff 	mov.w	r3, #4294967295
 8002188:	637b      	str	r3, [r7, #52]	@ 0x34
 800218a:	e006      	b.n	800219a <MQTTPublish+0x174>
		    goto exit;
 800218c:	bf00      	nop
 800218e:	e004      	b.n	800219a <MQTTPublish+0x174>
        goto exit;
 8002190:	bf00      	nop
 8002192:	e002      	b.n	800219a <MQTTPublish+0x174>
        goto exit; // there was a problem
 8002194:	bf00      	nop
 8002196:	e000      	b.n	800219a <MQTTPublish+0x174>
    }

exit:
 8002198:	bf00      	nop
    if (rc == FAILURE)
 800219a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800219c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a0:	d102      	bne.n	80021a8 <MQTTPublish+0x182>
        MQTTCloseSession(c);
 80021a2:	68f8      	ldr	r0, [r7, #12]
 80021a4:	f7ff fd64 	bl	8001c70 <MQTTCloseSession>
#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif
    return rc;
 80021a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	373c      	adds	r7, #60	@ 0x3c
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080021b4 <MilliTimer_Handler>:
char command[256];
/*
 * @brief MQTT MilliTimer handler
 * @note MUST BE register to your system 1m Tick timer handler.
 */
void MilliTimer_Handler(void) {
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
	MilliTimer++;
 80021b8:	4b04      	ldr	r3, [pc, #16]	@ (80021cc <MilliTimer_Handler+0x18>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	3301      	adds	r3, #1
 80021be:	4a03      	ldr	r2, [pc, #12]	@ (80021cc <MilliTimer_Handler+0x18>)
 80021c0:	6013      	str	r3, [r2, #0]
}
 80021c2:	bf00      	nop
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr
 80021cc:	200004f8 	.word	0x200004f8

080021d0 <TimerInit>:
/*
 * @brief Timer Initialize
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
void TimerInit(Timer* timer) {
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
	timer->end_time = 0;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	605a      	str	r2, [r3, #4]
}
 80021de:	bf00      	nop
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
	...

080021ec <TimerIsExpired>:
/*
 * @brief expired Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
char TimerIsExpired(Timer* timer) {
 80021ec:	b480      	push	{r7}
 80021ee:	b085      	sub	sp, #20
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
	long left = (long)((unsigned long) timer->end_time - MilliTimer);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685a      	ldr	r2, [r3, #4]
 80021f8:	4b06      	ldr	r3, [pc, #24]	@ (8002214 <TimerIsExpired+0x28>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	60fb      	str	r3, [r7, #12]
	return (left < 0);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	0fdb      	lsrs	r3, r3, #31
 8002204:	b2db      	uxtb	r3, r3
}
 8002206:	4618      	mov	r0, r3
 8002208:	3714      	adds	r7, #20
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	200004f8 	.word	0x200004f8

08002218 <TimerCountdownMS>:
 * @brief Countdown millisecond Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 *         timeout : setting timeout millisecond.
 */
void TimerCountdownMS(Timer* timer, unsigned int timeout) {
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + timeout;
 8002222:	4b06      	ldr	r3, [pc, #24]	@ (800223c <TimerCountdownMS+0x24>)
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	441a      	add	r2, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	605a      	str	r2, [r3, #4]
}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	200004f8 	.word	0x200004f8

08002240 <TimerCountdown>:
 * @brief Countdown second Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 *         timeout : setting timeout millisecond.
 */
void TimerCountdown(Timer* timer, unsigned int timeout) {
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + (timeout * 1000);
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002250:	fb03 f202 	mul.w	r2, r3, r2
 8002254:	4b05      	ldr	r3, [pc, #20]	@ (800226c <TimerCountdown+0x2c>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	441a      	add	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	605a      	str	r2, [r3, #4]
}
 800225e:	bf00      	nop
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	200004f8 	.word	0x200004f8

08002270 <TimerLeftMS>:
/*
 * @brief left millisecond Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
int TimerLeftMS(Timer* timer) {
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685a      	ldr	r2, [r3, #4]
 800227c:	4b06      	ldr	r3, [pc, #24]	@ (8002298 <TimerLeftMS+0x28>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	60fb      	str	r3, [r7, #12]
	return (left < 0) ? 0 : left;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
}
 800228a:	4618      	mov	r0, r3
 800228c:	3714      	adds	r7, #20
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	200004f8 	.word	0x200004f8

0800229c <NetworkInit>:
extern UART_HandleTypeDef huart5; // UART handle for SIM A7670C

#define AT_COMMAND_RESPONSE_OK "OK"
#define AT_COMMAND_RESPONSE_ERROR "ERROR"

void NetworkInit(Network* n, UART_HandleTypeDef* uart_handle) {
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
    n->mqttwrite = SIM_NetworkWrite;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a07      	ldr	r2, [pc, #28]	@ (80022c8 <NetworkInit+0x2c>)
 80022aa:	601a      	str	r2, [r3, #0]
    n->mqttread = SIM_NetworkRead;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4a07      	ldr	r2, [pc, #28]	@ (80022cc <NetworkInit+0x30>)
 80022b0:	605a      	str	r2, [r3, #4]
    n->context.uart_handle = uart_handle;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	609a      	str	r2, [r3, #8]

    DebugPrint("Network initialized.\r\n");
 80022b8:	4805      	ldr	r0, [pc, #20]	@ (80022d0 <NetworkInit+0x34>)
 80022ba:	f7fe fded 	bl	8000e98 <DebugPrint>
}
 80022be:	bf00      	nop
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	08002425 	.word	0x08002425
 80022cc:	08002469 	.word	0x08002469
 80022d0:	08007a5c 	.word	0x08007a5c

080022d4 <ConnectNetwork>:
 *         that contains the configuration information for the Network.
 *         ip : server iP.
 *         port : server port.
 * @retval SOCKOK code or SOCKERR code
 */
int ConnectNetwork(Network* n, const char* hostname, uint16_t port) {
 80022d4:	b580      	push	{r7, lr}
 80022d6:	f5ad 7d4a 	sub.w	sp, sp, #808	@ 0x328
 80022da:	af02      	add	r7, sp, #8
 80022dc:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 80022e0:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 80022e4:	6018      	str	r0, [r3, #0]
 80022e6:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 80022ea:	f5a3 7346 	sub.w	r3, r3, #792	@ 0x318
 80022ee:	6019      	str	r1, [r3, #0]
 80022f0:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 80022f4:	f2a3 331a 	subw	r3, r3, #794	@ 0x31a
 80022f8:	801a      	strh	r2, [r3, #0]
    char command[256];
    char ip_address[16] = {0};
 80022fa:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 80022fe:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002302:	2200      	movs	r2, #0
 8002304:	601a      	str	r2, [r3, #0]
 8002306:	3304      	adds	r3, #4
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	605a      	str	r2, [r3, #4]
 800230e:	609a      	str	r2, [r3, #8]

    DebugPrint("Connecting to server...\r\n");
 8002310:	4835      	ldr	r0, [pc, #212]	@ (80023e8 <ConnectNetwork+0x114>)
 8002312:	f7fe fdc1 	bl	8000e98 <DebugPrint>


    char cmd[512];

    DebugPrint("Starting MQTT service...\r\n");
 8002316:	4835      	ldr	r0, [pc, #212]	@ (80023ec <ConnectNetwork+0x118>)
 8002318:	f7fe fdbe 	bl	8000e98 <DebugPrint>
	if (SIM_SendCommand(&huart5, "AT+CMQTTSTART", "OK", TIMEOUT_MS) != 0) {
 800231c:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002320:	4a33      	ldr	r2, [pc, #204]	@ (80023f0 <ConnectNetwork+0x11c>)
 8002322:	4934      	ldr	r1, [pc, #208]	@ (80023f4 <ConnectNetwork+0x120>)
 8002324:	4834      	ldr	r0, [pc, #208]	@ (80023f8 <ConnectNetwork+0x124>)
 8002326:	f000 f8c1 	bl	80024ac <SIM_SendCommand>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d005      	beq.n	800233c <ConnectNetwork+0x68>
		DebugPrint("Failed to start MQTT service.\r\n");
 8002330:	4832      	ldr	r0, [pc, #200]	@ (80023fc <ConnectNetwork+0x128>)
 8002332:	f7fe fdb1 	bl	8000e98 <DebugPrint>
		return -1;
 8002336:	f04f 33ff 	mov.w	r3, #4294967295
 800233a:	e050      	b.n	80023de <ConnectNetwork+0x10a>
	}


	DebugPrint("Creating MQTT client...\r\n");
 800233c:	4830      	ldr	r0, [pc, #192]	@ (8002400 <ConnectNetwork+0x12c>)
 800233e:	f7fe fdab 	bl	8000e98 <DebugPrint>
	snprintf(cmd, sizeof(cmd), "AT+CMQTTACCQ=0,\"%s\"", MQTT_CLIENT_ID);
 8002342:	f107 0010 	add.w	r0, r7, #16
 8002346:	4b2f      	ldr	r3, [pc, #188]	@ (8002404 <ConnectNetwork+0x130>)
 8002348:	4a2f      	ldr	r2, [pc, #188]	@ (8002408 <ConnectNetwork+0x134>)
 800234a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800234e:	f003 f8d1 	bl	80054f4 <sniprintf>
	if (SIM_SendCommand(&huart5, cmd, "OK", TIMEOUT_MS) != 0) {
 8002352:	f107 0110 	add.w	r1, r7, #16
 8002356:	f242 7310 	movw	r3, #10000	@ 0x2710
 800235a:	4a25      	ldr	r2, [pc, #148]	@ (80023f0 <ConnectNetwork+0x11c>)
 800235c:	4826      	ldr	r0, [pc, #152]	@ (80023f8 <ConnectNetwork+0x124>)
 800235e:	f000 f8a5 	bl	80024ac <SIM_SendCommand>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d005      	beq.n	8002374 <ConnectNetwork+0xa0>
		DebugPrint("Failed to create MQTT client.\r\n");
 8002368:	4828      	ldr	r0, [pc, #160]	@ (800240c <ConnectNetwork+0x138>)
 800236a:	f7fe fd95 	bl	8000e98 <DebugPrint>
		return -1;
 800236e:	f04f 33ff 	mov.w	r3, #4294967295
 8002372:	e034      	b.n	80023de <ConnectNetwork+0x10a>
	}


	DebugPrint("Connecting to MQTT broker...\r\n");
 8002374:	4826      	ldr	r0, [pc, #152]	@ (8002410 <ConnectNetwork+0x13c>)
 8002376:	f7fe fd8f 	bl	8000e98 <DebugPrint>
	//snprintf(cmd, sizeof(cmd),"AT+CMQTTCONNECT=0,\"tcp://demo.thingsboard.io:1883\",90,1"); //working
	snprintf(cmd, sizeof(cmd), "AT+CMQTTCONNECT=0,\"tcp://%s:%d\",90,1", hostname, port); //working
 800237a:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 800237e:	f2a3 331a 	subw	r3, r3, #794	@ 0x31a
 8002382:	881a      	ldrh	r2, [r3, #0]
 8002384:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 8002388:	f5a3 7346 	sub.w	r3, r3, #792	@ 0x318
 800238c:	f107 0010 	add.w	r0, r7, #16
 8002390:	9200      	str	r2, [sp, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a1f      	ldr	r2, [pc, #124]	@ (8002414 <ConnectNetwork+0x140>)
 8002396:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800239a:	f003 f8ab 	bl	80054f4 <sniprintf>
	//snprintf(cmd, sizeof(cmd), "AT+CMQTTCONNECT=0,\"tcp://%s:%d\",90,1,\"%s\"", hostname, port, MQTT_TOKEN); //not working

	if (SIM_SendCommand(&huart5, cmd, "OK", TIMEOUT_MS) != 0) {
 800239e:	f107 0110 	add.w	r1, r7, #16
 80023a2:	f242 7310 	movw	r3, #10000	@ 0x2710
 80023a6:	4a12      	ldr	r2, [pc, #72]	@ (80023f0 <ConnectNetwork+0x11c>)
 80023a8:	4813      	ldr	r0, [pc, #76]	@ (80023f8 <ConnectNetwork+0x124>)
 80023aa:	f000 f87f 	bl	80024ac <SIM_SendCommand>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d010      	beq.n	80023d6 <ConnectNetwork+0x102>
		DebugPrint("Failed to connect to MQTT broker.\r\n");
 80023b4:	4818      	ldr	r0, [pc, #96]	@ (8002418 <ConnectNetwork+0x144>)
 80023b6:	f7fe fd6f 	bl	8000e98 <DebugPrint>
		SIM_SendCommand(&huart5, "AT+CMQTTSTOP", "OK", TIMEOUT_MS);
 80023ba:	f242 7310 	movw	r3, #10000	@ 0x2710
 80023be:	4a0c      	ldr	r2, [pc, #48]	@ (80023f0 <ConnectNetwork+0x11c>)
 80023c0:	4916      	ldr	r1, [pc, #88]	@ (800241c <ConnectNetwork+0x148>)
 80023c2:	480d      	ldr	r0, [pc, #52]	@ (80023f8 <ConnectNetwork+0x124>)
 80023c4:	f000 f872 	bl	80024ac <SIM_SendCommand>
		HAL_Delay(1000);
 80023c8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80023cc:	f000 ffbe 	bl	800334c <HAL_Delay>
		return -1;
 80023d0:	f04f 33ff 	mov.w	r3, #4294967295
 80023d4:	e003      	b.n	80023de <ConnectNetwork+0x10a>
	}

	DebugPrint("MQTT connection established.\r\n");
 80023d6:	4812      	ldr	r0, [pc, #72]	@ (8002420 <ConnectNetwork+0x14c>)
 80023d8:	f7fe fd5e 	bl	8000e98 <DebugPrint>
	return 0;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	f507 7748 	add.w	r7, r7, #800	@ 0x320
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	08007a74 	.word	0x08007a74
 80023ec:	08007a90 	.word	0x08007a90
 80023f0:	08007aac 	.word	0x08007aac
 80023f4:	08007ab0 	.word	0x08007ab0
 80023f8:	200004ac 	.word	0x200004ac
 80023fc:	08007ac0 	.word	0x08007ac0
 8002400:	08007ae0 	.word	0x08007ae0
 8002404:	08007afc 	.word	0x08007afc
 8002408:	08007b0c 	.word	0x08007b0c
 800240c:	08007b20 	.word	0x08007b20
 8002410:	08007b40 	.word	0x08007b40
 8002414:	08007b60 	.word	0x08007b60
 8002418:	08007b88 	.word	0x08007b88
 800241c:	08007bac 	.word	0x08007bac
 8002420:	08007bbc 	.word	0x08007bbc

08002424 <SIM_NetworkWrite>:

int SIM_NetworkWrite(void* context, unsigned char* buffer, int len, int timeout_ms) {
 8002424:	b580      	push	{r7, lr}
 8002426:	b086      	sub	sp, #24
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
 8002430:	603b      	str	r3, [r7, #0]
    SIM7670_NetworkContext* ctx = (SIM7670_NetworkContext*)context;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	617b      	str	r3, [r7, #20]

    if (HAL_UART_Transmit(ctx->uart_handle, buffer, len, timeout_ms) == HAL_OK) {
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	6818      	ldr	r0, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	b29a      	uxth	r2, r3
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	68b9      	ldr	r1, [r7, #8]
 8002442:	f001 feeb 	bl	800421c <HAL_UART_Transmit>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d101      	bne.n	8002450 <SIM_NetworkWrite+0x2c>
        return len;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	e004      	b.n	800245a <SIM_NetworkWrite+0x36>
    }
    DebugPrint("Error: Network write failed.\r\n");
 8002450:	4804      	ldr	r0, [pc, #16]	@ (8002464 <SIM_NetworkWrite+0x40>)
 8002452:	f7fe fd21 	bl	8000e98 <DebugPrint>
    return -1;
 8002456:	f04f 33ff 	mov.w	r3, #4294967295
}
 800245a:	4618      	mov	r0, r3
 800245c:	3718      	adds	r7, #24
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	08007bdc 	.word	0x08007bdc

08002468 <SIM_NetworkRead>:

int SIM_NetworkRead(void* context, unsigned char* buffer, int len, int timeout_ms) {
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	607a      	str	r2, [r7, #4]
 8002474:	603b      	str	r3, [r7, #0]
    SIM7670_NetworkContext* ctx = (SIM7670_NetworkContext*)context;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	617b      	str	r3, [r7, #20]

    if (HAL_UART_Receive(ctx->uart_handle, buffer, len, timeout_ms) == HAL_OK) {
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	6818      	ldr	r0, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	b29a      	uxth	r2, r3
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	68b9      	ldr	r1, [r7, #8]
 8002486:	f001 ff54 	bl	8004332 <HAL_UART_Receive>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d101      	bne.n	8002494 <SIM_NetworkRead+0x2c>
        return len;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	e004      	b.n	800249e <SIM_NetworkRead+0x36>
    }
    DebugPrint("Error: Network read failed.\r\n");
 8002494:	4804      	ldr	r0, [pc, #16]	@ (80024a8 <SIM_NetworkRead+0x40>)
 8002496:	f7fe fcff 	bl	8000e98 <DebugPrint>
    return -1;
 800249a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3718      	adds	r7, #24
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	08007bfc 	.word	0x08007bfc

080024ac <SIM_SendCommand>:

int SIM_SendCommand(UART_HandleTypeDef* uart, const char* command, const char* expected_response, uint32_t timeout) {
 80024ac:	b590      	push	{r4, r7, lr}
 80024ae:	b0c9      	sub	sp, #292	@ 0x124
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	f507 7490 	add.w	r4, r7, #288	@ 0x120
 80024b6:	f5a4 748a 	sub.w	r4, r4, #276	@ 0x114
 80024ba:	6020      	str	r0, [r4, #0]
 80024bc:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 80024c0:	f5a0 708c 	sub.w	r0, r0, #280	@ 0x118
 80024c4:	6001      	str	r1, [r0, #0]
 80024c6:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 80024ca:	f5a1 718e 	sub.w	r1, r1, #284	@ 0x11c
 80024ce:	600a      	str	r2, [r1, #0]
 80024d0:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80024d4:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 80024d8:	6013      	str	r3, [r2, #0]
    char response[256] = {0};
 80024da:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80024de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80024e2:	2200      	movs	r2, #0
 80024e4:	601a      	str	r2, [r3, #0]
 80024e6:	3304      	adds	r3, #4
 80024e8:	22fc      	movs	r2, #252	@ 0xfc
 80024ea:	2100      	movs	r1, #0
 80024ec:	4618      	mov	r0, r3
 80024ee:	f003 f878 	bl	80055e2 <memset>
    char temp_char;
    uint16_t response_pos = 0;
 80024f2:	2300      	movs	r3, #0
 80024f4:	f8a7 311e 	strh.w	r3, [r7, #286]	@ 0x11e
    uint32_t start_time = HAL_GetTick();
 80024f8:	f000 ff1c 	bl	8003334 <HAL_GetTick>
 80024fc:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    DebugPrint("Sending command: ");
 8002500:	484b      	ldr	r0, [pc, #300]	@ (8002630 <SIM_SendCommand+0x184>)
 8002502:	f7fe fcc9 	bl	8000e98 <DebugPrint>
    DebugPrint(command);
 8002506:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800250a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800250e:	6818      	ldr	r0, [r3, #0]
 8002510:	f7fe fcc2 	bl	8000e98 <DebugPrint>
    DebugPrint("\r\n");
 8002514:	4847      	ldr	r0, [pc, #284]	@ (8002634 <SIM_SendCommand+0x188>)
 8002516:	f7fe fcbf 	bl	8000e98 <DebugPrint>

    HAL_UART_Transmit(uart, (uint8_t*)command, strlen(command), timeout);
 800251a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800251e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002522:	6818      	ldr	r0, [r3, #0]
 8002524:	f7fd fea4 	bl	8000270 <strlen>
 8002528:	4603      	mov	r3, r0
 800252a:	b29a      	uxth	r2, r3
 800252c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002530:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002534:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8002538:	f5a1 718c 	sub.w	r1, r1, #280	@ 0x118
 800253c:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 8002540:	f5a0 708a 	sub.w	r0, r0, #276	@ 0x114
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	6809      	ldr	r1, [r1, #0]
 8002548:	6800      	ldr	r0, [r0, #0]
 800254a:	f001 fe67 	bl	800421c <HAL_UART_Transmit>
    HAL_UART_Transmit(uart, (uint8_t*)"\r\n", 2, timeout);
 800254e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002552:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002556:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800255a:	f5a2 708a 	sub.w	r0, r2, #276	@ 0x114
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2202      	movs	r2, #2
 8002562:	4934      	ldr	r1, [pc, #208]	@ (8002634 <SIM_SendCommand+0x188>)
 8002564:	6800      	ldr	r0, [r0, #0]
 8002566:	f001 fe59 	bl	800421c <HAL_UART_Transmit>

    while ((HAL_GetTick() - start_time) < timeout) {
 800256a:	e03f      	b.n	80025ec <SIM_SendCommand+0x140>
        if (HAL_UART_Receive(uart, (uint8_t*)&temp_char, 1, timeout) == HAL_OK) {
 800256c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002570:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002574:	f107 0117 	add.w	r1, r7, #23
 8002578:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800257c:	f5a2 708a 	sub.w	r0, r2, #276	@ 0x114
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2201      	movs	r2, #1
 8002584:	6800      	ldr	r0, [r0, #0]
 8002586:	f001 fed4 	bl	8004332 <HAL_UART_Receive>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d12d      	bne.n	80025ec <SIM_SendCommand+0x140>
            response[response_pos++] = temp_char;
 8002590:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 8002594:	1c5a      	adds	r2, r3, #1
 8002596:	f8a7 211e 	strh.w	r2, [r7, #286]	@ 0x11e
 800259a:	461a      	mov	r2, r3
 800259c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80025a0:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80025a4:	7819      	ldrb	r1, [r3, #0]
 80025a6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80025aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80025ae:	5499      	strb	r1, [r3, r2]
            if (strstr(response, expected_response)) {
 80025b0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80025b4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80025b8:	f107 0218 	add.w	r2, r7, #24
 80025bc:	6819      	ldr	r1, [r3, #0]
 80025be:	4610      	mov	r0, r2
 80025c0:	f003 f829 	bl	8005616 <strstr>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d00c      	beq.n	80025e4 <SIM_SendCommand+0x138>
                DebugPrint("Response: ");
 80025ca:	481b      	ldr	r0, [pc, #108]	@ (8002638 <SIM_SendCommand+0x18c>)
 80025cc:	f7fe fc64 	bl	8000e98 <DebugPrint>
                DebugPrint(response);
 80025d0:	f107 0318 	add.w	r3, r7, #24
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7fe fc5f 	bl	8000e98 <DebugPrint>
                DebugPrint("\r\n");
 80025da:	4816      	ldr	r0, [pc, #88]	@ (8002634 <SIM_SendCommand+0x188>)
 80025dc:	f7fe fc5c 	bl	8000e98 <DebugPrint>
                return 0;
 80025e0:	2300      	movs	r3, #0
 80025e2:	e01f      	b.n	8002624 <SIM_SendCommand+0x178>
            }
            if (response_pos >= sizeof(response) - 1) break;
 80025e4:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 80025e8:	2bfe      	cmp	r3, #254	@ 0xfe
 80025ea:	d80d      	bhi.n	8002608 <SIM_SendCommand+0x15c>
    while ((HAL_GetTick() - start_time) < timeout) {
 80025ec:	f000 fea2 	bl	8003334 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80025fc:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 8002600:	6812      	ldr	r2, [r2, #0]
 8002602:	429a      	cmp	r2, r3
 8002604:	d8b2      	bhi.n	800256c <SIM_SendCommand+0xc0>
 8002606:	e000      	b.n	800260a <SIM_SendCommand+0x15e>
            if (response_pos >= sizeof(response) - 1) break;
 8002608:	bf00      	nop
        }
    }

    DebugPrint("Command failed: ");
 800260a:	480c      	ldr	r0, [pc, #48]	@ (800263c <SIM_SendCommand+0x190>)
 800260c:	f7fe fc44 	bl	8000e98 <DebugPrint>
    DebugPrint(response);
 8002610:	f107 0318 	add.w	r3, r7, #24
 8002614:	4618      	mov	r0, r3
 8002616:	f7fe fc3f 	bl	8000e98 <DebugPrint>
    DebugPrint("\r\n");
 800261a:	4806      	ldr	r0, [pc, #24]	@ (8002634 <SIM_SendCommand+0x188>)
 800261c:	f7fe fc3c 	bl	8000e98 <DebugPrint>
    return -1;
 8002620:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002624:	4618      	mov	r0, r3
 8002626:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 800262a:	46bd      	mov	sp, r7
 800262c:	bd90      	pop	{r4, r7, pc}
 800262e:	bf00      	nop
 8002630:	08007c1c 	.word	0x08007c1c
 8002634:	08007c30 	.word	0x08007c30
 8002638:	08007c34 	.word	0x08007c34
 800263c:	08007c40 	.word	0x08007c40

08002640 <Network_Init>:

int Network_Init() {
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
    DebugPrint("Initializing network...\r\n");
 8002644:	4824      	ldr	r0, [pc, #144]	@ (80026d8 <Network_Init+0x98>)
 8002646:	f7fe fc27 	bl	8000e98 <DebugPrint>

    // Enable error codes
    if (SIM_SendCommand(&huart5, "AT+CMEE=2", "OK", TIMEOUT_MS) != 0) {
 800264a:	f242 7310 	movw	r3, #10000	@ 0x2710
 800264e:	4a23      	ldr	r2, [pc, #140]	@ (80026dc <Network_Init+0x9c>)
 8002650:	4923      	ldr	r1, [pc, #140]	@ (80026e0 <Network_Init+0xa0>)
 8002652:	4824      	ldr	r0, [pc, #144]	@ (80026e4 <Network_Init+0xa4>)
 8002654:	f7ff ff2a 	bl	80024ac <SIM_SendCommand>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d005      	beq.n	800266a <Network_Init+0x2a>
        DebugPrint("Failed to enable error codes.\r\n");
 800265e:	4822      	ldr	r0, [pc, #136]	@ (80026e8 <Network_Init+0xa8>)
 8002660:	f7fe fc1a 	bl	8000e98 <DebugPrint>
        return -1;
 8002664:	f04f 33ff 	mov.w	r3, #4294967295
 8002668:	e033      	b.n	80026d2 <Network_Init+0x92>
    }

    // Attach GPRS
    if (SIM_SendCommand(&huart5, "AT+CGATT=1", "OK", TIMEOUT_MS) != 0) {
 800266a:	f242 7310 	movw	r3, #10000	@ 0x2710
 800266e:	4a1b      	ldr	r2, [pc, #108]	@ (80026dc <Network_Init+0x9c>)
 8002670:	491e      	ldr	r1, [pc, #120]	@ (80026ec <Network_Init+0xac>)
 8002672:	481c      	ldr	r0, [pc, #112]	@ (80026e4 <Network_Init+0xa4>)
 8002674:	f7ff ff1a 	bl	80024ac <SIM_SendCommand>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d005      	beq.n	800268a <Network_Init+0x4a>
        DebugPrint("Failed to attach to GPRS.\r\n");
 800267e:	481c      	ldr	r0, [pc, #112]	@ (80026f0 <Network_Init+0xb0>)
 8002680:	f7fe fc0a 	bl	8000e98 <DebugPrint>
        return -1;
 8002684:	f04f 33ff 	mov.w	r3, #4294967295
 8002688:	e023      	b.n	80026d2 <Network_Init+0x92>
    }

    // Configure PDP context
    if (SIM_SendCommand(&huart5, "AT+CGDCONT=1,\"IP\",\"blweb\"", "OK", TIMEOUT_MS) != 0) {
 800268a:	f242 7310 	movw	r3, #10000	@ 0x2710
 800268e:	4a13      	ldr	r2, [pc, #76]	@ (80026dc <Network_Init+0x9c>)
 8002690:	4918      	ldr	r1, [pc, #96]	@ (80026f4 <Network_Init+0xb4>)
 8002692:	4814      	ldr	r0, [pc, #80]	@ (80026e4 <Network_Init+0xa4>)
 8002694:	f7ff ff0a 	bl	80024ac <SIM_SendCommand>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d005      	beq.n	80026aa <Network_Init+0x6a>
        DebugPrint("Failed to configure PDP context.\r\n");
 800269e:	4816      	ldr	r0, [pc, #88]	@ (80026f8 <Network_Init+0xb8>)
 80026a0:	f7fe fbfa 	bl	8000e98 <DebugPrint>
        return -1;
 80026a4:	f04f 33ff 	mov.w	r3, #4294967295
 80026a8:	e013      	b.n	80026d2 <Network_Init+0x92>
    }

    // Activate PDP context
    if (SIM_SendCommand(&huart5, "AT+CGACT=1,1", "OK", TIMEOUT_MS) != 0) {
 80026aa:	f242 7310 	movw	r3, #10000	@ 0x2710
 80026ae:	4a0b      	ldr	r2, [pc, #44]	@ (80026dc <Network_Init+0x9c>)
 80026b0:	4912      	ldr	r1, [pc, #72]	@ (80026fc <Network_Init+0xbc>)
 80026b2:	480c      	ldr	r0, [pc, #48]	@ (80026e4 <Network_Init+0xa4>)
 80026b4:	f7ff fefa 	bl	80024ac <SIM_SendCommand>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d005      	beq.n	80026ca <Network_Init+0x8a>
        DebugPrint("Failed to activate PDP context.\r\n");
 80026be:	4810      	ldr	r0, [pc, #64]	@ (8002700 <Network_Init+0xc0>)
 80026c0:	f7fe fbea 	bl	8000e98 <DebugPrint>
        return -1;
 80026c4:	f04f 33ff 	mov.w	r3, #4294967295
 80026c8:	e003      	b.n	80026d2 <Network_Init+0x92>
    }

    DebugPrint("Network initialized successfully.\r\n");
 80026ca:	480e      	ldr	r0, [pc, #56]	@ (8002704 <Network_Init+0xc4>)
 80026cc:	f7fe fbe4 	bl	8000e98 <DebugPrint>
    return 0;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	08007c54 	.word	0x08007c54
 80026dc:	08007aac 	.word	0x08007aac
 80026e0:	08007c70 	.word	0x08007c70
 80026e4:	200004ac 	.word	0x200004ac
 80026e8:	08007c7c 	.word	0x08007c7c
 80026ec:	08007c9c 	.word	0x08007c9c
 80026f0:	08007ca8 	.word	0x08007ca8
 80026f4:	08007cc4 	.word	0x08007cc4
 80026f8:	08007ce0 	.word	0x08007ce0
 80026fc:	08007d04 	.word	0x08007d04
 8002700:	08007d14 	.word	0x08007d14
 8002704:	08007d38 	.word	0x08007d38

08002708 <SIM_Reset>:

    // Wait for the module to initialize
    HAL_Delay(5000); // 5 seconds for module startup
}

void SIM_Reset(void) {
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
    // Pull RST pin low to reset
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 800270c:	2201      	movs	r2, #1
 800270e:	2104      	movs	r1, #4
 8002710:	4808      	ldr	r0, [pc, #32]	@ (8002734 <SIM_Reset+0x2c>)
 8002712:	f001 f8c1 	bl	8003898 <HAL_GPIO_WritePin>
    HAL_Delay(5000); // 100 ms pulse
 8002716:	f241 3088 	movw	r0, #5000	@ 0x1388
 800271a:	f000 fe17 	bl	800334c <HAL_Delay>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800271e:	2200      	movs	r2, #0
 8002720:	2104      	movs	r1, #4
 8002722:	4804      	ldr	r0, [pc, #16]	@ (8002734 <SIM_Reset+0x2c>)
 8002724:	f001 f8b8 	bl	8003898 <HAL_GPIO_WritePin>

    // Wait for the module to reinitialize
    HAL_Delay(5000); // 5 seconds for full reset
 8002728:	f241 3088 	movw	r0, #5000	@ 0x1388
 800272c:	f000 fe0e 	bl	800334c <HAL_Delay>
}
 8002730:	bf00      	nop
 8002732:	bd80      	pop	{r7, pc}
 8002734:	40020800 	.word	0x40020800

08002738 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 8002738:	b590      	push	{r4, r7, lr}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
	int len = 0;
 8002740:	2300      	movs	r3, #0
 8002742:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	7a1b      	ldrb	r3, [r3, #8]
 8002748:	2b03      	cmp	r3, #3
 800274a:	d102      	bne.n	8002752 <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
 800274c:	230c      	movs	r3, #12
 800274e:	60fb      	str	r3, [r7, #12]
 8002750:	e005      	b.n	800275e <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	7a1b      	ldrb	r3, [r3, #8]
 8002756:	2b04      	cmp	r3, #4
 8002758:	d101      	bne.n	800275e <MQTTSerialize_connectLength+0x26>
		len = 10;
 800275a:	230a      	movs	r3, #10
 800275c:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	330c      	adds	r3, #12
 8002762:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002766:	f000 fc44 	bl	8002ff2 <MQTTstrlen>
 800276a:	4603      	mov	r3, r0
 800276c:	3302      	adds	r3, #2
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	4413      	add	r3, r2
 8002772:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	7edb      	ldrb	r3, [r3, #27]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d013      	beq.n	80027a4 <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	3324      	adds	r3, #36	@ 0x24
 8002780:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002784:	f000 fc35 	bl	8002ff2 <MQTTstrlen>
 8002788:	4603      	mov	r3, r0
 800278a:	1c9c      	adds	r4, r3, #2
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	3330      	adds	r3, #48	@ 0x30
 8002790:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002794:	f000 fc2d 	bl	8002ff2 <MQTTstrlen>
 8002798:	4603      	mov	r3, r0
 800279a:	4423      	add	r3, r4
 800279c:	3302      	adds	r3, #2
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	4413      	add	r3, r2
 80027a2:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d103      	bne.n	80027b4 <MQTTSerialize_connectLength+0x7c>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d00a      	beq.n	80027ca <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	3340      	adds	r3, #64	@ 0x40
 80027b8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80027bc:	f000 fc19 	bl	8002ff2 <MQTTstrlen>
 80027c0:	4603      	mov	r3, r0
 80027c2:	3302      	adds	r3, #2
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	4413      	add	r3, r2
 80027c8:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d103      	bne.n	80027da <MQTTSerialize_connectLength+0xa2>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d00a      	beq.n	80027f0 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	334c      	adds	r3, #76	@ 0x4c
 80027de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80027e2:	f000 fc06 	bl	8002ff2 <MQTTstrlen>
 80027e6:	4603      	mov	r3, r0
 80027e8:	3302      	adds	r3, #2
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	4413      	add	r3, r2
 80027ee:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
 80027f0:	68fb      	ldr	r3, [r7, #12]
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3714      	adds	r7, #20
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd90      	pop	{r4, r7, pc}
	...

080027fc <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b08a      	sub	sp, #40	@ 0x28
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 800280c:	2300      	movs	r3, #0
 800280e:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 8002810:	2300      	movs	r3, #0
 8002812:	617b      	str	r3, [r7, #20]
	int len = 0;
 8002814:	2300      	movs	r3, #0
 8002816:	623b      	str	r3, [r7, #32]
	int rc = -1;
 8002818:	f04f 33ff 	mov.w	r3, #4294967295
 800281c:	627b      	str	r3, [r7, #36]	@ 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f7ff ff8a 	bl	8002738 <MQTTSerialize_connectLength>
 8002824:	6238      	str	r0, [r7, #32]
 8002826:	6a38      	ldr	r0, [r7, #32]
 8002828:	f000 fa98 	bl	8002d5c <MQTTPacket_len>
 800282c:	4602      	mov	r2, r0
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	4293      	cmp	r3, r2
 8002832:	da03      	bge.n	800283c <MQTTSerialize_connect+0x40>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8002834:	f06f 0301 	mvn.w	r3, #1
 8002838:	627b      	str	r3, [r7, #36]	@ 0x24
		goto exit;
 800283a:	e0c2      	b.n	80029c2 <MQTTSerialize_connect+0x1c6>
	}

	header.byte = 0;
 800283c:	2300      	movs	r3, #0
 800283e:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 8002840:	7e3b      	ldrb	r3, [r7, #24]
 8002842:	2201      	movs	r2, #1
 8002844:	f362 1307 	bfi	r3, r2, #4, #4
 8002848:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 800284a:	7e3a      	ldrb	r2, [r7, #24]
 800284c:	f107 031c 	add.w	r3, r7, #28
 8002850:	4611      	mov	r1, r2
 8002852:	4618      	mov	r0, r3
 8002854:	f000 fb11 	bl	8002e7a <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	6a39      	ldr	r1, [r7, #32]
 800285c:	4618      	mov	r0, r3
 800285e:	f000 fa12 	bl	8002c86 <MQTTPacket_encode>
 8002862:	4602      	mov	r2, r0
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	4413      	add	r3, r2
 8002868:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	7a1b      	ldrb	r3, [r3, #8]
 800286e:	2b04      	cmp	r3, #4
 8002870:	d10c      	bne.n	800288c <MQTTSerialize_connect+0x90>
	{
		writeCString(&ptr, "MQTT");
 8002872:	f107 031c 	add.w	r3, r7, #28
 8002876:	4955      	ldr	r1, [pc, #340]	@ (80029cc <MQTTSerialize_connect+0x1d0>)
 8002878:	4618      	mov	r0, r3
 800287a:	f000 fb3c 	bl	8002ef6 <writeCString>
		writeChar(&ptr, (char) 4);
 800287e:	f107 031c 	add.w	r3, r7, #28
 8002882:	2104      	movs	r1, #4
 8002884:	4618      	mov	r0, r3
 8002886:	f000 faf8 	bl	8002e7a <writeChar>
 800288a:	e00b      	b.n	80028a4 <MQTTSerialize_connect+0xa8>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
 800288c:	f107 031c 	add.w	r3, r7, #28
 8002890:	494f      	ldr	r1, [pc, #316]	@ (80029d0 <MQTTSerialize_connect+0x1d4>)
 8002892:	4618      	mov	r0, r3
 8002894:	f000 fb2f 	bl	8002ef6 <writeCString>
		writeChar(&ptr, (char) 3);
 8002898:	f107 031c 	add.w	r3, r7, #28
 800289c:	2103      	movs	r1, #3
 800289e:	4618      	mov	r0, r3
 80028a0:	f000 faeb 	bl	8002e7a <writeChar>
	}

	flags.all = 0;
 80028a4:	2300      	movs	r3, #0
 80028a6:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	7e9b      	ldrb	r3, [r3, #26]
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	b2da      	uxtb	r2, r3
 80028b2:	7d3b      	ldrb	r3, [r7, #20]
 80028b4:	f362 0341 	bfi	r3, r2, #1, #1
 80028b8:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	7edb      	ldrb	r3, [r3, #27]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	bf14      	ite	ne
 80028c2:	2301      	movne	r3, #1
 80028c4:	2300      	moveq	r3, #0
 80028c6:	b2da      	uxtb	r2, r3
 80028c8:	7d3b      	ldrb	r3, [r7, #20]
 80028ca:	f362 0382 	bfi	r3, r2, #2, #1
 80028ce:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 80028d0:	7d3b      	ldrb	r3, [r7, #20]
 80028d2:	f003 0304 	and.w	r3, r3, #4
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d013      	beq.n	8002904 <MQTTSerialize_connect+0x108>
	{
		flags.bits.willQoS = options->will.qos;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028e2:	f003 0303 	and.w	r3, r3, #3
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	7d3b      	ldrb	r3, [r7, #20]
 80028ea:	f362 03c4 	bfi	r3, r2, #3, #2
 80028ee:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	b2da      	uxtb	r2, r3
 80028fc:	7d3b      	ldrb	r3, [r7, #20]
 80028fe:	f362 1345 	bfi	r3, r2, #5, #1
 8002902:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002908:	2b00      	cmp	r3, #0
 800290a:	d103      	bne.n	8002914 <MQTTSerialize_connect+0x118>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002910:	2b00      	cmp	r3, #0
 8002912:	d003      	beq.n	800291c <MQTTSerialize_connect+0x120>
		flags.bits.username = 1;
 8002914:	7d3b      	ldrb	r3, [r7, #20]
 8002916:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800291a:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002920:	2b00      	cmp	r3, #0
 8002922:	d103      	bne.n	800292c <MQTTSerialize_connect+0x130>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002928:	2b00      	cmp	r3, #0
 800292a:	d003      	beq.n	8002934 <MQTTSerialize_connect+0x138>
		flags.bits.password = 1;
 800292c:	7d3b      	ldrb	r3, [r7, #20]
 800292e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002932:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 8002934:	7d3a      	ldrb	r2, [r7, #20]
 8002936:	f107 031c 	add.w	r3, r7, #28
 800293a:	4611      	mov	r1, r2
 800293c:	4618      	mov	r0, r3
 800293e:	f000 fa9c 	bl	8002e7a <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	8b1b      	ldrh	r3, [r3, #24]
 8002946:	461a      	mov	r2, r3
 8002948:	f107 031c 	add.w	r3, r7, #28
 800294c:	4611      	mov	r1, r2
 800294e:	4618      	mov	r0, r3
 8002950:	f000 faa8 	bl	8002ea4 <writeInt>
	writeMQTTString(&ptr, options->clientID);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f107 001c 	add.w	r0, r7, #28
 800295a:	330c      	adds	r3, #12
 800295c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800295e:	f000 fae9 	bl	8002f34 <writeMQTTString>
	if (options->willFlag)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	7edb      	ldrb	r3, [r3, #27]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00d      	beq.n	8002986 <MQTTSerialize_connect+0x18a>
	{
		writeMQTTString(&ptr, options->will.topicName);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f107 001c 	add.w	r0, r7, #28
 8002970:	3324      	adds	r3, #36	@ 0x24
 8002972:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002974:	f000 fade 	bl	8002f34 <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f107 001c 	add.w	r0, r7, #28
 800297e:	3330      	adds	r3, #48	@ 0x30
 8002980:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002982:	f000 fad7 	bl	8002f34 <writeMQTTString>
	}
	if (flags.bits.username)
 8002986:	7d3b      	ldrb	r3, [r7, #20]
 8002988:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b00      	cmp	r3, #0
 8002990:	d006      	beq.n	80029a0 <MQTTSerialize_connect+0x1a4>
		writeMQTTString(&ptr, options->username);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f107 001c 	add.w	r0, r7, #28
 8002998:	3340      	adds	r3, #64	@ 0x40
 800299a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800299c:	f000 faca 	bl	8002f34 <writeMQTTString>
	if (flags.bits.password)
 80029a0:	7d3b      	ldrb	r3, [r7, #20]
 80029a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d006      	beq.n	80029ba <MQTTSerialize_connect+0x1be>
		writeMQTTString(&ptr, options->password);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f107 001c 	add.w	r0, r7, #28
 80029b2:	334c      	adds	r3, #76	@ 0x4c
 80029b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029b6:	f000 fabd 	bl	8002f34 <writeMQTTString>

	rc = ptr - buf;
 80029ba:	69fa      	ldr	r2, [r7, #28]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	627b      	str	r3, [r7, #36]	@ 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
 80029c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3728      	adds	r7, #40	@ 0x28
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	08007ef4 	.word	0x08007ef4
 80029d0:	08007efc 	.word	0x08007efc

080029d4 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b08a      	sub	sp, #40	@ 0x28
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
 80029e0:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 80029e2:	2300      	movs	r3, #0
 80029e4:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 80029ea:	2300      	movs	r3, #0
 80029ec:	623b      	str	r3, [r7, #32]
	int rc = 0;
 80029ee:	2300      	movs	r3, #0
 80029f0:	627b      	str	r3, [r7, #36]	@ 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
 80029f2:	2300      	movs	r3, #0
 80029f4:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 80029f6:	f107 0318 	add.w	r3, r7, #24
 80029fa:	4618      	mov	r0, r3
 80029fc:	f000 fa29 	bl	8002e52 <readChar>
 8002a00:	4603      	mov	r3, r0
 8002a02:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != CONNACK)
 8002a04:	7f3b      	ldrb	r3, [r7, #28]
 8002a06:	f023 030f 	bic.w	r3, r3, #15
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	2b20      	cmp	r3, #32
 8002a0e:	d12e      	bne.n	8002a6e <MQTTDeserialize_connack+0x9a>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	f107 0214 	add.w	r2, r7, #20
 8002a16:	4611      	mov	r1, r2
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f000 f9e9 	bl	8002df0 <MQTTPacket_decodeBuf>
 8002a1e:	6278      	str	r0, [r7, #36]	@ 0x24
 8002a20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	4413      	add	r3, r2
 8002a26:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	697a      	ldr	r2, [r7, #20]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	6a3a      	ldr	r2, [r7, #32]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	dd1b      	ble.n	8002a72 <MQTTDeserialize_connack+0x9e>
		goto exit;

	flags.all = readChar(&curdata);
 8002a3a:	f107 0318 	add.w	r3, r7, #24
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f000 fa07 	bl	8002e52 <readChar>
 8002a44:	4603      	mov	r3, r0
 8002a46:	743b      	strb	r3, [r7, #16]
	*sessionPresent = flags.bits.sessionpresent;
 8002a48:	7c3b      	ldrb	r3, [r7, #16]
 8002a4a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	461a      	mov	r2, r3
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
 8002a56:	f107 0318 	add.w	r3, r7, #24
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f000 f9f9 	bl	8002e52 <readChar>
 8002a60:	4603      	mov	r3, r0
 8002a62:	461a      	mov	r2, r3
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	701a      	strb	r2, [r3, #0]

	rc = 1;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a6c:	e002      	b.n	8002a74 <MQTTDeserialize_connack+0xa0>
		goto exit;
 8002a6e:	bf00      	nop
 8002a70:	e000      	b.n	8002a74 <MQTTDeserialize_connack+0xa0>
		goto exit;
 8002a72:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8002a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3728      	adds	r7, #40	@ 0x28
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b088      	sub	sp, #32
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	60f8      	str	r0, [r7, #12]
 8002a86:	60b9      	str	r1, [r7, #8]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	71fb      	strb	r3, [r7, #7]
	MQTTHeader header = {0};
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	61bb      	str	r3, [r7, #24]
	int rc = -1;
 8002a90:	f04f 33ff 	mov.w	r3, #4294967295
 8002a94:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	dc03      	bgt.n	8002aa8 <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8002aa0:	f06f 0301 	mvn.w	r3, #1
 8002aa4:	61fb      	str	r3, [r7, #28]
		goto exit;
 8002aa6:	e01d      	b.n	8002ae4 <MQTTSerialize_zero+0x66>
	}
	header.byte = 0;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	763b      	strb	r3, [r7, #24]
	header.bits.type = packettype;
 8002aac:	79fb      	ldrb	r3, [r7, #7]
 8002aae:	f003 030f 	and.w	r3, r3, #15
 8002ab2:	b2da      	uxtb	r2, r3
 8002ab4:	7e3b      	ldrb	r3, [r7, #24]
 8002ab6:	f362 1307 	bfi	r3, r2, #4, #4
 8002aba:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 8002abc:	7e3a      	ldrb	r2, [r7, #24]
 8002abe:	f107 0314 	add.w	r3, r7, #20
 8002ac2:	4611      	mov	r1, r2
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f000 f9d8 	bl	8002e7a <writeChar>

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	2100      	movs	r1, #0
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f000 f8d9 	bl	8002c86 <MQTTPacket_encode>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	4413      	add	r3, r2
 8002ada:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
 8002adc:	697a      	ldr	r2, [r7, #20]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8002ae4:	69fb      	ldr	r3, [r7, #28]
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3720      	adds	r7, #32
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b082      	sub	sp, #8
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
 8002af6:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
 8002af8:	220c      	movs	r2, #12
 8002afa:	6839      	ldr	r1, [r7, #0]
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f7ff ffbe 	bl	8002a7e <MQTTSerialize_zero>
 8002b02:	4603      	mov	r3, r0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3708      	adds	r7, #8
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b08a      	sub	sp, #40	@ 0x28
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
 8002b18:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8002b1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b20:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8002b22:	2300      	movs	r3, #0
 8002b24:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8002b26:	2300      	movs	r3, #0
 8002b28:	627b      	str	r3, [r7, #36]	@ 0x24
	int mylen = 0;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8002b2e:	f107 0318 	add.w	r3, r7, #24
 8002b32:	4618      	mov	r0, r3
 8002b34:	f000 f98d 	bl	8002e52 <readChar>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != PUBLISH)
 8002b3c:	7f3b      	ldrb	r3, [r7, #28]
 8002b3e:	f023 030f 	bic.w	r3, r3, #15
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	2b30      	cmp	r3, #48	@ 0x30
 8002b46:	d14b      	bne.n	8002be0 <MQTTDeserialize_publish+0xd4>
		goto exit;
	*dup = header.bits.dup;
 8002b48:	7f3b      	ldrb	r3, [r7, #28]
 8002b4a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	461a      	mov	r2, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
 8002b56:	7f3b      	ldrb	r3, [r7, #28]
 8002b58:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	461a      	mov	r2, r3
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
 8002b64:	7f3b      	ldrb	r3, [r7, #28]
 8002b66:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	f107 0214 	add.w	r2, r7, #20
 8002b78:	4611      	mov	r1, r2
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f000 f938 	bl	8002df0 <MQTTPacket_decodeBuf>
 8002b80:	6278      	str	r0, [r7, #36]	@ 0x24
 8002b82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	4413      	add	r3, r2
 8002b88:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	697a      	ldr	r2, [r7, #20]
 8002b8e:	4413      	add	r3, r2
 8002b90:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 8002b92:	f107 0318 	add.w	r3, r7, #24
 8002b96:	6a3a      	ldr	r2, [r7, #32]
 8002b98:	4619      	mov	r1, r3
 8002b9a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002b9c:	f000 f9f8 	bl	8002f90 <readMQTTLenString>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d01e      	beq.n	8002be4 <MQTTDeserialize_publish+0xd8>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	6a3a      	ldr	r2, [r7, #32]
 8002baa:	1ad3      	subs	r3, r2, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	db19      	blt.n	8002be4 <MQTTDeserialize_publish+0xd8>
		goto exit;

	if (*qos > 0)
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	dd08      	ble.n	8002bca <MQTTDeserialize_publish+0xbe>
		*packetid = readInt(&curdata);
 8002bb8:	f107 0318 	add.w	r3, r7, #24
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f000 f92d 	bl	8002e1c <readInt>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	6a3a      	ldr	r2, [r7, #32]
 8002bce:	1ad2      	subs	r2, r2, r3
 8002bd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bd2:	601a      	str	r2, [r3, #0]
	*payload = curdata;
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bd8:	601a      	str	r2, [r3, #0]
	rc = 1;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bde:	e002      	b.n	8002be6 <MQTTDeserialize_publish+0xda>
		goto exit;
 8002be0:	bf00      	nop
 8002be2:	e000      	b.n	8002be6 <MQTTDeserialize_publish+0xda>
		goto exit;
 8002be4:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8002be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3728      	adds	r7, #40	@ 0x28
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b08a      	sub	sp, #40	@ 0x28
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
 8002bfc:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8002bfe:	2300      	movs	r3, #0
 8002c00:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8002c06:	2300      	movs	r3, #0
 8002c08:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	627b      	str	r3, [r7, #36]	@ 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8002c0e:	f107 0318 	add.w	r3, r7, #24
 8002c12:	4618      	mov	r0, r3
 8002c14:	f000 f91d 	bl	8002e52 <readChar>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	773b      	strb	r3, [r7, #28]
	*dup = header.bits.dup;
 8002c1c:	7f3b      	ldrb	r3, [r7, #28]
 8002c1e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	461a      	mov	r2, r3
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
 8002c2a:	7f3b      	ldrb	r3, [r7, #28]
 8002c2c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	461a      	mov	r2, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	f107 0214 	add.w	r2, r7, #20
 8002c3e:	4611      	mov	r1, r2
 8002c40:	4618      	mov	r0, r3
 8002c42:	f000 f8d5 	bl	8002df0 <MQTTPacket_decodeBuf>
 8002c46:	6278      	str	r0, [r7, #36]	@ 0x24
 8002c48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	697a      	ldr	r2, [r7, #20]
 8002c54:	4413      	add	r3, r2
 8002c56:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	6a3a      	ldr	r2, [r7, #32]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	dd0b      	ble.n	8002c7a <MQTTDeserialize_ack+0x8a>
		goto exit;
	*packetid = readInt(&curdata);
 8002c62:	f107 0318 	add.w	r3, r7, #24
 8002c66:	4618      	mov	r0, r3
 8002c68:	f000 f8d8 	bl	8002e1c <readInt>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	801a      	strh	r2, [r3, #0]

	rc = 1;
 8002c74:	2301      	movs	r3, #1
 8002c76:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c78:	e000      	b.n	8002c7c <MQTTDeserialize_ack+0x8c>
		goto exit;
 8002c7a:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8002c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3728      	adds	r7, #40	@ 0x28
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 8002c86:	b480      	push	{r7}
 8002c88:	b085      	sub	sp, #20
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
 8002c8e:	6039      	str	r1, [r7, #0]
	int rc = 0;
 8002c90:	2300      	movs	r3, #0
 8002c92:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	425a      	negs	r2, r3
 8002c98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c9c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002ca0:	bf58      	it	pl
 8002ca2:	4253      	negpl	r3, r2
 8002ca4:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	da00      	bge.n	8002cae <MQTTPacket_encode+0x28>
 8002cac:	337f      	adds	r3, #127	@ 0x7f
 8002cae:	11db      	asrs	r3, r3, #7
 8002cb0:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	dd03      	ble.n	8002cc0 <MQTTPacket_encode+0x3a>
			d |= 0x80;
 8002cb8:	7afb      	ldrb	r3, [r7, #11]
 8002cba:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002cbe:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	1c5a      	adds	r2, r3, #1
 8002cc4:	60fa      	str	r2, [r7, #12]
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4413      	add	r3, r2
 8002ccc:	7afa      	ldrb	r2, [r7, #11]
 8002cce:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	dcde      	bgt.n	8002c94 <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3714      	adds	r7, #20
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b086      	sub	sp, #24
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	617b      	str	r3, [r7, #20]
	int len = 0;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
 8002cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8002d00:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	3301      	adds	r3, #1
 8002d06:	613b      	str	r3, [r7, #16]
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	2b04      	cmp	r3, #4
 8002d0c:	dd03      	ble.n	8002d16 <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
 8002d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d12:	60fb      	str	r3, [r7, #12]
			goto exit;
 8002d14:	e01d      	b.n	8002d52 <MQTTPacket_decode+0x6e>
		}
		rc = (*getcharfn)(&c, 1);
 8002d16:	f107 020b 	add.w	r2, r7, #11
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2101      	movs	r1, #1
 8002d1e:	4610      	mov	r0, r2
 8002d20:	4798      	blx	r3
 8002d22:	60f8      	str	r0, [r7, #12]
		if (rc != 1)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d112      	bne.n	8002d50 <MQTTPacket_decode+0x6c>
			goto exit;
		*value += (c & 127) * multiplier;
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	7afb      	ldrb	r3, [r7, #11]
 8002d30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d34:	6979      	ldr	r1, [r7, #20]
 8002d36:	fb01 f303 	mul.w	r3, r1, r3
 8002d3a:	441a      	add	r2, r3
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	01db      	lsls	r3, r3, #7
 8002d44:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
 8002d46:	7afb      	ldrb	r3, [r7, #11]
 8002d48:	b25b      	sxtb	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	dbd6      	blt.n	8002cfc <MQTTPacket_decode+0x18>
exit:
 8002d4e:	e000      	b.n	8002d52 <MQTTPacket_decode+0x6e>
			goto exit;
 8002d50:	bf00      	nop
	FUNC_EXIT_RC(len);
	return len;
 8002d52:	693b      	ldr	r3, [r7, #16]
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3718      	adds	r7, #24
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	3301      	adds	r3, #1
 8002d68:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2b7f      	cmp	r3, #127	@ 0x7f
 8002d6e:	dc03      	bgt.n	8002d78 <MQTTPacket_len+0x1c>
		rem_len += 1;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	3301      	adds	r3, #1
 8002d74:	607b      	str	r3, [r7, #4]
 8002d76:	e012      	b.n	8002d9e <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d7e:	da03      	bge.n	8002d88 <MQTTPacket_len+0x2c>
		rem_len += 2;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	3302      	adds	r3, #2
 8002d84:	607b      	str	r3, [r7, #4]
 8002d86:	e00a      	b.n	8002d9e <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4a08      	ldr	r2, [pc, #32]	@ (8002dac <MQTTPacket_len+0x50>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	dc03      	bgt.n	8002d98 <MQTTPacket_len+0x3c>
		rem_len += 3;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	3303      	adds	r3, #3
 8002d94:	607b      	str	r3, [r7, #4]
 8002d96:	e002      	b.n	8002d9e <MQTTPacket_len+0x42>
	else
		rem_len += 4;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	3304      	adds	r3, #4
 8002d9c:	607b      	str	r3, [r7, #4]
	return rem_len;
 8002d9e:	687b      	ldr	r3, [r7, #4]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr
 8002dac:	001ffffe 	.word	0x001ffffe

08002db0 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
 8002dba:	2300      	movs	r3, #0
 8002dbc:	60fb      	str	r3, [r7, #12]
 8002dbe:	e00a      	b.n	8002dd6 <bufchar+0x26>
		*c = *bufptr++;
 8002dc0:	4b0a      	ldr	r3, [pc, #40]	@ (8002dec <bufchar+0x3c>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	1c5a      	adds	r2, r3, #1
 8002dc6:	4909      	ldr	r1, [pc, #36]	@ (8002dec <bufchar+0x3c>)
 8002dc8:	600a      	str	r2, [r1, #0]
 8002dca:	781a      	ldrb	r2, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	60fb      	str	r3, [r7, #12]
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	dbf0      	blt.n	8002dc0 <bufchar+0x10>
	return count;
 8002dde:	683b      	ldr	r3, [r7, #0]
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3714      	adds	r7, #20
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr
 8002dec:	200004fc 	.word	0x200004fc

08002df0 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
	bufptr = buf;
 8002dfa:	4a06      	ldr	r2, [pc, #24]	@ (8002e14 <MQTTPacket_decodeBuf+0x24>)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6013      	str	r3, [r2, #0]
	return MQTTPacket_decode(bufchar, value);
 8002e00:	6839      	ldr	r1, [r7, #0]
 8002e02:	4805      	ldr	r0, [pc, #20]	@ (8002e18 <MQTTPacket_decodeBuf+0x28>)
 8002e04:	f7ff ff6e 	bl	8002ce4 <MQTTPacket_decode>
 8002e08:	4603      	mov	r3, r0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	200004fc 	.word	0x200004fc
 8002e18:	08002db1 	.word	0x08002db1

08002e1c <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	021b      	lsls	r3, r3, #8
 8002e30:	68fa      	ldr	r2, [r7, #12]
 8002e32:	3201      	adds	r2, #1
 8002e34:	7812      	ldrb	r2, [r2, #0]
 8002e36:	4413      	add	r3, r2
 8002e38:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	1c9a      	adds	r2, r3, #2
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	601a      	str	r2, [r3, #0]
	return len;
 8002e44:	68bb      	ldr	r3, [r7, #8]
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3714      	adds	r7, #20
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr

08002e52 <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
 8002e52:	b480      	push	{r7}
 8002e54:	b085      	sub	sp, #20
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
	char c = **pptr;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	73fb      	strb	r3, [r7, #15]
	(*pptr)++;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	1c5a      	adds	r2, r3, #1
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	601a      	str	r2, [r3, #0]
	return c;
 8002e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3714      	adds	r7, #20
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr

08002e7a <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	b083      	sub	sp, #12
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
 8002e82:	460b      	mov	r3, r1
 8002e84:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	78fa      	ldrb	r2, [r7, #3]
 8002e8c:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	1c5a      	adds	r2, r3, #1
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	601a      	str	r2, [r3, #0]
}
 8002e98:	bf00      	nop
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	da00      	bge.n	8002eb6 <writeInt+0x12>
 8002eb4:	33ff      	adds	r3, #255	@ 0xff
 8002eb6:	121b      	asrs	r3, r3, #8
 8002eb8:	461a      	mov	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	b2d2      	uxtb	r2, r2
 8002ec0:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	1c5a      	adds	r2, r3, #1
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	425a      	negs	r2, r3
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	b2d2      	uxtb	r2, r2
 8002ed4:	bf58      	it	pl
 8002ed6:	4253      	negpl	r3, r2
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	6812      	ldr	r2, [r2, #0]
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	1c5a      	adds	r2, r3, #1
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	601a      	str	r2, [r3, #0]
}
 8002eea:	bf00      	nop
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr

08002ef6 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b084      	sub	sp, #16
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
 8002efe:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 8002f00:	6838      	ldr	r0, [r7, #0]
 8002f02:	f7fd f9b5 	bl	8000270 <strlen>
 8002f06:	4603      	mov	r3, r0
 8002f08:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 8002f0a:	68f9      	ldr	r1, [r7, #12]
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f7ff ffc9 	bl	8002ea4 <writeInt>
	memcpy(*pptr, string, len);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	6839      	ldr	r1, [r7, #0]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f002 fc09 	bl	8005732 <memcpy>
	*pptr += len;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	441a      	add	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	601a      	str	r2, [r3, #0]
}
 8002f2c:	bf00      	nop
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	4638      	mov	r0, r7
 8002f3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	dd12      	ble.n	8002f6e <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	68f8      	ldr	r0, [r7, #12]
 8002f4e:	f7ff ffa9 	bl	8002ea4 <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68b9      	ldr	r1, [r7, #8]
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f002 fbe9 	bl	8005732 <memcpy>
		*pptr += mqttstring.lenstring.len;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	441a      	add	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 8002f6c:	e00c      	b.n	8002f88 <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d005      	beq.n	8002f80 <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	4619      	mov	r1, r3
 8002f78:	68f8      	ldr	r0, [r7, #12]
 8002f7a:	f7ff ffbc 	bl	8002ef6 <writeCString>
}
 8002f7e:	e003      	b.n	8002f88 <writeMQTTString+0x54>
		writeInt(pptr, 0);
 8002f80:	2100      	movs	r1, #0
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f7ff ff8e 	bl	8002ea4 <writeInt>
}
 8002f88:	bf00      	nop
 8002f8a:	3710      	adds	r7, #16
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b086      	sub	sp, #24
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	607a      	str	r2, [r7, #4]
	int rc = 0;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	dd1a      	ble.n	8002fe2 <readMQTTLenString+0x52>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 8002fac:	68b8      	ldr	r0, [r7, #8]
 8002fae:	f7ff ff35 	bl	8002e1c <readInt>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	68fa      	ldr	r2, [r7, #12]
 8002fbe:	6852      	ldr	r2, [r2, #4]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d30c      	bcc.n	8002fe2 <readMQTTLenString+0x52>
		{
			mqttstring->lenstring.data = (char*)*pptr;
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	6852      	ldr	r2, [r2, #4]
 8002fd8:	441a      	add	r2, r3
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	601a      	str	r2, [r3, #0]
			rc = 1;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
 8002fe8:	697b      	ldr	r3, [r7, #20]
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3718      	adds	r7, #24
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b086      	sub	sp, #24
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	1d3b      	adds	r3, r7, #4
 8002ffa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 8002ffe:	2300      	movs	r3, #0
 8003000:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d006      	beq.n	8003016 <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4618      	mov	r0, r3
 800300c:	f7fd f930 	bl	8000270 <strlen>
 8003010:	4603      	mov	r3, r0
 8003012:	617b      	str	r3, [r7, #20]
 8003014:	e001      	b.n	800301a <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	617b      	str	r3, [r7, #20]
	return rc;
 800301a:	697b      	ldr	r3, [r7, #20]
}
 800301c:	4618      	mov	r0, r3
 800301e:	3718      	adds	r7, #24
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b086      	sub	sp, #24
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
	int alen = 0,
 800302e:	2300      	movs	r3, #0
 8003030:	617b      	str	r3, [r7, #20]
		blen = 0;
 8003032:	2300      	movs	r3, #0
 8003034:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d00a      	beq.n	8003054 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4618      	mov	r0, r3
 800304a:	f7fd f911 	bl	8000270 <strlen>
 800304e:	4603      	mov	r3, r0
 8003050:	617b      	str	r3, [r7, #20]
 8003052:	e005      	b.n	8003060 <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
 8003060:	6838      	ldr	r0, [r7, #0]
 8003062:	f7fd f905 	bl	8000270 <strlen>
 8003066:	4603      	mov	r3, r0
 8003068:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
 800306a:	697a      	ldr	r2, [r7, #20]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	429a      	cmp	r2, r3
 8003070:	d10a      	bne.n	8003088 <MQTTPacket_equals+0x64>
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	461a      	mov	r2, r3
 8003076:	6839      	ldr	r1, [r7, #0]
 8003078:	6938      	ldr	r0, [r7, #16]
 800307a:	f002 faba 	bl	80055f2 <strncmp>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d101      	bne.n	8003088 <MQTTPacket_equals+0x64>
 8003084:	2301      	movs	r3, #1
 8003086:	e000      	b.n	800308a <MQTTPacket_equals+0x66>
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3718      	adds	r7, #24
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b086      	sub	sp, #24
 8003096:	af00      	add	r7, sp, #0
 8003098:	60f8      	str	r0, [r7, #12]
 800309a:	4638      	mov	r0, r7
 800309c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int len = 0;
 80030a0:	2300      	movs	r3, #0
 80030a2:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
 80030a4:	463b      	mov	r3, r7
 80030a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80030aa:	f7ff ffa2 	bl	8002ff2 <MQTTstrlen>
 80030ae:	4603      	mov	r3, r0
 80030b0:	1c9a      	adds	r2, r3, #2
 80030b2:	6a3b      	ldr	r3, [r7, #32]
 80030b4:	4413      	add	r3, r2
 80030b6:	697a      	ldr	r2, [r7, #20]
 80030b8:	4413      	add	r3, r2
 80030ba:	617b      	str	r3, [r7, #20]
	if (qos > 0)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	dd02      	ble.n	80030c8 <MQTTSerialize_publishLength+0x36>
		len += 2; /* packetid */
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	3302      	adds	r3, #2
 80030c6:	617b      	str	r3, [r7, #20]
	return len;
 80030c8:	697b      	ldr	r3, [r7, #20]
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3718      	adds	r7, #24
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b08a      	sub	sp, #40	@ 0x28
 80030d6:	af02      	add	r7, sp, #8
 80030d8:	60f8      	str	r0, [r7, #12]
 80030da:	60b9      	str	r1, [r7, #8]
 80030dc:	603b      	str	r3, [r7, #0]
 80030de:	4613      	mov	r3, r2
 80030e0:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = buf;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
 80030e6:	2300      	movs	r3, #0
 80030e8:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
 80030ea:	2300      	movs	r3, #0
 80030ec:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 80030ee:	2300      	movs	r3, #0
 80030f0:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 80030f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030f4:	9300      	str	r3, [sp, #0]
 80030f6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80030fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030fc:	6838      	ldr	r0, [r7, #0]
 80030fe:	f7ff ffc8 	bl	8003092 <MQTTSerialize_publishLength>
 8003102:	61b8      	str	r0, [r7, #24]
 8003104:	69b8      	ldr	r0, [r7, #24]
 8003106:	f7ff fe29 	bl	8002d5c <MQTTPacket_len>
 800310a:	4602      	mov	r2, r0
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	4293      	cmp	r3, r2
 8003110:	da03      	bge.n	800311a <MQTTSerialize_publish+0x48>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8003112:	f06f 0301 	mvn.w	r3, #1
 8003116:	61fb      	str	r3, [r7, #28]
		goto exit;
 8003118:	e04c      	b.n	80031b4 <MQTTSerialize_publish+0xe2>
	}

	header.bits.type = PUBLISH;
 800311a:	7c3b      	ldrb	r3, [r7, #16]
 800311c:	2203      	movs	r2, #3
 800311e:	f362 1307 	bfi	r3, r2, #4, #4
 8003122:	743b      	strb	r3, [r7, #16]
	header.bits.dup = dup;
 8003124:	79fb      	ldrb	r3, [r7, #7]
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	b2da      	uxtb	r2, r3
 800312c:	7c3b      	ldrb	r3, [r7, #16]
 800312e:	f362 03c3 	bfi	r3, r2, #3, #1
 8003132:	743b      	strb	r3, [r7, #16]
	header.bits.qos = qos;
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	f003 0303 	and.w	r3, r3, #3
 800313a:	b2da      	uxtb	r2, r3
 800313c:	7c3b      	ldrb	r3, [r7, #16]
 800313e:	f362 0342 	bfi	r3, r2, #1, #2
 8003142:	743b      	strb	r3, [r7, #16]
	header.bits.retain = retained;
 8003144:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003148:	f003 0301 	and.w	r3, r3, #1
 800314c:	b2da      	uxtb	r2, r3
 800314e:	7c3b      	ldrb	r3, [r7, #16]
 8003150:	f362 0300 	bfi	r3, r2, #0, #1
 8003154:	743b      	strb	r3, [r7, #16]
	writeChar(&ptr, header.byte); /* write header */
 8003156:	7c3a      	ldrb	r2, [r7, #16]
 8003158:	f107 0314 	add.w	r3, r7, #20
 800315c:	4611      	mov	r1, r2
 800315e:	4618      	mov	r0, r3
 8003160:	f7ff fe8b 	bl	8002e7a <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	69b9      	ldr	r1, [r7, #24]
 8003168:	4618      	mov	r0, r3
 800316a:	f7ff fd8c 	bl	8002c86 <MQTTPacket_encode>
 800316e:	4602      	mov	r2, r0
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	4413      	add	r3, r2
 8003174:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
 8003176:	f107 0014 	add.w	r0, r7, #20
 800317a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800317e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003180:	f7ff fed8 	bl	8002f34 <writeMQTTString>

	if (qos > 0)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	2b00      	cmp	r3, #0
 8003188:	dd06      	ble.n	8003198 <MQTTSerialize_publish+0xc6>
		writeInt(&ptr, packetid);
 800318a:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800318c:	f107 0314 	add.w	r3, r7, #20
 8003190:	4611      	mov	r1, r2
 8003192:	4618      	mov	r0, r3
 8003194:	f7ff fe86 	bl	8002ea4 <writeInt>

	memcpy(ptr, payload, payloadlen);
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800319c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800319e:	4618      	mov	r0, r3
 80031a0:	f002 fac7 	bl	8005732 <memcpy>
	ptr += payloadlen;
 80031a4:	697a      	ldr	r2, [r7, #20]
 80031a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031a8:	4413      	add	r3, r2
 80031aa:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
 80031ac:	697a      	ldr	r2, [r7, #20]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
 80031b4:	69fb      	ldr	r3, [r7, #28]
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3720      	adds	r7, #32
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	b088      	sub	sp, #32
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	60f8      	str	r0, [r7, #12]
 80031c6:	60b9      	str	r1, [r7, #8]
 80031c8:	4611      	mov	r1, r2
 80031ca:	461a      	mov	r2, r3
 80031cc:	460b      	mov	r3, r1
 80031ce:	71fb      	strb	r3, [r7, #7]
 80031d0:	4613      	mov	r3, r2
 80031d2:	71bb      	strb	r3, [r7, #6]
	MQTTHeader header = {0};
 80031d4:	2300      	movs	r3, #0
 80031d6:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 80031d8:	2300      	movs	r3, #0
 80031da:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	2b03      	cmp	r3, #3
 80031e4:	dc03      	bgt.n	80031ee <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 80031e6:	f06f 0301 	mvn.w	r3, #1
 80031ea:	61fb      	str	r3, [r7, #28]
		goto exit;
 80031ec:	e037      	b.n	800325e <MQTTSerialize_ack+0xa0>
	}
	header.bits.type = packettype;
 80031ee:	79fb      	ldrb	r3, [r7, #7]
 80031f0:	f003 030f 	and.w	r3, r3, #15
 80031f4:	b2da      	uxtb	r2, r3
 80031f6:	7e3b      	ldrb	r3, [r7, #24]
 80031f8:	f362 1307 	bfi	r3, r2, #4, #4
 80031fc:	763b      	strb	r3, [r7, #24]
	header.bits.dup = dup;
 80031fe:	79bb      	ldrb	r3, [r7, #6]
 8003200:	f003 0301 	and.w	r3, r3, #1
 8003204:	b2da      	uxtb	r2, r3
 8003206:	7e3b      	ldrb	r3, [r7, #24]
 8003208:	f362 03c3 	bfi	r3, r2, #3, #1
 800320c:	763b      	strb	r3, [r7, #24]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
 800320e:	79fb      	ldrb	r3, [r7, #7]
 8003210:	2b06      	cmp	r3, #6
 8003212:	bf0c      	ite	eq
 8003214:	2301      	moveq	r3, #1
 8003216:	2300      	movne	r3, #0
 8003218:	b2db      	uxtb	r3, r3
 800321a:	f003 0303 	and.w	r3, r3, #3
 800321e:	b2da      	uxtb	r2, r3
 8003220:	7e3b      	ldrb	r3, [r7, #24]
 8003222:	f362 0342 	bfi	r3, r2, #1, #2
 8003226:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 8003228:	7e3a      	ldrb	r2, [r7, #24]
 800322a:	f107 0314 	add.w	r3, r7, #20
 800322e:	4611      	mov	r1, r2
 8003230:	4618      	mov	r0, r3
 8003232:	f7ff fe22 	bl	8002e7a <writeChar>

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	2102      	movs	r1, #2
 800323a:	4618      	mov	r0, r3
 800323c:	f7ff fd23 	bl	8002c86 <MQTTPacket_encode>
 8003240:	4602      	mov	r2, r0
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	4413      	add	r3, r2
 8003246:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
 8003248:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800324a:	f107 0314 	add.w	r3, r7, #20
 800324e:	4611      	mov	r1, r2
 8003250:	4618      	mov	r0, r3
 8003252:	f7ff fe27 	bl	8002ea4 <writeInt>
	rc = ptr - buf;
 8003256:	697a      	ldr	r2, [r7, #20]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800325e:	69fb      	ldr	r3, [r7, #28]
}
 8003260:	4618      	mov	r0, r3
 8003262:	3720      	adds	r7, #32
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}

08003268 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800326c:	4b0e      	ldr	r3, [pc, #56]	@ (80032a8 <HAL_Init+0x40>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a0d      	ldr	r2, [pc, #52]	@ (80032a8 <HAL_Init+0x40>)
 8003272:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003276:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003278:	4b0b      	ldr	r3, [pc, #44]	@ (80032a8 <HAL_Init+0x40>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a0a      	ldr	r2, [pc, #40]	@ (80032a8 <HAL_Init+0x40>)
 800327e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003282:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003284:	4b08      	ldr	r3, [pc, #32]	@ (80032a8 <HAL_Init+0x40>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a07      	ldr	r2, [pc, #28]	@ (80032a8 <HAL_Init+0x40>)
 800328a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800328e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003290:	2003      	movs	r0, #3
 8003292:	f000 f931 	bl	80034f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003296:	200f      	movs	r0, #15
 8003298:	f000 f808 	bl	80032ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800329c:	f7fe f82a 	bl	80012f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	40023c00 	.word	0x40023c00

080032ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032b4:	4b12      	ldr	r3, [pc, #72]	@ (8003300 <HAL_InitTick+0x54>)
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	4b12      	ldr	r3, [pc, #72]	@ (8003304 <HAL_InitTick+0x58>)
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	4619      	mov	r1, r3
 80032be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80032c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80032c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ca:	4618      	mov	r0, r3
 80032cc:	f000 f93b 	bl	8003546 <HAL_SYSTICK_Config>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e00e      	b.n	80032f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2b0f      	cmp	r3, #15
 80032de:	d80a      	bhi.n	80032f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032e0:	2200      	movs	r2, #0
 80032e2:	6879      	ldr	r1, [r7, #4]
 80032e4:	f04f 30ff 	mov.w	r0, #4294967295
 80032e8:	f000 f911 	bl	800350e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032ec:	4a06      	ldr	r2, [pc, #24]	@ (8003308 <HAL_InitTick+0x5c>)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032f2:	2300      	movs	r3, #0
 80032f4:	e000      	b.n	80032f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3708      	adds	r7, #8
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	20000000 	.word	0x20000000
 8003304:	20000008 	.word	0x20000008
 8003308:	20000004 	.word	0x20000004

0800330c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003310:	4b06      	ldr	r3, [pc, #24]	@ (800332c <HAL_IncTick+0x20>)
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	461a      	mov	r2, r3
 8003316:	4b06      	ldr	r3, [pc, #24]	@ (8003330 <HAL_IncTick+0x24>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4413      	add	r3, r2
 800331c:	4a04      	ldr	r2, [pc, #16]	@ (8003330 <HAL_IncTick+0x24>)
 800331e:	6013      	str	r3, [r2, #0]
}
 8003320:	bf00      	nop
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	20000008 	.word	0x20000008
 8003330:	20000500 	.word	0x20000500

08003334 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003334:	b480      	push	{r7}
 8003336:	af00      	add	r7, sp, #0
  return uwTick;
 8003338:	4b03      	ldr	r3, [pc, #12]	@ (8003348 <HAL_GetTick+0x14>)
 800333a:	681b      	ldr	r3, [r3, #0]
}
 800333c:	4618      	mov	r0, r3
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	20000500 	.word	0x20000500

0800334c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003354:	f7ff ffee 	bl	8003334 <HAL_GetTick>
 8003358:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003364:	d005      	beq.n	8003372 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003366:	4b0a      	ldr	r3, [pc, #40]	@ (8003390 <HAL_Delay+0x44>)
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	461a      	mov	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	4413      	add	r3, r2
 8003370:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003372:	bf00      	nop
 8003374:	f7ff ffde 	bl	8003334 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	429a      	cmp	r2, r3
 8003382:	d8f7      	bhi.n	8003374 <HAL_Delay+0x28>
  {
  }
}
 8003384:	bf00      	nop
 8003386:	bf00      	nop
 8003388:	3710      	adds	r7, #16
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	20000008 	.word	0x20000008

08003394 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003394:	b480      	push	{r7}
 8003396:	b085      	sub	sp, #20
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f003 0307 	and.w	r3, r3, #7
 80033a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033a4:	4b0c      	ldr	r3, [pc, #48]	@ (80033d8 <__NVIC_SetPriorityGrouping+0x44>)
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033aa:	68ba      	ldr	r2, [r7, #8]
 80033ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80033b0:	4013      	ands	r3, r2
 80033b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80033c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033c6:	4a04      	ldr	r2, [pc, #16]	@ (80033d8 <__NVIC_SetPriorityGrouping+0x44>)
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	60d3      	str	r3, [r2, #12]
}
 80033cc:	bf00      	nop
 80033ce:	3714      	adds	r7, #20
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr
 80033d8:	e000ed00 	.word	0xe000ed00

080033dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033dc:	b480      	push	{r7}
 80033de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033e0:	4b04      	ldr	r3, [pc, #16]	@ (80033f4 <__NVIC_GetPriorityGrouping+0x18>)
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	0a1b      	lsrs	r3, r3, #8
 80033e6:	f003 0307 	and.w	r3, r3, #7
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr
 80033f4:	e000ed00 	.word	0xe000ed00

080033f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	4603      	mov	r3, r0
 8003400:	6039      	str	r1, [r7, #0]
 8003402:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003408:	2b00      	cmp	r3, #0
 800340a:	db0a      	blt.n	8003422 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	b2da      	uxtb	r2, r3
 8003410:	490c      	ldr	r1, [pc, #48]	@ (8003444 <__NVIC_SetPriority+0x4c>)
 8003412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003416:	0112      	lsls	r2, r2, #4
 8003418:	b2d2      	uxtb	r2, r2
 800341a:	440b      	add	r3, r1
 800341c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003420:	e00a      	b.n	8003438 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	b2da      	uxtb	r2, r3
 8003426:	4908      	ldr	r1, [pc, #32]	@ (8003448 <__NVIC_SetPriority+0x50>)
 8003428:	79fb      	ldrb	r3, [r7, #7]
 800342a:	f003 030f 	and.w	r3, r3, #15
 800342e:	3b04      	subs	r3, #4
 8003430:	0112      	lsls	r2, r2, #4
 8003432:	b2d2      	uxtb	r2, r2
 8003434:	440b      	add	r3, r1
 8003436:	761a      	strb	r2, [r3, #24]
}
 8003438:	bf00      	nop
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr
 8003444:	e000e100 	.word	0xe000e100
 8003448:	e000ed00 	.word	0xe000ed00

0800344c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800344c:	b480      	push	{r7}
 800344e:	b089      	sub	sp, #36	@ 0x24
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f003 0307 	and.w	r3, r3, #7
 800345e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	f1c3 0307 	rsb	r3, r3, #7
 8003466:	2b04      	cmp	r3, #4
 8003468:	bf28      	it	cs
 800346a:	2304      	movcs	r3, #4
 800346c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	3304      	adds	r3, #4
 8003472:	2b06      	cmp	r3, #6
 8003474:	d902      	bls.n	800347c <NVIC_EncodePriority+0x30>
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	3b03      	subs	r3, #3
 800347a:	e000      	b.n	800347e <NVIC_EncodePriority+0x32>
 800347c:	2300      	movs	r3, #0
 800347e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003480:	f04f 32ff 	mov.w	r2, #4294967295
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	fa02 f303 	lsl.w	r3, r2, r3
 800348a:	43da      	mvns	r2, r3
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	401a      	ands	r2, r3
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003494:	f04f 31ff 	mov.w	r1, #4294967295
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	fa01 f303 	lsl.w	r3, r1, r3
 800349e:	43d9      	mvns	r1, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034a4:	4313      	orrs	r3, r2
         );
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3724      	adds	r7, #36	@ 0x24
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
	...

080034b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	3b01      	subs	r3, #1
 80034c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80034c4:	d301      	bcc.n	80034ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034c6:	2301      	movs	r3, #1
 80034c8:	e00f      	b.n	80034ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034ca:	4a0a      	ldr	r2, [pc, #40]	@ (80034f4 <SysTick_Config+0x40>)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	3b01      	subs	r3, #1
 80034d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034d2:	210f      	movs	r1, #15
 80034d4:	f04f 30ff 	mov.w	r0, #4294967295
 80034d8:	f7ff ff8e 	bl	80033f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034dc:	4b05      	ldr	r3, [pc, #20]	@ (80034f4 <SysTick_Config+0x40>)
 80034de:	2200      	movs	r2, #0
 80034e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034e2:	4b04      	ldr	r3, [pc, #16]	@ (80034f4 <SysTick_Config+0x40>)
 80034e4:	2207      	movs	r2, #7
 80034e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	e000e010 	.word	0xe000e010

080034f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f7ff ff47 	bl	8003394 <__NVIC_SetPriorityGrouping>
}
 8003506:	bf00      	nop
 8003508:	3708      	adds	r7, #8
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800350e:	b580      	push	{r7, lr}
 8003510:	b086      	sub	sp, #24
 8003512:	af00      	add	r7, sp, #0
 8003514:	4603      	mov	r3, r0
 8003516:	60b9      	str	r1, [r7, #8]
 8003518:	607a      	str	r2, [r7, #4]
 800351a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800351c:	2300      	movs	r3, #0
 800351e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003520:	f7ff ff5c 	bl	80033dc <__NVIC_GetPriorityGrouping>
 8003524:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	68b9      	ldr	r1, [r7, #8]
 800352a:	6978      	ldr	r0, [r7, #20]
 800352c:	f7ff ff8e 	bl	800344c <NVIC_EncodePriority>
 8003530:	4602      	mov	r2, r0
 8003532:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003536:	4611      	mov	r1, r2
 8003538:	4618      	mov	r0, r3
 800353a:	f7ff ff5d 	bl	80033f8 <__NVIC_SetPriority>
}
 800353e:	bf00      	nop
 8003540:	3718      	adds	r7, #24
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003546:	b580      	push	{r7, lr}
 8003548:	b082      	sub	sp, #8
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f7ff ffb0 	bl	80034b4 <SysTick_Config>
 8003554:	4603      	mov	r3, r0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
	...

08003560 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003560:	b480      	push	{r7}
 8003562:	b089      	sub	sp, #36	@ 0x24
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800356a:	2300      	movs	r3, #0
 800356c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800356e:	2300      	movs	r3, #0
 8003570:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003572:	2300      	movs	r3, #0
 8003574:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003576:	2300      	movs	r3, #0
 8003578:	61fb      	str	r3, [r7, #28]
 800357a:	e16b      	b.n	8003854 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800357c:	2201      	movs	r2, #1
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	fa02 f303 	lsl.w	r3, r2, r3
 8003584:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	697a      	ldr	r2, [r7, #20]
 800358c:	4013      	ands	r3, r2
 800358e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003590:	693a      	ldr	r2, [r7, #16]
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	429a      	cmp	r2, r3
 8003596:	f040 815a 	bne.w	800384e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f003 0303 	and.w	r3, r3, #3
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d005      	beq.n	80035b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d130      	bne.n	8003614 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	005b      	lsls	r3, r3, #1
 80035bc:	2203      	movs	r2, #3
 80035be:	fa02 f303 	lsl.w	r3, r2, r3
 80035c2:	43db      	mvns	r3, r3
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	4013      	ands	r3, r2
 80035c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	68da      	ldr	r2, [r3, #12]
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	005b      	lsls	r3, r3, #1
 80035d2:	fa02 f303 	lsl.w	r3, r2, r3
 80035d6:	69ba      	ldr	r2, [r7, #24]
 80035d8:	4313      	orrs	r3, r2
 80035da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	69ba      	ldr	r2, [r7, #24]
 80035e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035e8:	2201      	movs	r2, #1
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	fa02 f303 	lsl.w	r3, r2, r3
 80035f0:	43db      	mvns	r3, r3
 80035f2:	69ba      	ldr	r2, [r7, #24]
 80035f4:	4013      	ands	r3, r2
 80035f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	091b      	lsrs	r3, r3, #4
 80035fe:	f003 0201 	and.w	r2, r3, #1
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	fa02 f303 	lsl.w	r3, r2, r3
 8003608:	69ba      	ldr	r2, [r7, #24]
 800360a:	4313      	orrs	r3, r2
 800360c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f003 0303 	and.w	r3, r3, #3
 800361c:	2b03      	cmp	r3, #3
 800361e:	d017      	beq.n	8003650 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	005b      	lsls	r3, r3, #1
 800362a:	2203      	movs	r2, #3
 800362c:	fa02 f303 	lsl.w	r3, r2, r3
 8003630:	43db      	mvns	r3, r3
 8003632:	69ba      	ldr	r2, [r7, #24]
 8003634:	4013      	ands	r3, r2
 8003636:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	689a      	ldr	r2, [r3, #8]
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	005b      	lsls	r3, r3, #1
 8003640:	fa02 f303 	lsl.w	r3, r2, r3
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	4313      	orrs	r3, r2
 8003648:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f003 0303 	and.w	r3, r3, #3
 8003658:	2b02      	cmp	r3, #2
 800365a:	d123      	bne.n	80036a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	08da      	lsrs	r2, r3, #3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	3208      	adds	r2, #8
 8003664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003668:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	f003 0307 	and.w	r3, r3, #7
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	220f      	movs	r2, #15
 8003674:	fa02 f303 	lsl.w	r3, r2, r3
 8003678:	43db      	mvns	r3, r3
 800367a:	69ba      	ldr	r2, [r7, #24]
 800367c:	4013      	ands	r3, r2
 800367e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	691a      	ldr	r2, [r3, #16]
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	f003 0307 	and.w	r3, r3, #7
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	fa02 f303 	lsl.w	r3, r2, r3
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	4313      	orrs	r3, r2
 8003694:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	08da      	lsrs	r2, r3, #3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	3208      	adds	r2, #8
 800369e:	69b9      	ldr	r1, [r7, #24]
 80036a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	005b      	lsls	r3, r3, #1
 80036ae:	2203      	movs	r2, #3
 80036b0:	fa02 f303 	lsl.w	r3, r2, r3
 80036b4:	43db      	mvns	r3, r3
 80036b6:	69ba      	ldr	r2, [r7, #24]
 80036b8:	4013      	ands	r3, r2
 80036ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f003 0203 	and.w	r2, r3, #3
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	005b      	lsls	r3, r3, #1
 80036c8:	fa02 f303 	lsl.w	r3, r2, r3
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	69ba      	ldr	r2, [r7, #24]
 80036d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	f000 80b4 	beq.w	800384e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036e6:	2300      	movs	r3, #0
 80036e8:	60fb      	str	r3, [r7, #12]
 80036ea:	4b60      	ldr	r3, [pc, #384]	@ (800386c <HAL_GPIO_Init+0x30c>)
 80036ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ee:	4a5f      	ldr	r2, [pc, #380]	@ (800386c <HAL_GPIO_Init+0x30c>)
 80036f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80036f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80036f6:	4b5d      	ldr	r3, [pc, #372]	@ (800386c <HAL_GPIO_Init+0x30c>)
 80036f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036fe:	60fb      	str	r3, [r7, #12]
 8003700:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003702:	4a5b      	ldr	r2, [pc, #364]	@ (8003870 <HAL_GPIO_Init+0x310>)
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	089b      	lsrs	r3, r3, #2
 8003708:	3302      	adds	r3, #2
 800370a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800370e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	f003 0303 	and.w	r3, r3, #3
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	220f      	movs	r2, #15
 800371a:	fa02 f303 	lsl.w	r3, r2, r3
 800371e:	43db      	mvns	r3, r3
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	4013      	ands	r3, r2
 8003724:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a52      	ldr	r2, [pc, #328]	@ (8003874 <HAL_GPIO_Init+0x314>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d02b      	beq.n	8003786 <HAL_GPIO_Init+0x226>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a51      	ldr	r2, [pc, #324]	@ (8003878 <HAL_GPIO_Init+0x318>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d025      	beq.n	8003782 <HAL_GPIO_Init+0x222>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a50      	ldr	r2, [pc, #320]	@ (800387c <HAL_GPIO_Init+0x31c>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d01f      	beq.n	800377e <HAL_GPIO_Init+0x21e>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a4f      	ldr	r2, [pc, #316]	@ (8003880 <HAL_GPIO_Init+0x320>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d019      	beq.n	800377a <HAL_GPIO_Init+0x21a>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a4e      	ldr	r2, [pc, #312]	@ (8003884 <HAL_GPIO_Init+0x324>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d013      	beq.n	8003776 <HAL_GPIO_Init+0x216>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a4d      	ldr	r2, [pc, #308]	@ (8003888 <HAL_GPIO_Init+0x328>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d00d      	beq.n	8003772 <HAL_GPIO_Init+0x212>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a4c      	ldr	r2, [pc, #304]	@ (800388c <HAL_GPIO_Init+0x32c>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d007      	beq.n	800376e <HAL_GPIO_Init+0x20e>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a4b      	ldr	r2, [pc, #300]	@ (8003890 <HAL_GPIO_Init+0x330>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d101      	bne.n	800376a <HAL_GPIO_Init+0x20a>
 8003766:	2307      	movs	r3, #7
 8003768:	e00e      	b.n	8003788 <HAL_GPIO_Init+0x228>
 800376a:	2308      	movs	r3, #8
 800376c:	e00c      	b.n	8003788 <HAL_GPIO_Init+0x228>
 800376e:	2306      	movs	r3, #6
 8003770:	e00a      	b.n	8003788 <HAL_GPIO_Init+0x228>
 8003772:	2305      	movs	r3, #5
 8003774:	e008      	b.n	8003788 <HAL_GPIO_Init+0x228>
 8003776:	2304      	movs	r3, #4
 8003778:	e006      	b.n	8003788 <HAL_GPIO_Init+0x228>
 800377a:	2303      	movs	r3, #3
 800377c:	e004      	b.n	8003788 <HAL_GPIO_Init+0x228>
 800377e:	2302      	movs	r3, #2
 8003780:	e002      	b.n	8003788 <HAL_GPIO_Init+0x228>
 8003782:	2301      	movs	r3, #1
 8003784:	e000      	b.n	8003788 <HAL_GPIO_Init+0x228>
 8003786:	2300      	movs	r3, #0
 8003788:	69fa      	ldr	r2, [r7, #28]
 800378a:	f002 0203 	and.w	r2, r2, #3
 800378e:	0092      	lsls	r2, r2, #2
 8003790:	4093      	lsls	r3, r2
 8003792:	69ba      	ldr	r2, [r7, #24]
 8003794:	4313      	orrs	r3, r2
 8003796:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003798:	4935      	ldr	r1, [pc, #212]	@ (8003870 <HAL_GPIO_Init+0x310>)
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	089b      	lsrs	r3, r3, #2
 800379e:	3302      	adds	r3, #2
 80037a0:	69ba      	ldr	r2, [r7, #24]
 80037a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037a6:	4b3b      	ldr	r3, [pc, #236]	@ (8003894 <HAL_GPIO_Init+0x334>)
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	43db      	mvns	r3, r3
 80037b0:	69ba      	ldr	r2, [r7, #24]
 80037b2:	4013      	ands	r3, r2
 80037b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d003      	beq.n	80037ca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80037c2:	69ba      	ldr	r2, [r7, #24]
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80037ca:	4a32      	ldr	r2, [pc, #200]	@ (8003894 <HAL_GPIO_Init+0x334>)
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037d0:	4b30      	ldr	r3, [pc, #192]	@ (8003894 <HAL_GPIO_Init+0x334>)
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	43db      	mvns	r3, r3
 80037da:	69ba      	ldr	r2, [r7, #24]
 80037dc:	4013      	ands	r3, r2
 80037de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d003      	beq.n	80037f4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80037ec:	69ba      	ldr	r2, [r7, #24]
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80037f4:	4a27      	ldr	r2, [pc, #156]	@ (8003894 <HAL_GPIO_Init+0x334>)
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80037fa:	4b26      	ldr	r3, [pc, #152]	@ (8003894 <HAL_GPIO_Init+0x334>)
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	43db      	mvns	r3, r3
 8003804:	69ba      	ldr	r2, [r7, #24]
 8003806:	4013      	ands	r3, r2
 8003808:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d003      	beq.n	800381e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003816:	69ba      	ldr	r2, [r7, #24]
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	4313      	orrs	r3, r2
 800381c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800381e:	4a1d      	ldr	r2, [pc, #116]	@ (8003894 <HAL_GPIO_Init+0x334>)
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003824:	4b1b      	ldr	r3, [pc, #108]	@ (8003894 <HAL_GPIO_Init+0x334>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	43db      	mvns	r3, r3
 800382e:	69ba      	ldr	r2, [r7, #24]
 8003830:	4013      	ands	r3, r2
 8003832:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d003      	beq.n	8003848 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	4313      	orrs	r3, r2
 8003846:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003848:	4a12      	ldr	r2, [pc, #72]	@ (8003894 <HAL_GPIO_Init+0x334>)
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	3301      	adds	r3, #1
 8003852:	61fb      	str	r3, [r7, #28]
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	2b0f      	cmp	r3, #15
 8003858:	f67f ae90 	bls.w	800357c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800385c:	bf00      	nop
 800385e:	bf00      	nop
 8003860:	3724      	adds	r7, #36	@ 0x24
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	40023800 	.word	0x40023800
 8003870:	40013800 	.word	0x40013800
 8003874:	40020000 	.word	0x40020000
 8003878:	40020400 	.word	0x40020400
 800387c:	40020800 	.word	0x40020800
 8003880:	40020c00 	.word	0x40020c00
 8003884:	40021000 	.word	0x40021000
 8003888:	40021400 	.word	0x40021400
 800388c:	40021800 	.word	0x40021800
 8003890:	40021c00 	.word	0x40021c00
 8003894:	40013c00 	.word	0x40013c00

08003898 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	460b      	mov	r3, r1
 80038a2:	807b      	strh	r3, [r7, #2]
 80038a4:	4613      	mov	r3, r2
 80038a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038a8:	787b      	ldrb	r3, [r7, #1]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d003      	beq.n	80038b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038ae:	887a      	ldrh	r2, [r7, #2]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80038b4:	e003      	b.n	80038be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80038b6:	887b      	ldrh	r3, [r7, #2]
 80038b8:	041a      	lsls	r2, r3, #16
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	619a      	str	r2, [r3, #24]
}
 80038be:	bf00      	nop
 80038c0:	370c      	adds	r7, #12
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
	...

080038cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d101      	bne.n	80038de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e267      	b.n	8003dae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d075      	beq.n	80039d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80038ea:	4b88      	ldr	r3, [pc, #544]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f003 030c 	and.w	r3, r3, #12
 80038f2:	2b04      	cmp	r3, #4
 80038f4:	d00c      	beq.n	8003910 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038f6:	4b85      	ldr	r3, [pc, #532]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80038fe:	2b08      	cmp	r3, #8
 8003900:	d112      	bne.n	8003928 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003902:	4b82      	ldr	r3, [pc, #520]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800390a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800390e:	d10b      	bne.n	8003928 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003910:	4b7e      	ldr	r3, [pc, #504]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d05b      	beq.n	80039d4 <HAL_RCC_OscConfig+0x108>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d157      	bne.n	80039d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e242      	b.n	8003dae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003930:	d106      	bne.n	8003940 <HAL_RCC_OscConfig+0x74>
 8003932:	4b76      	ldr	r3, [pc, #472]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a75      	ldr	r2, [pc, #468]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 8003938:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800393c:	6013      	str	r3, [r2, #0]
 800393e:	e01d      	b.n	800397c <HAL_RCC_OscConfig+0xb0>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003948:	d10c      	bne.n	8003964 <HAL_RCC_OscConfig+0x98>
 800394a:	4b70      	ldr	r3, [pc, #448]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a6f      	ldr	r2, [pc, #444]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 8003950:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003954:	6013      	str	r3, [r2, #0]
 8003956:	4b6d      	ldr	r3, [pc, #436]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a6c      	ldr	r2, [pc, #432]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 800395c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003960:	6013      	str	r3, [r2, #0]
 8003962:	e00b      	b.n	800397c <HAL_RCC_OscConfig+0xb0>
 8003964:	4b69      	ldr	r3, [pc, #420]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a68      	ldr	r2, [pc, #416]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 800396a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800396e:	6013      	str	r3, [r2, #0]
 8003970:	4b66      	ldr	r3, [pc, #408]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a65      	ldr	r2, [pc, #404]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 8003976:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800397a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d013      	beq.n	80039ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003984:	f7ff fcd6 	bl	8003334 <HAL_GetTick>
 8003988:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800398a:	e008      	b.n	800399e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800398c:	f7ff fcd2 	bl	8003334 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b64      	cmp	r3, #100	@ 0x64
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e207      	b.n	8003dae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800399e:	4b5b      	ldr	r3, [pc, #364]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d0f0      	beq.n	800398c <HAL_RCC_OscConfig+0xc0>
 80039aa:	e014      	b.n	80039d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ac:	f7ff fcc2 	bl	8003334 <HAL_GetTick>
 80039b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039b2:	e008      	b.n	80039c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039b4:	f7ff fcbe 	bl	8003334 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b64      	cmp	r3, #100	@ 0x64
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e1f3      	b.n	8003dae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039c6:	4b51      	ldr	r3, [pc, #324]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d1f0      	bne.n	80039b4 <HAL_RCC_OscConfig+0xe8>
 80039d2:	e000      	b.n	80039d6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d063      	beq.n	8003aaa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80039e2:	4b4a      	ldr	r3, [pc, #296]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f003 030c 	and.w	r3, r3, #12
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00b      	beq.n	8003a06 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039ee:	4b47      	ldr	r3, [pc, #284]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80039f6:	2b08      	cmp	r3, #8
 80039f8:	d11c      	bne.n	8003a34 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039fa:	4b44      	ldr	r3, [pc, #272]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d116      	bne.n	8003a34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a06:	4b41      	ldr	r3, [pc, #260]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0302 	and.w	r3, r3, #2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d005      	beq.n	8003a1e <HAL_RCC_OscConfig+0x152>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d001      	beq.n	8003a1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e1c7      	b.n	8003dae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a1e:	4b3b      	ldr	r3, [pc, #236]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	00db      	lsls	r3, r3, #3
 8003a2c:	4937      	ldr	r1, [pc, #220]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a32:	e03a      	b.n	8003aaa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d020      	beq.n	8003a7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a3c:	4b34      	ldr	r3, [pc, #208]	@ (8003b10 <HAL_RCC_OscConfig+0x244>)
 8003a3e:	2201      	movs	r2, #1
 8003a40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a42:	f7ff fc77 	bl	8003334 <HAL_GetTick>
 8003a46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a48:	e008      	b.n	8003a5c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a4a:	f7ff fc73 	bl	8003334 <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d901      	bls.n	8003a5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e1a8      	b.n	8003dae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a5c:	4b2b      	ldr	r3, [pc, #172]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0302 	and.w	r3, r3, #2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d0f0      	beq.n	8003a4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a68:	4b28      	ldr	r3, [pc, #160]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	00db      	lsls	r3, r3, #3
 8003a76:	4925      	ldr	r1, [pc, #148]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	600b      	str	r3, [r1, #0]
 8003a7c:	e015      	b.n	8003aaa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a7e:	4b24      	ldr	r3, [pc, #144]	@ (8003b10 <HAL_RCC_OscConfig+0x244>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a84:	f7ff fc56 	bl	8003334 <HAL_GetTick>
 8003a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a8a:	e008      	b.n	8003a9e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a8c:	f7ff fc52 	bl	8003334 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e187      	b.n	8003dae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a9e:	4b1b      	ldr	r3, [pc, #108]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1f0      	bne.n	8003a8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0308 	and.w	r3, r3, #8
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d036      	beq.n	8003b24 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d016      	beq.n	8003aec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003abe:	4b15      	ldr	r3, [pc, #84]	@ (8003b14 <HAL_RCC_OscConfig+0x248>)
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ac4:	f7ff fc36 	bl	8003334 <HAL_GetTick>
 8003ac8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aca:	e008      	b.n	8003ade <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003acc:	f7ff fc32 	bl	8003334 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e167      	b.n	8003dae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ade:	4b0b      	ldr	r3, [pc, #44]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 8003ae0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d0f0      	beq.n	8003acc <HAL_RCC_OscConfig+0x200>
 8003aea:	e01b      	b.n	8003b24 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003aec:	4b09      	ldr	r3, [pc, #36]	@ (8003b14 <HAL_RCC_OscConfig+0x248>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003af2:	f7ff fc1f 	bl	8003334 <HAL_GetTick>
 8003af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003af8:	e00e      	b.n	8003b18 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003afa:	f7ff fc1b 	bl	8003334 <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d907      	bls.n	8003b18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e150      	b.n	8003dae <HAL_RCC_OscConfig+0x4e2>
 8003b0c:	40023800 	.word	0x40023800
 8003b10:	42470000 	.word	0x42470000
 8003b14:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b18:	4b88      	ldr	r3, [pc, #544]	@ (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003b1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b1c:	f003 0302 	and.w	r3, r3, #2
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d1ea      	bne.n	8003afa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0304 	and.w	r3, r3, #4
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	f000 8097 	beq.w	8003c60 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b32:	2300      	movs	r3, #0
 8003b34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b36:	4b81      	ldr	r3, [pc, #516]	@ (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d10f      	bne.n	8003b62 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b42:	2300      	movs	r3, #0
 8003b44:	60bb      	str	r3, [r7, #8]
 8003b46:	4b7d      	ldr	r3, [pc, #500]	@ (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b4a:	4a7c      	ldr	r2, [pc, #496]	@ (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003b4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b50:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b52:	4b7a      	ldr	r3, [pc, #488]	@ (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b5a:	60bb      	str	r3, [r7, #8]
 8003b5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b62:	4b77      	ldr	r3, [pc, #476]	@ (8003d40 <HAL_RCC_OscConfig+0x474>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d118      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b6e:	4b74      	ldr	r3, [pc, #464]	@ (8003d40 <HAL_RCC_OscConfig+0x474>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a73      	ldr	r2, [pc, #460]	@ (8003d40 <HAL_RCC_OscConfig+0x474>)
 8003b74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b7a:	f7ff fbdb 	bl	8003334 <HAL_GetTick>
 8003b7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b80:	e008      	b.n	8003b94 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b82:	f7ff fbd7 	bl	8003334 <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d901      	bls.n	8003b94 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e10c      	b.n	8003dae <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b94:	4b6a      	ldr	r3, [pc, #424]	@ (8003d40 <HAL_RCC_OscConfig+0x474>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d0f0      	beq.n	8003b82 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d106      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x2ea>
 8003ba8:	4b64      	ldr	r3, [pc, #400]	@ (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003baa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bac:	4a63      	ldr	r2, [pc, #396]	@ (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003bae:	f043 0301 	orr.w	r3, r3, #1
 8003bb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bb4:	e01c      	b.n	8003bf0 <HAL_RCC_OscConfig+0x324>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	2b05      	cmp	r3, #5
 8003bbc:	d10c      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x30c>
 8003bbe:	4b5f      	ldr	r3, [pc, #380]	@ (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003bc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bc2:	4a5e      	ldr	r2, [pc, #376]	@ (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003bc4:	f043 0304 	orr.w	r3, r3, #4
 8003bc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bca:	4b5c      	ldr	r3, [pc, #368]	@ (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003bcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bce:	4a5b      	ldr	r2, [pc, #364]	@ (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003bd0:	f043 0301 	orr.w	r3, r3, #1
 8003bd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bd6:	e00b      	b.n	8003bf0 <HAL_RCC_OscConfig+0x324>
 8003bd8:	4b58      	ldr	r3, [pc, #352]	@ (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003bda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bdc:	4a57      	ldr	r2, [pc, #348]	@ (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003bde:	f023 0301 	bic.w	r3, r3, #1
 8003be2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003be4:	4b55      	ldr	r3, [pc, #340]	@ (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003be6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003be8:	4a54      	ldr	r2, [pc, #336]	@ (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003bea:	f023 0304 	bic.w	r3, r3, #4
 8003bee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d015      	beq.n	8003c24 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bf8:	f7ff fb9c 	bl	8003334 <HAL_GetTick>
 8003bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bfe:	e00a      	b.n	8003c16 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c00:	f7ff fb98 	bl	8003334 <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d901      	bls.n	8003c16 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e0cb      	b.n	8003dae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c16:	4b49      	ldr	r3, [pc, #292]	@ (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003c18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d0ee      	beq.n	8003c00 <HAL_RCC_OscConfig+0x334>
 8003c22:	e014      	b.n	8003c4e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c24:	f7ff fb86 	bl	8003334 <HAL_GetTick>
 8003c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c2a:	e00a      	b.n	8003c42 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c2c:	f7ff fb82 	bl	8003334 <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e0b5      	b.n	8003dae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c42:	4b3e      	ldr	r3, [pc, #248]	@ (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003c44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1ee      	bne.n	8003c2c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c4e:	7dfb      	ldrb	r3, [r7, #23]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d105      	bne.n	8003c60 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c54:	4b39      	ldr	r3, [pc, #228]	@ (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c58:	4a38      	ldr	r2, [pc, #224]	@ (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003c5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c5e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	699b      	ldr	r3, [r3, #24]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	f000 80a1 	beq.w	8003dac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c6a:	4b34      	ldr	r3, [pc, #208]	@ (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f003 030c 	and.w	r3, r3, #12
 8003c72:	2b08      	cmp	r3, #8
 8003c74:	d05c      	beq.n	8003d30 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d141      	bne.n	8003d02 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c7e:	4b31      	ldr	r3, [pc, #196]	@ (8003d44 <HAL_RCC_OscConfig+0x478>)
 8003c80:	2200      	movs	r2, #0
 8003c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c84:	f7ff fb56 	bl	8003334 <HAL_GetTick>
 8003c88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c8a:	e008      	b.n	8003c9e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c8c:	f7ff fb52 	bl	8003334 <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e087      	b.n	8003dae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c9e:	4b27      	ldr	r3, [pc, #156]	@ (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1f0      	bne.n	8003c8c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	69da      	ldr	r2, [r3, #28]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
 8003cb2:	431a      	orrs	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb8:	019b      	lsls	r3, r3, #6
 8003cba:	431a      	orrs	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cc0:	085b      	lsrs	r3, r3, #1
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	041b      	lsls	r3, r3, #16
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ccc:	061b      	lsls	r3, r3, #24
 8003cce:	491b      	ldr	r1, [pc, #108]	@ (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cd4:	4b1b      	ldr	r3, [pc, #108]	@ (8003d44 <HAL_RCC_OscConfig+0x478>)
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cda:	f7ff fb2b 	bl	8003334 <HAL_GetTick>
 8003cde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ce0:	e008      	b.n	8003cf4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ce2:	f7ff fb27 	bl	8003334 <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d901      	bls.n	8003cf4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e05c      	b.n	8003dae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cf4:	4b11      	ldr	r3, [pc, #68]	@ (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d0f0      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x416>
 8003d00:	e054      	b.n	8003dac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d02:	4b10      	ldr	r3, [pc, #64]	@ (8003d44 <HAL_RCC_OscConfig+0x478>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d08:	f7ff fb14 	bl	8003334 <HAL_GetTick>
 8003d0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d0e:	e008      	b.n	8003d22 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d10:	f7ff fb10 	bl	8003334 <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d901      	bls.n	8003d22 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e045      	b.n	8003dae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d22:	4b06      	ldr	r3, [pc, #24]	@ (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1f0      	bne.n	8003d10 <HAL_RCC_OscConfig+0x444>
 8003d2e:	e03d      	b.n	8003dac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d107      	bne.n	8003d48 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e038      	b.n	8003dae <HAL_RCC_OscConfig+0x4e2>
 8003d3c:	40023800 	.word	0x40023800
 8003d40:	40007000 	.word	0x40007000
 8003d44:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d48:	4b1b      	ldr	r3, [pc, #108]	@ (8003db8 <HAL_RCC_OscConfig+0x4ec>)
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d028      	beq.n	8003da8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d121      	bne.n	8003da8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d11a      	bne.n	8003da8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003d78:	4013      	ands	r3, r2
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003d7e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d111      	bne.n	8003da8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d8e:	085b      	lsrs	r3, r3, #1
 8003d90:	3b01      	subs	r3, #1
 8003d92:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d107      	bne.n	8003da8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d001      	beq.n	8003dac <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e000      	b.n	8003dae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3718      	adds	r7, #24
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	40023800 	.word	0x40023800

08003dbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d101      	bne.n	8003dd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e0cc      	b.n	8003f6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003dd0:	4b68      	ldr	r3, [pc, #416]	@ (8003f74 <HAL_RCC_ClockConfig+0x1b8>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0307 	and.w	r3, r3, #7
 8003dd8:	683a      	ldr	r2, [r7, #0]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d90c      	bls.n	8003df8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dde:	4b65      	ldr	r3, [pc, #404]	@ (8003f74 <HAL_RCC_ClockConfig+0x1b8>)
 8003de0:	683a      	ldr	r2, [r7, #0]
 8003de2:	b2d2      	uxtb	r2, r2
 8003de4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003de6:	4b63      	ldr	r3, [pc, #396]	@ (8003f74 <HAL_RCC_ClockConfig+0x1b8>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0307 	and.w	r3, r3, #7
 8003dee:	683a      	ldr	r2, [r7, #0]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d001      	beq.n	8003df8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e0b8      	b.n	8003f6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0302 	and.w	r3, r3, #2
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d020      	beq.n	8003e46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0304 	and.w	r3, r3, #4
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d005      	beq.n	8003e1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e10:	4b59      	ldr	r3, [pc, #356]	@ (8003f78 <HAL_RCC_ClockConfig+0x1bc>)
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	4a58      	ldr	r2, [pc, #352]	@ (8003f78 <HAL_RCC_ClockConfig+0x1bc>)
 8003e16:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003e1a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0308 	and.w	r3, r3, #8
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d005      	beq.n	8003e34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e28:	4b53      	ldr	r3, [pc, #332]	@ (8003f78 <HAL_RCC_ClockConfig+0x1bc>)
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	4a52      	ldr	r2, [pc, #328]	@ (8003f78 <HAL_RCC_ClockConfig+0x1bc>)
 8003e2e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003e32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e34:	4b50      	ldr	r3, [pc, #320]	@ (8003f78 <HAL_RCC_ClockConfig+0x1bc>)
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	494d      	ldr	r1, [pc, #308]	@ (8003f78 <HAL_RCC_ClockConfig+0x1bc>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0301 	and.w	r3, r3, #1
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d044      	beq.n	8003edc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d107      	bne.n	8003e6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e5a:	4b47      	ldr	r3, [pc, #284]	@ (8003f78 <HAL_RCC_ClockConfig+0x1bc>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d119      	bne.n	8003e9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e07f      	b.n	8003f6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d003      	beq.n	8003e7a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e76:	2b03      	cmp	r3, #3
 8003e78:	d107      	bne.n	8003e8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e7a:	4b3f      	ldr	r3, [pc, #252]	@ (8003f78 <HAL_RCC_ClockConfig+0x1bc>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d109      	bne.n	8003e9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e06f      	b.n	8003f6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e8a:	4b3b      	ldr	r3, [pc, #236]	@ (8003f78 <HAL_RCC_ClockConfig+0x1bc>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0302 	and.w	r3, r3, #2
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d101      	bne.n	8003e9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e067      	b.n	8003f6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e9a:	4b37      	ldr	r3, [pc, #220]	@ (8003f78 <HAL_RCC_ClockConfig+0x1bc>)
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	f023 0203 	bic.w	r2, r3, #3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	4934      	ldr	r1, [pc, #208]	@ (8003f78 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003eac:	f7ff fa42 	bl	8003334 <HAL_GetTick>
 8003eb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eb2:	e00a      	b.n	8003eca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003eb4:	f7ff fa3e 	bl	8003334 <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d901      	bls.n	8003eca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e04f      	b.n	8003f6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eca:	4b2b      	ldr	r3, [pc, #172]	@ (8003f78 <HAL_RCC_ClockConfig+0x1bc>)
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f003 020c 	and.w	r2, r3, #12
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d1eb      	bne.n	8003eb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003edc:	4b25      	ldr	r3, [pc, #148]	@ (8003f74 <HAL_RCC_ClockConfig+0x1b8>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0307 	and.w	r3, r3, #7
 8003ee4:	683a      	ldr	r2, [r7, #0]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d20c      	bcs.n	8003f04 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eea:	4b22      	ldr	r3, [pc, #136]	@ (8003f74 <HAL_RCC_ClockConfig+0x1b8>)
 8003eec:	683a      	ldr	r2, [r7, #0]
 8003eee:	b2d2      	uxtb	r2, r2
 8003ef0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ef2:	4b20      	ldr	r3, [pc, #128]	@ (8003f74 <HAL_RCC_ClockConfig+0x1b8>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0307 	and.w	r3, r3, #7
 8003efa:	683a      	ldr	r2, [r7, #0]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d001      	beq.n	8003f04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e032      	b.n	8003f6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0304 	and.w	r3, r3, #4
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d008      	beq.n	8003f22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f10:	4b19      	ldr	r3, [pc, #100]	@ (8003f78 <HAL_RCC_ClockConfig+0x1bc>)
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	4916      	ldr	r1, [pc, #88]	@ (8003f78 <HAL_RCC_ClockConfig+0x1bc>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0308 	and.w	r3, r3, #8
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d009      	beq.n	8003f42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f2e:	4b12      	ldr	r3, [pc, #72]	@ (8003f78 <HAL_RCC_ClockConfig+0x1bc>)
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	00db      	lsls	r3, r3, #3
 8003f3c:	490e      	ldr	r1, [pc, #56]	@ (8003f78 <HAL_RCC_ClockConfig+0x1bc>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f42:	f000 f821 	bl	8003f88 <HAL_RCC_GetSysClockFreq>
 8003f46:	4602      	mov	r2, r0
 8003f48:	4b0b      	ldr	r3, [pc, #44]	@ (8003f78 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	091b      	lsrs	r3, r3, #4
 8003f4e:	f003 030f 	and.w	r3, r3, #15
 8003f52:	490a      	ldr	r1, [pc, #40]	@ (8003f7c <HAL_RCC_ClockConfig+0x1c0>)
 8003f54:	5ccb      	ldrb	r3, [r1, r3]
 8003f56:	fa22 f303 	lsr.w	r3, r2, r3
 8003f5a:	4a09      	ldr	r2, [pc, #36]	@ (8003f80 <HAL_RCC_ClockConfig+0x1c4>)
 8003f5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003f5e:	4b09      	ldr	r3, [pc, #36]	@ (8003f84 <HAL_RCC_ClockConfig+0x1c8>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7ff f9a2 	bl	80032ac <HAL_InitTick>

  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3710      	adds	r7, #16
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	40023c00 	.word	0x40023c00
 8003f78:	40023800 	.word	0x40023800
 8003f7c:	08007f04 	.word	0x08007f04
 8003f80:	20000000 	.word	0x20000000
 8003f84:	20000004 	.word	0x20000004

08003f88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f8c:	b090      	sub	sp, #64	@ 0x40
 8003f8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003f90:	2300      	movs	r3, #0
 8003f92:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003f94:	2300      	movs	r3, #0
 8003f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fa0:	4b59      	ldr	r3, [pc, #356]	@ (8004108 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	f003 030c 	and.w	r3, r3, #12
 8003fa8:	2b08      	cmp	r3, #8
 8003faa:	d00d      	beq.n	8003fc8 <HAL_RCC_GetSysClockFreq+0x40>
 8003fac:	2b08      	cmp	r3, #8
 8003fae:	f200 80a1 	bhi.w	80040f4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d002      	beq.n	8003fbc <HAL_RCC_GetSysClockFreq+0x34>
 8003fb6:	2b04      	cmp	r3, #4
 8003fb8:	d003      	beq.n	8003fc2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003fba:	e09b      	b.n	80040f4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fbc:	4b53      	ldr	r3, [pc, #332]	@ (800410c <HAL_RCC_GetSysClockFreq+0x184>)
 8003fbe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003fc0:	e09b      	b.n	80040fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fc2:	4b53      	ldr	r3, [pc, #332]	@ (8004110 <HAL_RCC_GetSysClockFreq+0x188>)
 8003fc4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003fc6:	e098      	b.n	80040fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fc8:	4b4f      	ldr	r3, [pc, #316]	@ (8004108 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003fd0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fd2:	4b4d      	ldr	r3, [pc, #308]	@ (8004108 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d028      	beq.n	8004030 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fde:	4b4a      	ldr	r3, [pc, #296]	@ (8004108 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	099b      	lsrs	r3, r3, #6
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	623b      	str	r3, [r7, #32]
 8003fe8:	627a      	str	r2, [r7, #36]	@ 0x24
 8003fea:	6a3b      	ldr	r3, [r7, #32]
 8003fec:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003ff0:	2100      	movs	r1, #0
 8003ff2:	4b47      	ldr	r3, [pc, #284]	@ (8004110 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ff4:	fb03 f201 	mul.w	r2, r3, r1
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	fb00 f303 	mul.w	r3, r0, r3
 8003ffe:	4413      	add	r3, r2
 8004000:	4a43      	ldr	r2, [pc, #268]	@ (8004110 <HAL_RCC_GetSysClockFreq+0x188>)
 8004002:	fba0 1202 	umull	r1, r2, r0, r2
 8004006:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004008:	460a      	mov	r2, r1
 800400a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800400c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800400e:	4413      	add	r3, r2
 8004010:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004012:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004014:	2200      	movs	r2, #0
 8004016:	61bb      	str	r3, [r7, #24]
 8004018:	61fa      	str	r2, [r7, #28]
 800401a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800401e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004022:	f7fc fdc1 	bl	8000ba8 <__aeabi_uldivmod>
 8004026:	4602      	mov	r2, r0
 8004028:	460b      	mov	r3, r1
 800402a:	4613      	mov	r3, r2
 800402c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800402e:	e053      	b.n	80040d8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004030:	4b35      	ldr	r3, [pc, #212]	@ (8004108 <HAL_RCC_GetSysClockFreq+0x180>)
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	099b      	lsrs	r3, r3, #6
 8004036:	2200      	movs	r2, #0
 8004038:	613b      	str	r3, [r7, #16]
 800403a:	617a      	str	r2, [r7, #20]
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004042:	f04f 0b00 	mov.w	fp, #0
 8004046:	4652      	mov	r2, sl
 8004048:	465b      	mov	r3, fp
 800404a:	f04f 0000 	mov.w	r0, #0
 800404e:	f04f 0100 	mov.w	r1, #0
 8004052:	0159      	lsls	r1, r3, #5
 8004054:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004058:	0150      	lsls	r0, r2, #5
 800405a:	4602      	mov	r2, r0
 800405c:	460b      	mov	r3, r1
 800405e:	ebb2 080a 	subs.w	r8, r2, sl
 8004062:	eb63 090b 	sbc.w	r9, r3, fp
 8004066:	f04f 0200 	mov.w	r2, #0
 800406a:	f04f 0300 	mov.w	r3, #0
 800406e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004072:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004076:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800407a:	ebb2 0408 	subs.w	r4, r2, r8
 800407e:	eb63 0509 	sbc.w	r5, r3, r9
 8004082:	f04f 0200 	mov.w	r2, #0
 8004086:	f04f 0300 	mov.w	r3, #0
 800408a:	00eb      	lsls	r3, r5, #3
 800408c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004090:	00e2      	lsls	r2, r4, #3
 8004092:	4614      	mov	r4, r2
 8004094:	461d      	mov	r5, r3
 8004096:	eb14 030a 	adds.w	r3, r4, sl
 800409a:	603b      	str	r3, [r7, #0]
 800409c:	eb45 030b 	adc.w	r3, r5, fp
 80040a0:	607b      	str	r3, [r7, #4]
 80040a2:	f04f 0200 	mov.w	r2, #0
 80040a6:	f04f 0300 	mov.w	r3, #0
 80040aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040ae:	4629      	mov	r1, r5
 80040b0:	028b      	lsls	r3, r1, #10
 80040b2:	4621      	mov	r1, r4
 80040b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040b8:	4621      	mov	r1, r4
 80040ba:	028a      	lsls	r2, r1, #10
 80040bc:	4610      	mov	r0, r2
 80040be:	4619      	mov	r1, r3
 80040c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040c2:	2200      	movs	r2, #0
 80040c4:	60bb      	str	r3, [r7, #8]
 80040c6:	60fa      	str	r2, [r7, #12]
 80040c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040cc:	f7fc fd6c 	bl	8000ba8 <__aeabi_uldivmod>
 80040d0:	4602      	mov	r2, r0
 80040d2:	460b      	mov	r3, r1
 80040d4:	4613      	mov	r3, r2
 80040d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80040d8:	4b0b      	ldr	r3, [pc, #44]	@ (8004108 <HAL_RCC_GetSysClockFreq+0x180>)
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	0c1b      	lsrs	r3, r3, #16
 80040de:	f003 0303 	and.w	r3, r3, #3
 80040e2:	3301      	adds	r3, #1
 80040e4:	005b      	lsls	r3, r3, #1
 80040e6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80040e8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80040ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80040f0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80040f2:	e002      	b.n	80040fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040f4:	4b05      	ldr	r3, [pc, #20]	@ (800410c <HAL_RCC_GetSysClockFreq+0x184>)
 80040f6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80040f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3740      	adds	r7, #64	@ 0x40
 8004100:	46bd      	mov	sp, r7
 8004102:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004106:	bf00      	nop
 8004108:	40023800 	.word	0x40023800
 800410c:	00f42400 	.word	0x00f42400
 8004110:	017d7840 	.word	0x017d7840

08004114 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004114:	b480      	push	{r7}
 8004116:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004118:	4b03      	ldr	r3, [pc, #12]	@ (8004128 <HAL_RCC_GetHCLKFreq+0x14>)
 800411a:	681b      	ldr	r3, [r3, #0]
}
 800411c:	4618      	mov	r0, r3
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	20000000 	.word	0x20000000

0800412c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004130:	f7ff fff0 	bl	8004114 <HAL_RCC_GetHCLKFreq>
 8004134:	4602      	mov	r2, r0
 8004136:	4b05      	ldr	r3, [pc, #20]	@ (800414c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	0a9b      	lsrs	r3, r3, #10
 800413c:	f003 0307 	and.w	r3, r3, #7
 8004140:	4903      	ldr	r1, [pc, #12]	@ (8004150 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004142:	5ccb      	ldrb	r3, [r1, r3]
 8004144:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004148:	4618      	mov	r0, r3
 800414a:	bd80      	pop	{r7, pc}
 800414c:	40023800 	.word	0x40023800
 8004150:	08007f14 	.word	0x08007f14

08004154 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004158:	f7ff ffdc 	bl	8004114 <HAL_RCC_GetHCLKFreq>
 800415c:	4602      	mov	r2, r0
 800415e:	4b05      	ldr	r3, [pc, #20]	@ (8004174 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	0b5b      	lsrs	r3, r3, #13
 8004164:	f003 0307 	and.w	r3, r3, #7
 8004168:	4903      	ldr	r1, [pc, #12]	@ (8004178 <HAL_RCC_GetPCLK2Freq+0x24>)
 800416a:	5ccb      	ldrb	r3, [r1, r3]
 800416c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004170:	4618      	mov	r0, r3
 8004172:	bd80      	pop	{r7, pc}
 8004174:	40023800 	.word	0x40023800
 8004178:	08007f14 	.word	0x08007f14

0800417c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d101      	bne.n	800418e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e042      	b.n	8004214 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004194:	b2db      	uxtb	r3, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	d106      	bne.n	80041a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f7fd f8ce 	bl	8001344 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2224      	movs	r2, #36	@ 0x24
 80041ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68da      	ldr	r2, [r3, #12]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80041be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f000 fa09 	bl	80045d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	691a      	ldr	r2, [r3, #16]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80041d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	695a      	ldr	r2, [r3, #20]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80041e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68da      	ldr	r2, [r3, #12]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80041f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2220      	movs	r2, #32
 8004200:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2220      	movs	r2, #32
 8004208:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004212:	2300      	movs	r3, #0
}
 8004214:	4618      	mov	r0, r3
 8004216:	3708      	adds	r7, #8
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b08a      	sub	sp, #40	@ 0x28
 8004220:	af02      	add	r7, sp, #8
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	603b      	str	r3, [r7, #0]
 8004228:	4613      	mov	r3, r2
 800422a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800422c:	2300      	movs	r3, #0
 800422e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004236:	b2db      	uxtb	r3, r3
 8004238:	2b20      	cmp	r3, #32
 800423a:	d175      	bne.n	8004328 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d002      	beq.n	8004248 <HAL_UART_Transmit+0x2c>
 8004242:	88fb      	ldrh	r3, [r7, #6]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d101      	bne.n	800424c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e06e      	b.n	800432a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2200      	movs	r2, #0
 8004250:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2221      	movs	r2, #33	@ 0x21
 8004256:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800425a:	f7ff f86b 	bl	8003334 <HAL_GetTick>
 800425e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	88fa      	ldrh	r2, [r7, #6]
 8004264:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	88fa      	ldrh	r2, [r7, #6]
 800426a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004274:	d108      	bne.n	8004288 <HAL_UART_Transmit+0x6c>
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d104      	bne.n	8004288 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800427e:	2300      	movs	r3, #0
 8004280:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	61bb      	str	r3, [r7, #24]
 8004286:	e003      	b.n	8004290 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800428c:	2300      	movs	r3, #0
 800428e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004290:	e02e      	b.n	80042f0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	9300      	str	r3, [sp, #0]
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	2200      	movs	r2, #0
 800429a:	2180      	movs	r1, #128	@ 0x80
 800429c:	68f8      	ldr	r0, [r7, #12]
 800429e:	f000 f8df 	bl	8004460 <UART_WaitOnFlagUntilTimeout>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d005      	beq.n	80042b4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2220      	movs	r2, #32
 80042ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e03a      	b.n	800432a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d10b      	bne.n	80042d2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	881b      	ldrh	r3, [r3, #0]
 80042be:	461a      	mov	r2, r3
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	3302      	adds	r3, #2
 80042ce:	61bb      	str	r3, [r7, #24]
 80042d0:	e007      	b.n	80042e2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	781a      	ldrb	r2, [r3, #0]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	3301      	adds	r3, #1
 80042e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	3b01      	subs	r3, #1
 80042ea:	b29a      	uxth	r2, r3
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1cb      	bne.n	8004292 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	9300      	str	r3, [sp, #0]
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	2200      	movs	r2, #0
 8004302:	2140      	movs	r1, #64	@ 0x40
 8004304:	68f8      	ldr	r0, [r7, #12]
 8004306:	f000 f8ab 	bl	8004460 <UART_WaitOnFlagUntilTimeout>
 800430a:	4603      	mov	r3, r0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d005      	beq.n	800431c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2220      	movs	r2, #32
 8004314:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e006      	b.n	800432a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2220      	movs	r2, #32
 8004320:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004324:	2300      	movs	r3, #0
 8004326:	e000      	b.n	800432a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004328:	2302      	movs	r3, #2
  }
}
 800432a:	4618      	mov	r0, r3
 800432c:	3720      	adds	r7, #32
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}

08004332 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004332:	b580      	push	{r7, lr}
 8004334:	b08a      	sub	sp, #40	@ 0x28
 8004336:	af02      	add	r7, sp, #8
 8004338:	60f8      	str	r0, [r7, #12]
 800433a:	60b9      	str	r1, [r7, #8]
 800433c:	603b      	str	r3, [r7, #0]
 800433e:	4613      	mov	r3, r2
 8004340:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004342:	2300      	movs	r3, #0
 8004344:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800434c:	b2db      	uxtb	r3, r3
 800434e:	2b20      	cmp	r3, #32
 8004350:	f040 8081 	bne.w	8004456 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d002      	beq.n	8004360 <HAL_UART_Receive+0x2e>
 800435a:	88fb      	ldrh	r3, [r7, #6]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d101      	bne.n	8004364 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e079      	b.n	8004458 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2200      	movs	r2, #0
 8004368:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2222      	movs	r2, #34	@ 0x22
 800436e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2200      	movs	r2, #0
 8004376:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004378:	f7fe ffdc 	bl	8003334 <HAL_GetTick>
 800437c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	88fa      	ldrh	r2, [r7, #6]
 8004382:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	88fa      	ldrh	r2, [r7, #6]
 8004388:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004392:	d108      	bne.n	80043a6 <HAL_UART_Receive+0x74>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	691b      	ldr	r3, [r3, #16]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d104      	bne.n	80043a6 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800439c:	2300      	movs	r3, #0
 800439e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	61bb      	str	r3, [r7, #24]
 80043a4:	e003      	b.n	80043ae <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043aa:	2300      	movs	r3, #0
 80043ac:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80043ae:	e047      	b.n	8004440 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	9300      	str	r3, [sp, #0]
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	2200      	movs	r2, #0
 80043b8:	2120      	movs	r1, #32
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f000 f850 	bl	8004460 <UART_WaitOnFlagUntilTimeout>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d005      	beq.n	80043d2 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2220      	movs	r2, #32
 80043ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e042      	b.n	8004458 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d10c      	bne.n	80043f2 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	b29b      	uxth	r3, r3
 80043e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043e4:	b29a      	uxth	r2, r3
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	3302      	adds	r3, #2
 80043ee:	61bb      	str	r3, [r7, #24]
 80043f0:	e01f      	b.n	8004432 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043fa:	d007      	beq.n	800440c <HAL_UART_Receive+0xda>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d10a      	bne.n	800441a <HAL_UART_Receive+0xe8>
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	691b      	ldr	r3, [r3, #16]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d106      	bne.n	800441a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	b2da      	uxtb	r2, r3
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	701a      	strb	r2, [r3, #0]
 8004418:	e008      	b.n	800442c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	b2db      	uxtb	r3, r3
 8004422:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004426:	b2da      	uxtb	r2, r3
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	3301      	adds	r3, #1
 8004430:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004436:	b29b      	uxth	r3, r3
 8004438:	3b01      	subs	r3, #1
 800443a:	b29a      	uxth	r2, r3
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004444:	b29b      	uxth	r3, r3
 8004446:	2b00      	cmp	r3, #0
 8004448:	d1b2      	bne.n	80043b0 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2220      	movs	r2, #32
 800444e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8004452:	2300      	movs	r3, #0
 8004454:	e000      	b.n	8004458 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004456:	2302      	movs	r3, #2
  }
}
 8004458:	4618      	mov	r0, r3
 800445a:	3720      	adds	r7, #32
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b086      	sub	sp, #24
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	603b      	str	r3, [r7, #0]
 800446c:	4613      	mov	r3, r2
 800446e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004470:	e03b      	b.n	80044ea <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004472:	6a3b      	ldr	r3, [r7, #32]
 8004474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004478:	d037      	beq.n	80044ea <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800447a:	f7fe ff5b 	bl	8003334 <HAL_GetTick>
 800447e:	4602      	mov	r2, r0
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	6a3a      	ldr	r2, [r7, #32]
 8004486:	429a      	cmp	r2, r3
 8004488:	d302      	bcc.n	8004490 <UART_WaitOnFlagUntilTimeout+0x30>
 800448a:	6a3b      	ldr	r3, [r7, #32]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d101      	bne.n	8004494 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e03a      	b.n	800450a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	f003 0304 	and.w	r3, r3, #4
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d023      	beq.n	80044ea <UART_WaitOnFlagUntilTimeout+0x8a>
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	2b80      	cmp	r3, #128	@ 0x80
 80044a6:	d020      	beq.n	80044ea <UART_WaitOnFlagUntilTimeout+0x8a>
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	2b40      	cmp	r3, #64	@ 0x40
 80044ac:	d01d      	beq.n	80044ea <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0308 	and.w	r3, r3, #8
 80044b8:	2b08      	cmp	r3, #8
 80044ba:	d116      	bne.n	80044ea <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80044bc:	2300      	movs	r3, #0
 80044be:	617b      	str	r3, [r7, #20]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	617b      	str	r3, [r7, #20]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	617b      	str	r3, [r7, #20]
 80044d0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044d2:	68f8      	ldr	r0, [r7, #12]
 80044d4:	f000 f81d 	bl	8004512 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2208      	movs	r2, #8
 80044dc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e00f      	b.n	800450a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	4013      	ands	r3, r2
 80044f4:	68ba      	ldr	r2, [r7, #8]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	bf0c      	ite	eq
 80044fa:	2301      	moveq	r3, #1
 80044fc:	2300      	movne	r3, #0
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	461a      	mov	r2, r3
 8004502:	79fb      	ldrb	r3, [r7, #7]
 8004504:	429a      	cmp	r2, r3
 8004506:	d0b4      	beq.n	8004472 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3718      	adds	r7, #24
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}

08004512 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004512:	b480      	push	{r7}
 8004514:	b095      	sub	sp, #84	@ 0x54
 8004516:	af00      	add	r7, sp, #0
 8004518:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	330c      	adds	r3, #12
 8004520:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004522:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004524:	e853 3f00 	ldrex	r3, [r3]
 8004528:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800452a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800452c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004530:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	330c      	adds	r3, #12
 8004538:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800453a:	643a      	str	r2, [r7, #64]	@ 0x40
 800453c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004540:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004542:	e841 2300 	strex	r3, r2, [r1]
 8004546:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1e5      	bne.n	800451a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	3314      	adds	r3, #20
 8004554:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004556:	6a3b      	ldr	r3, [r7, #32]
 8004558:	e853 3f00 	ldrex	r3, [r3]
 800455c:	61fb      	str	r3, [r7, #28]
   return(result);
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	f023 0301 	bic.w	r3, r3, #1
 8004564:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	3314      	adds	r3, #20
 800456c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800456e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004570:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004572:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004574:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004576:	e841 2300 	strex	r3, r2, [r1]
 800457a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800457c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1e5      	bne.n	800454e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004586:	2b01      	cmp	r3, #1
 8004588:	d119      	bne.n	80045be <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	330c      	adds	r3, #12
 8004590:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	e853 3f00 	ldrex	r3, [r3]
 8004598:	60bb      	str	r3, [r7, #8]
   return(result);
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	f023 0310 	bic.w	r3, r3, #16
 80045a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	330c      	adds	r3, #12
 80045a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045aa:	61ba      	str	r2, [r7, #24]
 80045ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ae:	6979      	ldr	r1, [r7, #20]
 80045b0:	69ba      	ldr	r2, [r7, #24]
 80045b2:	e841 2300 	strex	r3, r2, [r1]
 80045b6:	613b      	str	r3, [r7, #16]
   return(result);
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1e5      	bne.n	800458a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2220      	movs	r2, #32
 80045c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80045cc:	bf00      	nop
 80045ce:	3754      	adds	r7, #84	@ 0x54
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045dc:	b0c0      	sub	sp, #256	@ 0x100
 80045de:	af00      	add	r7, sp, #0
 80045e0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	691b      	ldr	r3, [r3, #16]
 80045ec:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80045f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045f4:	68d9      	ldr	r1, [r3, #12]
 80045f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	ea40 0301 	orr.w	r3, r0, r1
 8004600:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004606:	689a      	ldr	r2, [r3, #8]
 8004608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	431a      	orrs	r2, r3
 8004610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	431a      	orrs	r2, r3
 8004618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800461c:	69db      	ldr	r3, [r3, #28]
 800461e:	4313      	orrs	r3, r2
 8004620:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004630:	f021 010c 	bic.w	r1, r1, #12
 8004634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800463e:	430b      	orrs	r3, r1
 8004640:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	695b      	ldr	r3, [r3, #20]
 800464a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800464e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004652:	6999      	ldr	r1, [r3, #24]
 8004654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	ea40 0301 	orr.w	r3, r0, r1
 800465e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	4b8f      	ldr	r3, [pc, #572]	@ (80048a4 <UART_SetConfig+0x2cc>)
 8004668:	429a      	cmp	r2, r3
 800466a:	d005      	beq.n	8004678 <UART_SetConfig+0xa0>
 800466c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	4b8d      	ldr	r3, [pc, #564]	@ (80048a8 <UART_SetConfig+0x2d0>)
 8004674:	429a      	cmp	r2, r3
 8004676:	d104      	bne.n	8004682 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004678:	f7ff fd6c 	bl	8004154 <HAL_RCC_GetPCLK2Freq>
 800467c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004680:	e003      	b.n	800468a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004682:	f7ff fd53 	bl	800412c <HAL_RCC_GetPCLK1Freq>
 8004686:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800468a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800468e:	69db      	ldr	r3, [r3, #28]
 8004690:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004694:	f040 810c 	bne.w	80048b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004698:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800469c:	2200      	movs	r2, #0
 800469e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80046a2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80046a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80046aa:	4622      	mov	r2, r4
 80046ac:	462b      	mov	r3, r5
 80046ae:	1891      	adds	r1, r2, r2
 80046b0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80046b2:	415b      	adcs	r3, r3
 80046b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80046b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80046ba:	4621      	mov	r1, r4
 80046bc:	eb12 0801 	adds.w	r8, r2, r1
 80046c0:	4629      	mov	r1, r5
 80046c2:	eb43 0901 	adc.w	r9, r3, r1
 80046c6:	f04f 0200 	mov.w	r2, #0
 80046ca:	f04f 0300 	mov.w	r3, #0
 80046ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046da:	4690      	mov	r8, r2
 80046dc:	4699      	mov	r9, r3
 80046de:	4623      	mov	r3, r4
 80046e0:	eb18 0303 	adds.w	r3, r8, r3
 80046e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80046e8:	462b      	mov	r3, r5
 80046ea:	eb49 0303 	adc.w	r3, r9, r3
 80046ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80046f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80046fe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004702:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004706:	460b      	mov	r3, r1
 8004708:	18db      	adds	r3, r3, r3
 800470a:	653b      	str	r3, [r7, #80]	@ 0x50
 800470c:	4613      	mov	r3, r2
 800470e:	eb42 0303 	adc.w	r3, r2, r3
 8004712:	657b      	str	r3, [r7, #84]	@ 0x54
 8004714:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004718:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800471c:	f7fc fa44 	bl	8000ba8 <__aeabi_uldivmod>
 8004720:	4602      	mov	r2, r0
 8004722:	460b      	mov	r3, r1
 8004724:	4b61      	ldr	r3, [pc, #388]	@ (80048ac <UART_SetConfig+0x2d4>)
 8004726:	fba3 2302 	umull	r2, r3, r3, r2
 800472a:	095b      	lsrs	r3, r3, #5
 800472c:	011c      	lsls	r4, r3, #4
 800472e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004732:	2200      	movs	r2, #0
 8004734:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004738:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800473c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004740:	4642      	mov	r2, r8
 8004742:	464b      	mov	r3, r9
 8004744:	1891      	adds	r1, r2, r2
 8004746:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004748:	415b      	adcs	r3, r3
 800474a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800474c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004750:	4641      	mov	r1, r8
 8004752:	eb12 0a01 	adds.w	sl, r2, r1
 8004756:	4649      	mov	r1, r9
 8004758:	eb43 0b01 	adc.w	fp, r3, r1
 800475c:	f04f 0200 	mov.w	r2, #0
 8004760:	f04f 0300 	mov.w	r3, #0
 8004764:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004768:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800476c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004770:	4692      	mov	sl, r2
 8004772:	469b      	mov	fp, r3
 8004774:	4643      	mov	r3, r8
 8004776:	eb1a 0303 	adds.w	r3, sl, r3
 800477a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800477e:	464b      	mov	r3, r9
 8004780:	eb4b 0303 	adc.w	r3, fp, r3
 8004784:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004794:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004798:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800479c:	460b      	mov	r3, r1
 800479e:	18db      	adds	r3, r3, r3
 80047a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80047a2:	4613      	mov	r3, r2
 80047a4:	eb42 0303 	adc.w	r3, r2, r3
 80047a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80047aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80047ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80047b2:	f7fc f9f9 	bl	8000ba8 <__aeabi_uldivmod>
 80047b6:	4602      	mov	r2, r0
 80047b8:	460b      	mov	r3, r1
 80047ba:	4611      	mov	r1, r2
 80047bc:	4b3b      	ldr	r3, [pc, #236]	@ (80048ac <UART_SetConfig+0x2d4>)
 80047be:	fba3 2301 	umull	r2, r3, r3, r1
 80047c2:	095b      	lsrs	r3, r3, #5
 80047c4:	2264      	movs	r2, #100	@ 0x64
 80047c6:	fb02 f303 	mul.w	r3, r2, r3
 80047ca:	1acb      	subs	r3, r1, r3
 80047cc:	00db      	lsls	r3, r3, #3
 80047ce:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80047d2:	4b36      	ldr	r3, [pc, #216]	@ (80048ac <UART_SetConfig+0x2d4>)
 80047d4:	fba3 2302 	umull	r2, r3, r3, r2
 80047d8:	095b      	lsrs	r3, r3, #5
 80047da:	005b      	lsls	r3, r3, #1
 80047dc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80047e0:	441c      	add	r4, r3
 80047e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047e6:	2200      	movs	r2, #0
 80047e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80047ec:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80047f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80047f4:	4642      	mov	r2, r8
 80047f6:	464b      	mov	r3, r9
 80047f8:	1891      	adds	r1, r2, r2
 80047fa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80047fc:	415b      	adcs	r3, r3
 80047fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004800:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004804:	4641      	mov	r1, r8
 8004806:	1851      	adds	r1, r2, r1
 8004808:	6339      	str	r1, [r7, #48]	@ 0x30
 800480a:	4649      	mov	r1, r9
 800480c:	414b      	adcs	r3, r1
 800480e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004810:	f04f 0200 	mov.w	r2, #0
 8004814:	f04f 0300 	mov.w	r3, #0
 8004818:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800481c:	4659      	mov	r1, fp
 800481e:	00cb      	lsls	r3, r1, #3
 8004820:	4651      	mov	r1, sl
 8004822:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004826:	4651      	mov	r1, sl
 8004828:	00ca      	lsls	r2, r1, #3
 800482a:	4610      	mov	r0, r2
 800482c:	4619      	mov	r1, r3
 800482e:	4603      	mov	r3, r0
 8004830:	4642      	mov	r2, r8
 8004832:	189b      	adds	r3, r3, r2
 8004834:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004838:	464b      	mov	r3, r9
 800483a:	460a      	mov	r2, r1
 800483c:	eb42 0303 	adc.w	r3, r2, r3
 8004840:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004850:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004854:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004858:	460b      	mov	r3, r1
 800485a:	18db      	adds	r3, r3, r3
 800485c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800485e:	4613      	mov	r3, r2
 8004860:	eb42 0303 	adc.w	r3, r2, r3
 8004864:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004866:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800486a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800486e:	f7fc f99b 	bl	8000ba8 <__aeabi_uldivmod>
 8004872:	4602      	mov	r2, r0
 8004874:	460b      	mov	r3, r1
 8004876:	4b0d      	ldr	r3, [pc, #52]	@ (80048ac <UART_SetConfig+0x2d4>)
 8004878:	fba3 1302 	umull	r1, r3, r3, r2
 800487c:	095b      	lsrs	r3, r3, #5
 800487e:	2164      	movs	r1, #100	@ 0x64
 8004880:	fb01 f303 	mul.w	r3, r1, r3
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	00db      	lsls	r3, r3, #3
 8004888:	3332      	adds	r3, #50	@ 0x32
 800488a:	4a08      	ldr	r2, [pc, #32]	@ (80048ac <UART_SetConfig+0x2d4>)
 800488c:	fba2 2303 	umull	r2, r3, r2, r3
 8004890:	095b      	lsrs	r3, r3, #5
 8004892:	f003 0207 	and.w	r2, r3, #7
 8004896:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4422      	add	r2, r4
 800489e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80048a0:	e106      	b.n	8004ab0 <UART_SetConfig+0x4d8>
 80048a2:	bf00      	nop
 80048a4:	40011000 	.word	0x40011000
 80048a8:	40011400 	.word	0x40011400
 80048ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80048b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048b4:	2200      	movs	r2, #0
 80048b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80048ba:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80048be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80048c2:	4642      	mov	r2, r8
 80048c4:	464b      	mov	r3, r9
 80048c6:	1891      	adds	r1, r2, r2
 80048c8:	6239      	str	r1, [r7, #32]
 80048ca:	415b      	adcs	r3, r3
 80048cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80048ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80048d2:	4641      	mov	r1, r8
 80048d4:	1854      	adds	r4, r2, r1
 80048d6:	4649      	mov	r1, r9
 80048d8:	eb43 0501 	adc.w	r5, r3, r1
 80048dc:	f04f 0200 	mov.w	r2, #0
 80048e0:	f04f 0300 	mov.w	r3, #0
 80048e4:	00eb      	lsls	r3, r5, #3
 80048e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048ea:	00e2      	lsls	r2, r4, #3
 80048ec:	4614      	mov	r4, r2
 80048ee:	461d      	mov	r5, r3
 80048f0:	4643      	mov	r3, r8
 80048f2:	18e3      	adds	r3, r4, r3
 80048f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80048f8:	464b      	mov	r3, r9
 80048fa:	eb45 0303 	adc.w	r3, r5, r3
 80048fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004902:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800490e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004912:	f04f 0200 	mov.w	r2, #0
 8004916:	f04f 0300 	mov.w	r3, #0
 800491a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800491e:	4629      	mov	r1, r5
 8004920:	008b      	lsls	r3, r1, #2
 8004922:	4621      	mov	r1, r4
 8004924:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004928:	4621      	mov	r1, r4
 800492a:	008a      	lsls	r2, r1, #2
 800492c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004930:	f7fc f93a 	bl	8000ba8 <__aeabi_uldivmod>
 8004934:	4602      	mov	r2, r0
 8004936:	460b      	mov	r3, r1
 8004938:	4b60      	ldr	r3, [pc, #384]	@ (8004abc <UART_SetConfig+0x4e4>)
 800493a:	fba3 2302 	umull	r2, r3, r3, r2
 800493e:	095b      	lsrs	r3, r3, #5
 8004940:	011c      	lsls	r4, r3, #4
 8004942:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004946:	2200      	movs	r2, #0
 8004948:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800494c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004950:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004954:	4642      	mov	r2, r8
 8004956:	464b      	mov	r3, r9
 8004958:	1891      	adds	r1, r2, r2
 800495a:	61b9      	str	r1, [r7, #24]
 800495c:	415b      	adcs	r3, r3
 800495e:	61fb      	str	r3, [r7, #28]
 8004960:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004964:	4641      	mov	r1, r8
 8004966:	1851      	adds	r1, r2, r1
 8004968:	6139      	str	r1, [r7, #16]
 800496a:	4649      	mov	r1, r9
 800496c:	414b      	adcs	r3, r1
 800496e:	617b      	str	r3, [r7, #20]
 8004970:	f04f 0200 	mov.w	r2, #0
 8004974:	f04f 0300 	mov.w	r3, #0
 8004978:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800497c:	4659      	mov	r1, fp
 800497e:	00cb      	lsls	r3, r1, #3
 8004980:	4651      	mov	r1, sl
 8004982:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004986:	4651      	mov	r1, sl
 8004988:	00ca      	lsls	r2, r1, #3
 800498a:	4610      	mov	r0, r2
 800498c:	4619      	mov	r1, r3
 800498e:	4603      	mov	r3, r0
 8004990:	4642      	mov	r2, r8
 8004992:	189b      	adds	r3, r3, r2
 8004994:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004998:	464b      	mov	r3, r9
 800499a:	460a      	mov	r2, r1
 800499c:	eb42 0303 	adc.w	r3, r2, r3
 80049a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80049a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	67bb      	str	r3, [r7, #120]	@ 0x78
 80049ae:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80049b0:	f04f 0200 	mov.w	r2, #0
 80049b4:	f04f 0300 	mov.w	r3, #0
 80049b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80049bc:	4649      	mov	r1, r9
 80049be:	008b      	lsls	r3, r1, #2
 80049c0:	4641      	mov	r1, r8
 80049c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049c6:	4641      	mov	r1, r8
 80049c8:	008a      	lsls	r2, r1, #2
 80049ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80049ce:	f7fc f8eb 	bl	8000ba8 <__aeabi_uldivmod>
 80049d2:	4602      	mov	r2, r0
 80049d4:	460b      	mov	r3, r1
 80049d6:	4611      	mov	r1, r2
 80049d8:	4b38      	ldr	r3, [pc, #224]	@ (8004abc <UART_SetConfig+0x4e4>)
 80049da:	fba3 2301 	umull	r2, r3, r3, r1
 80049de:	095b      	lsrs	r3, r3, #5
 80049e0:	2264      	movs	r2, #100	@ 0x64
 80049e2:	fb02 f303 	mul.w	r3, r2, r3
 80049e6:	1acb      	subs	r3, r1, r3
 80049e8:	011b      	lsls	r3, r3, #4
 80049ea:	3332      	adds	r3, #50	@ 0x32
 80049ec:	4a33      	ldr	r2, [pc, #204]	@ (8004abc <UART_SetConfig+0x4e4>)
 80049ee:	fba2 2303 	umull	r2, r3, r2, r3
 80049f2:	095b      	lsrs	r3, r3, #5
 80049f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80049f8:	441c      	add	r4, r3
 80049fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049fe:	2200      	movs	r2, #0
 8004a00:	673b      	str	r3, [r7, #112]	@ 0x70
 8004a02:	677a      	str	r2, [r7, #116]	@ 0x74
 8004a04:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004a08:	4642      	mov	r2, r8
 8004a0a:	464b      	mov	r3, r9
 8004a0c:	1891      	adds	r1, r2, r2
 8004a0e:	60b9      	str	r1, [r7, #8]
 8004a10:	415b      	adcs	r3, r3
 8004a12:	60fb      	str	r3, [r7, #12]
 8004a14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a18:	4641      	mov	r1, r8
 8004a1a:	1851      	adds	r1, r2, r1
 8004a1c:	6039      	str	r1, [r7, #0]
 8004a1e:	4649      	mov	r1, r9
 8004a20:	414b      	adcs	r3, r1
 8004a22:	607b      	str	r3, [r7, #4]
 8004a24:	f04f 0200 	mov.w	r2, #0
 8004a28:	f04f 0300 	mov.w	r3, #0
 8004a2c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004a30:	4659      	mov	r1, fp
 8004a32:	00cb      	lsls	r3, r1, #3
 8004a34:	4651      	mov	r1, sl
 8004a36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a3a:	4651      	mov	r1, sl
 8004a3c:	00ca      	lsls	r2, r1, #3
 8004a3e:	4610      	mov	r0, r2
 8004a40:	4619      	mov	r1, r3
 8004a42:	4603      	mov	r3, r0
 8004a44:	4642      	mov	r2, r8
 8004a46:	189b      	adds	r3, r3, r2
 8004a48:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a4a:	464b      	mov	r3, r9
 8004a4c:	460a      	mov	r2, r1
 8004a4e:	eb42 0303 	adc.w	r3, r2, r3
 8004a52:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a5e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004a60:	f04f 0200 	mov.w	r2, #0
 8004a64:	f04f 0300 	mov.w	r3, #0
 8004a68:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004a6c:	4649      	mov	r1, r9
 8004a6e:	008b      	lsls	r3, r1, #2
 8004a70:	4641      	mov	r1, r8
 8004a72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a76:	4641      	mov	r1, r8
 8004a78:	008a      	lsls	r2, r1, #2
 8004a7a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004a7e:	f7fc f893 	bl	8000ba8 <__aeabi_uldivmod>
 8004a82:	4602      	mov	r2, r0
 8004a84:	460b      	mov	r3, r1
 8004a86:	4b0d      	ldr	r3, [pc, #52]	@ (8004abc <UART_SetConfig+0x4e4>)
 8004a88:	fba3 1302 	umull	r1, r3, r3, r2
 8004a8c:	095b      	lsrs	r3, r3, #5
 8004a8e:	2164      	movs	r1, #100	@ 0x64
 8004a90:	fb01 f303 	mul.w	r3, r1, r3
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	011b      	lsls	r3, r3, #4
 8004a98:	3332      	adds	r3, #50	@ 0x32
 8004a9a:	4a08      	ldr	r2, [pc, #32]	@ (8004abc <UART_SetConfig+0x4e4>)
 8004a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004aa0:	095b      	lsrs	r3, r3, #5
 8004aa2:	f003 020f 	and.w	r2, r3, #15
 8004aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4422      	add	r2, r4
 8004aae:	609a      	str	r2, [r3, #8]
}
 8004ab0:	bf00      	nop
 8004ab2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004abc:	51eb851f 	.word	0x51eb851f

08004ac0 <__cvt>:
 8004ac0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ac4:	ec57 6b10 	vmov	r6, r7, d0
 8004ac8:	2f00      	cmp	r7, #0
 8004aca:	460c      	mov	r4, r1
 8004acc:	4619      	mov	r1, r3
 8004ace:	463b      	mov	r3, r7
 8004ad0:	bfbb      	ittet	lt
 8004ad2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004ad6:	461f      	movlt	r7, r3
 8004ad8:	2300      	movge	r3, #0
 8004ada:	232d      	movlt	r3, #45	@ 0x2d
 8004adc:	700b      	strb	r3, [r1, #0]
 8004ade:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004ae0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004ae4:	4691      	mov	r9, r2
 8004ae6:	f023 0820 	bic.w	r8, r3, #32
 8004aea:	bfbc      	itt	lt
 8004aec:	4632      	movlt	r2, r6
 8004aee:	4616      	movlt	r6, r2
 8004af0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004af4:	d005      	beq.n	8004b02 <__cvt+0x42>
 8004af6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004afa:	d100      	bne.n	8004afe <__cvt+0x3e>
 8004afc:	3401      	adds	r4, #1
 8004afe:	2102      	movs	r1, #2
 8004b00:	e000      	b.n	8004b04 <__cvt+0x44>
 8004b02:	2103      	movs	r1, #3
 8004b04:	ab03      	add	r3, sp, #12
 8004b06:	9301      	str	r3, [sp, #4]
 8004b08:	ab02      	add	r3, sp, #8
 8004b0a:	9300      	str	r3, [sp, #0]
 8004b0c:	ec47 6b10 	vmov	d0, r6, r7
 8004b10:	4653      	mov	r3, sl
 8004b12:	4622      	mov	r2, r4
 8004b14:	f000 fea4 	bl	8005860 <_dtoa_r>
 8004b18:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004b1c:	4605      	mov	r5, r0
 8004b1e:	d119      	bne.n	8004b54 <__cvt+0x94>
 8004b20:	f019 0f01 	tst.w	r9, #1
 8004b24:	d00e      	beq.n	8004b44 <__cvt+0x84>
 8004b26:	eb00 0904 	add.w	r9, r0, r4
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	4630      	mov	r0, r6
 8004b30:	4639      	mov	r1, r7
 8004b32:	f7fb ffc9 	bl	8000ac8 <__aeabi_dcmpeq>
 8004b36:	b108      	cbz	r0, 8004b3c <__cvt+0x7c>
 8004b38:	f8cd 900c 	str.w	r9, [sp, #12]
 8004b3c:	2230      	movs	r2, #48	@ 0x30
 8004b3e:	9b03      	ldr	r3, [sp, #12]
 8004b40:	454b      	cmp	r3, r9
 8004b42:	d31e      	bcc.n	8004b82 <__cvt+0xc2>
 8004b44:	9b03      	ldr	r3, [sp, #12]
 8004b46:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004b48:	1b5b      	subs	r3, r3, r5
 8004b4a:	4628      	mov	r0, r5
 8004b4c:	6013      	str	r3, [r2, #0]
 8004b4e:	b004      	add	sp, #16
 8004b50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b54:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004b58:	eb00 0904 	add.w	r9, r0, r4
 8004b5c:	d1e5      	bne.n	8004b2a <__cvt+0x6a>
 8004b5e:	7803      	ldrb	r3, [r0, #0]
 8004b60:	2b30      	cmp	r3, #48	@ 0x30
 8004b62:	d10a      	bne.n	8004b7a <__cvt+0xba>
 8004b64:	2200      	movs	r2, #0
 8004b66:	2300      	movs	r3, #0
 8004b68:	4630      	mov	r0, r6
 8004b6a:	4639      	mov	r1, r7
 8004b6c:	f7fb ffac 	bl	8000ac8 <__aeabi_dcmpeq>
 8004b70:	b918      	cbnz	r0, 8004b7a <__cvt+0xba>
 8004b72:	f1c4 0401 	rsb	r4, r4, #1
 8004b76:	f8ca 4000 	str.w	r4, [sl]
 8004b7a:	f8da 3000 	ldr.w	r3, [sl]
 8004b7e:	4499      	add	r9, r3
 8004b80:	e7d3      	b.n	8004b2a <__cvt+0x6a>
 8004b82:	1c59      	adds	r1, r3, #1
 8004b84:	9103      	str	r1, [sp, #12]
 8004b86:	701a      	strb	r2, [r3, #0]
 8004b88:	e7d9      	b.n	8004b3e <__cvt+0x7e>

08004b8a <__exponent>:
 8004b8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b8c:	2900      	cmp	r1, #0
 8004b8e:	bfba      	itte	lt
 8004b90:	4249      	neglt	r1, r1
 8004b92:	232d      	movlt	r3, #45	@ 0x2d
 8004b94:	232b      	movge	r3, #43	@ 0x2b
 8004b96:	2909      	cmp	r1, #9
 8004b98:	7002      	strb	r2, [r0, #0]
 8004b9a:	7043      	strb	r3, [r0, #1]
 8004b9c:	dd29      	ble.n	8004bf2 <__exponent+0x68>
 8004b9e:	f10d 0307 	add.w	r3, sp, #7
 8004ba2:	461d      	mov	r5, r3
 8004ba4:	270a      	movs	r7, #10
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	fbb1 f6f7 	udiv	r6, r1, r7
 8004bac:	fb07 1416 	mls	r4, r7, r6, r1
 8004bb0:	3430      	adds	r4, #48	@ 0x30
 8004bb2:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004bb6:	460c      	mov	r4, r1
 8004bb8:	2c63      	cmp	r4, #99	@ 0x63
 8004bba:	f103 33ff 	add.w	r3, r3, #4294967295
 8004bbe:	4631      	mov	r1, r6
 8004bc0:	dcf1      	bgt.n	8004ba6 <__exponent+0x1c>
 8004bc2:	3130      	adds	r1, #48	@ 0x30
 8004bc4:	1e94      	subs	r4, r2, #2
 8004bc6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004bca:	1c41      	adds	r1, r0, #1
 8004bcc:	4623      	mov	r3, r4
 8004bce:	42ab      	cmp	r3, r5
 8004bd0:	d30a      	bcc.n	8004be8 <__exponent+0x5e>
 8004bd2:	f10d 0309 	add.w	r3, sp, #9
 8004bd6:	1a9b      	subs	r3, r3, r2
 8004bd8:	42ac      	cmp	r4, r5
 8004bda:	bf88      	it	hi
 8004bdc:	2300      	movhi	r3, #0
 8004bde:	3302      	adds	r3, #2
 8004be0:	4403      	add	r3, r0
 8004be2:	1a18      	subs	r0, r3, r0
 8004be4:	b003      	add	sp, #12
 8004be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004be8:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004bec:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004bf0:	e7ed      	b.n	8004bce <__exponent+0x44>
 8004bf2:	2330      	movs	r3, #48	@ 0x30
 8004bf4:	3130      	adds	r1, #48	@ 0x30
 8004bf6:	7083      	strb	r3, [r0, #2]
 8004bf8:	70c1      	strb	r1, [r0, #3]
 8004bfa:	1d03      	adds	r3, r0, #4
 8004bfc:	e7f1      	b.n	8004be2 <__exponent+0x58>
	...

08004c00 <_printf_float>:
 8004c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c04:	b08d      	sub	sp, #52	@ 0x34
 8004c06:	460c      	mov	r4, r1
 8004c08:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004c0c:	4616      	mov	r6, r2
 8004c0e:	461f      	mov	r7, r3
 8004c10:	4605      	mov	r5, r0
 8004c12:	f000 fd17 	bl	8005644 <_localeconv_r>
 8004c16:	6803      	ldr	r3, [r0, #0]
 8004c18:	9304      	str	r3, [sp, #16]
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f7fb fb28 	bl	8000270 <strlen>
 8004c20:	2300      	movs	r3, #0
 8004c22:	930a      	str	r3, [sp, #40]	@ 0x28
 8004c24:	f8d8 3000 	ldr.w	r3, [r8]
 8004c28:	9005      	str	r0, [sp, #20]
 8004c2a:	3307      	adds	r3, #7
 8004c2c:	f023 0307 	bic.w	r3, r3, #7
 8004c30:	f103 0208 	add.w	r2, r3, #8
 8004c34:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004c38:	f8d4 b000 	ldr.w	fp, [r4]
 8004c3c:	f8c8 2000 	str.w	r2, [r8]
 8004c40:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004c44:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004c48:	9307      	str	r3, [sp, #28]
 8004c4a:	f8cd 8018 	str.w	r8, [sp, #24]
 8004c4e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004c52:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004c56:	4b9c      	ldr	r3, [pc, #624]	@ (8004ec8 <_printf_float+0x2c8>)
 8004c58:	f04f 32ff 	mov.w	r2, #4294967295
 8004c5c:	f7fb ff66 	bl	8000b2c <__aeabi_dcmpun>
 8004c60:	bb70      	cbnz	r0, 8004cc0 <_printf_float+0xc0>
 8004c62:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004c66:	4b98      	ldr	r3, [pc, #608]	@ (8004ec8 <_printf_float+0x2c8>)
 8004c68:	f04f 32ff 	mov.w	r2, #4294967295
 8004c6c:	f7fb ff40 	bl	8000af0 <__aeabi_dcmple>
 8004c70:	bb30      	cbnz	r0, 8004cc0 <_printf_float+0xc0>
 8004c72:	2200      	movs	r2, #0
 8004c74:	2300      	movs	r3, #0
 8004c76:	4640      	mov	r0, r8
 8004c78:	4649      	mov	r1, r9
 8004c7a:	f7fb ff2f 	bl	8000adc <__aeabi_dcmplt>
 8004c7e:	b110      	cbz	r0, 8004c86 <_printf_float+0x86>
 8004c80:	232d      	movs	r3, #45	@ 0x2d
 8004c82:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c86:	4a91      	ldr	r2, [pc, #580]	@ (8004ecc <_printf_float+0x2cc>)
 8004c88:	4b91      	ldr	r3, [pc, #580]	@ (8004ed0 <_printf_float+0x2d0>)
 8004c8a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004c8e:	bf94      	ite	ls
 8004c90:	4690      	movls	r8, r2
 8004c92:	4698      	movhi	r8, r3
 8004c94:	2303      	movs	r3, #3
 8004c96:	6123      	str	r3, [r4, #16]
 8004c98:	f02b 0304 	bic.w	r3, fp, #4
 8004c9c:	6023      	str	r3, [r4, #0]
 8004c9e:	f04f 0900 	mov.w	r9, #0
 8004ca2:	9700      	str	r7, [sp, #0]
 8004ca4:	4633      	mov	r3, r6
 8004ca6:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004ca8:	4621      	mov	r1, r4
 8004caa:	4628      	mov	r0, r5
 8004cac:	f000 f9d2 	bl	8005054 <_printf_common>
 8004cb0:	3001      	adds	r0, #1
 8004cb2:	f040 808d 	bne.w	8004dd0 <_printf_float+0x1d0>
 8004cb6:	f04f 30ff 	mov.w	r0, #4294967295
 8004cba:	b00d      	add	sp, #52	@ 0x34
 8004cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cc0:	4642      	mov	r2, r8
 8004cc2:	464b      	mov	r3, r9
 8004cc4:	4640      	mov	r0, r8
 8004cc6:	4649      	mov	r1, r9
 8004cc8:	f7fb ff30 	bl	8000b2c <__aeabi_dcmpun>
 8004ccc:	b140      	cbz	r0, 8004ce0 <_printf_float+0xe0>
 8004cce:	464b      	mov	r3, r9
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	bfbc      	itt	lt
 8004cd4:	232d      	movlt	r3, #45	@ 0x2d
 8004cd6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004cda:	4a7e      	ldr	r2, [pc, #504]	@ (8004ed4 <_printf_float+0x2d4>)
 8004cdc:	4b7e      	ldr	r3, [pc, #504]	@ (8004ed8 <_printf_float+0x2d8>)
 8004cde:	e7d4      	b.n	8004c8a <_printf_float+0x8a>
 8004ce0:	6863      	ldr	r3, [r4, #4]
 8004ce2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004ce6:	9206      	str	r2, [sp, #24]
 8004ce8:	1c5a      	adds	r2, r3, #1
 8004cea:	d13b      	bne.n	8004d64 <_printf_float+0x164>
 8004cec:	2306      	movs	r3, #6
 8004cee:	6063      	str	r3, [r4, #4]
 8004cf0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	6022      	str	r2, [r4, #0]
 8004cf8:	9303      	str	r3, [sp, #12]
 8004cfa:	ab0a      	add	r3, sp, #40	@ 0x28
 8004cfc:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004d00:	ab09      	add	r3, sp, #36	@ 0x24
 8004d02:	9300      	str	r3, [sp, #0]
 8004d04:	6861      	ldr	r1, [r4, #4]
 8004d06:	ec49 8b10 	vmov	d0, r8, r9
 8004d0a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004d0e:	4628      	mov	r0, r5
 8004d10:	f7ff fed6 	bl	8004ac0 <__cvt>
 8004d14:	9b06      	ldr	r3, [sp, #24]
 8004d16:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004d18:	2b47      	cmp	r3, #71	@ 0x47
 8004d1a:	4680      	mov	r8, r0
 8004d1c:	d129      	bne.n	8004d72 <_printf_float+0x172>
 8004d1e:	1cc8      	adds	r0, r1, #3
 8004d20:	db02      	blt.n	8004d28 <_printf_float+0x128>
 8004d22:	6863      	ldr	r3, [r4, #4]
 8004d24:	4299      	cmp	r1, r3
 8004d26:	dd41      	ble.n	8004dac <_printf_float+0x1ac>
 8004d28:	f1aa 0a02 	sub.w	sl, sl, #2
 8004d2c:	fa5f fa8a 	uxtb.w	sl, sl
 8004d30:	3901      	subs	r1, #1
 8004d32:	4652      	mov	r2, sl
 8004d34:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004d38:	9109      	str	r1, [sp, #36]	@ 0x24
 8004d3a:	f7ff ff26 	bl	8004b8a <__exponent>
 8004d3e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004d40:	1813      	adds	r3, r2, r0
 8004d42:	2a01      	cmp	r2, #1
 8004d44:	4681      	mov	r9, r0
 8004d46:	6123      	str	r3, [r4, #16]
 8004d48:	dc02      	bgt.n	8004d50 <_printf_float+0x150>
 8004d4a:	6822      	ldr	r2, [r4, #0]
 8004d4c:	07d2      	lsls	r2, r2, #31
 8004d4e:	d501      	bpl.n	8004d54 <_printf_float+0x154>
 8004d50:	3301      	adds	r3, #1
 8004d52:	6123      	str	r3, [r4, #16]
 8004d54:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d0a2      	beq.n	8004ca2 <_printf_float+0xa2>
 8004d5c:	232d      	movs	r3, #45	@ 0x2d
 8004d5e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d62:	e79e      	b.n	8004ca2 <_printf_float+0xa2>
 8004d64:	9a06      	ldr	r2, [sp, #24]
 8004d66:	2a47      	cmp	r2, #71	@ 0x47
 8004d68:	d1c2      	bne.n	8004cf0 <_printf_float+0xf0>
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d1c0      	bne.n	8004cf0 <_printf_float+0xf0>
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e7bd      	b.n	8004cee <_printf_float+0xee>
 8004d72:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004d76:	d9db      	bls.n	8004d30 <_printf_float+0x130>
 8004d78:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004d7c:	d118      	bne.n	8004db0 <_printf_float+0x1b0>
 8004d7e:	2900      	cmp	r1, #0
 8004d80:	6863      	ldr	r3, [r4, #4]
 8004d82:	dd0b      	ble.n	8004d9c <_printf_float+0x19c>
 8004d84:	6121      	str	r1, [r4, #16]
 8004d86:	b913      	cbnz	r3, 8004d8e <_printf_float+0x18e>
 8004d88:	6822      	ldr	r2, [r4, #0]
 8004d8a:	07d0      	lsls	r0, r2, #31
 8004d8c:	d502      	bpl.n	8004d94 <_printf_float+0x194>
 8004d8e:	3301      	adds	r3, #1
 8004d90:	440b      	add	r3, r1
 8004d92:	6123      	str	r3, [r4, #16]
 8004d94:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004d96:	f04f 0900 	mov.w	r9, #0
 8004d9a:	e7db      	b.n	8004d54 <_printf_float+0x154>
 8004d9c:	b913      	cbnz	r3, 8004da4 <_printf_float+0x1a4>
 8004d9e:	6822      	ldr	r2, [r4, #0]
 8004da0:	07d2      	lsls	r2, r2, #31
 8004da2:	d501      	bpl.n	8004da8 <_printf_float+0x1a8>
 8004da4:	3302      	adds	r3, #2
 8004da6:	e7f4      	b.n	8004d92 <_printf_float+0x192>
 8004da8:	2301      	movs	r3, #1
 8004daa:	e7f2      	b.n	8004d92 <_printf_float+0x192>
 8004dac:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004db0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004db2:	4299      	cmp	r1, r3
 8004db4:	db05      	blt.n	8004dc2 <_printf_float+0x1c2>
 8004db6:	6823      	ldr	r3, [r4, #0]
 8004db8:	6121      	str	r1, [r4, #16]
 8004dba:	07d8      	lsls	r0, r3, #31
 8004dbc:	d5ea      	bpl.n	8004d94 <_printf_float+0x194>
 8004dbe:	1c4b      	adds	r3, r1, #1
 8004dc0:	e7e7      	b.n	8004d92 <_printf_float+0x192>
 8004dc2:	2900      	cmp	r1, #0
 8004dc4:	bfd4      	ite	le
 8004dc6:	f1c1 0202 	rsble	r2, r1, #2
 8004dca:	2201      	movgt	r2, #1
 8004dcc:	4413      	add	r3, r2
 8004dce:	e7e0      	b.n	8004d92 <_printf_float+0x192>
 8004dd0:	6823      	ldr	r3, [r4, #0]
 8004dd2:	055a      	lsls	r2, r3, #21
 8004dd4:	d407      	bmi.n	8004de6 <_printf_float+0x1e6>
 8004dd6:	6923      	ldr	r3, [r4, #16]
 8004dd8:	4642      	mov	r2, r8
 8004dda:	4631      	mov	r1, r6
 8004ddc:	4628      	mov	r0, r5
 8004dde:	47b8      	blx	r7
 8004de0:	3001      	adds	r0, #1
 8004de2:	d12b      	bne.n	8004e3c <_printf_float+0x23c>
 8004de4:	e767      	b.n	8004cb6 <_printf_float+0xb6>
 8004de6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004dea:	f240 80dd 	bls.w	8004fa8 <_printf_float+0x3a8>
 8004dee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004df2:	2200      	movs	r2, #0
 8004df4:	2300      	movs	r3, #0
 8004df6:	f7fb fe67 	bl	8000ac8 <__aeabi_dcmpeq>
 8004dfa:	2800      	cmp	r0, #0
 8004dfc:	d033      	beq.n	8004e66 <_printf_float+0x266>
 8004dfe:	4a37      	ldr	r2, [pc, #220]	@ (8004edc <_printf_float+0x2dc>)
 8004e00:	2301      	movs	r3, #1
 8004e02:	4631      	mov	r1, r6
 8004e04:	4628      	mov	r0, r5
 8004e06:	47b8      	blx	r7
 8004e08:	3001      	adds	r0, #1
 8004e0a:	f43f af54 	beq.w	8004cb6 <_printf_float+0xb6>
 8004e0e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004e12:	4543      	cmp	r3, r8
 8004e14:	db02      	blt.n	8004e1c <_printf_float+0x21c>
 8004e16:	6823      	ldr	r3, [r4, #0]
 8004e18:	07d8      	lsls	r0, r3, #31
 8004e1a:	d50f      	bpl.n	8004e3c <_printf_float+0x23c>
 8004e1c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e20:	4631      	mov	r1, r6
 8004e22:	4628      	mov	r0, r5
 8004e24:	47b8      	blx	r7
 8004e26:	3001      	adds	r0, #1
 8004e28:	f43f af45 	beq.w	8004cb6 <_printf_float+0xb6>
 8004e2c:	f04f 0900 	mov.w	r9, #0
 8004e30:	f108 38ff 	add.w	r8, r8, #4294967295
 8004e34:	f104 0a1a 	add.w	sl, r4, #26
 8004e38:	45c8      	cmp	r8, r9
 8004e3a:	dc09      	bgt.n	8004e50 <_printf_float+0x250>
 8004e3c:	6823      	ldr	r3, [r4, #0]
 8004e3e:	079b      	lsls	r3, r3, #30
 8004e40:	f100 8103 	bmi.w	800504a <_printf_float+0x44a>
 8004e44:	68e0      	ldr	r0, [r4, #12]
 8004e46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004e48:	4298      	cmp	r0, r3
 8004e4a:	bfb8      	it	lt
 8004e4c:	4618      	movlt	r0, r3
 8004e4e:	e734      	b.n	8004cba <_printf_float+0xba>
 8004e50:	2301      	movs	r3, #1
 8004e52:	4652      	mov	r2, sl
 8004e54:	4631      	mov	r1, r6
 8004e56:	4628      	mov	r0, r5
 8004e58:	47b8      	blx	r7
 8004e5a:	3001      	adds	r0, #1
 8004e5c:	f43f af2b 	beq.w	8004cb6 <_printf_float+0xb6>
 8004e60:	f109 0901 	add.w	r9, r9, #1
 8004e64:	e7e8      	b.n	8004e38 <_printf_float+0x238>
 8004e66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	dc39      	bgt.n	8004ee0 <_printf_float+0x2e0>
 8004e6c:	4a1b      	ldr	r2, [pc, #108]	@ (8004edc <_printf_float+0x2dc>)
 8004e6e:	2301      	movs	r3, #1
 8004e70:	4631      	mov	r1, r6
 8004e72:	4628      	mov	r0, r5
 8004e74:	47b8      	blx	r7
 8004e76:	3001      	adds	r0, #1
 8004e78:	f43f af1d 	beq.w	8004cb6 <_printf_float+0xb6>
 8004e7c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004e80:	ea59 0303 	orrs.w	r3, r9, r3
 8004e84:	d102      	bne.n	8004e8c <_printf_float+0x28c>
 8004e86:	6823      	ldr	r3, [r4, #0]
 8004e88:	07d9      	lsls	r1, r3, #31
 8004e8a:	d5d7      	bpl.n	8004e3c <_printf_float+0x23c>
 8004e8c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e90:	4631      	mov	r1, r6
 8004e92:	4628      	mov	r0, r5
 8004e94:	47b8      	blx	r7
 8004e96:	3001      	adds	r0, #1
 8004e98:	f43f af0d 	beq.w	8004cb6 <_printf_float+0xb6>
 8004e9c:	f04f 0a00 	mov.w	sl, #0
 8004ea0:	f104 0b1a 	add.w	fp, r4, #26
 8004ea4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ea6:	425b      	negs	r3, r3
 8004ea8:	4553      	cmp	r3, sl
 8004eaa:	dc01      	bgt.n	8004eb0 <_printf_float+0x2b0>
 8004eac:	464b      	mov	r3, r9
 8004eae:	e793      	b.n	8004dd8 <_printf_float+0x1d8>
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	465a      	mov	r2, fp
 8004eb4:	4631      	mov	r1, r6
 8004eb6:	4628      	mov	r0, r5
 8004eb8:	47b8      	blx	r7
 8004eba:	3001      	adds	r0, #1
 8004ebc:	f43f aefb 	beq.w	8004cb6 <_printf_float+0xb6>
 8004ec0:	f10a 0a01 	add.w	sl, sl, #1
 8004ec4:	e7ee      	b.n	8004ea4 <_printf_float+0x2a4>
 8004ec6:	bf00      	nop
 8004ec8:	7fefffff 	.word	0x7fefffff
 8004ecc:	08007f1c 	.word	0x08007f1c
 8004ed0:	08007f20 	.word	0x08007f20
 8004ed4:	08007f24 	.word	0x08007f24
 8004ed8:	08007f28 	.word	0x08007f28
 8004edc:	08007f2c 	.word	0x08007f2c
 8004ee0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004ee2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004ee6:	4553      	cmp	r3, sl
 8004ee8:	bfa8      	it	ge
 8004eea:	4653      	movge	r3, sl
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	4699      	mov	r9, r3
 8004ef0:	dc36      	bgt.n	8004f60 <_printf_float+0x360>
 8004ef2:	f04f 0b00 	mov.w	fp, #0
 8004ef6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004efa:	f104 021a 	add.w	r2, r4, #26
 8004efe:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004f00:	9306      	str	r3, [sp, #24]
 8004f02:	eba3 0309 	sub.w	r3, r3, r9
 8004f06:	455b      	cmp	r3, fp
 8004f08:	dc31      	bgt.n	8004f6e <_printf_float+0x36e>
 8004f0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f0c:	459a      	cmp	sl, r3
 8004f0e:	dc3a      	bgt.n	8004f86 <_printf_float+0x386>
 8004f10:	6823      	ldr	r3, [r4, #0]
 8004f12:	07da      	lsls	r2, r3, #31
 8004f14:	d437      	bmi.n	8004f86 <_printf_float+0x386>
 8004f16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f18:	ebaa 0903 	sub.w	r9, sl, r3
 8004f1c:	9b06      	ldr	r3, [sp, #24]
 8004f1e:	ebaa 0303 	sub.w	r3, sl, r3
 8004f22:	4599      	cmp	r9, r3
 8004f24:	bfa8      	it	ge
 8004f26:	4699      	movge	r9, r3
 8004f28:	f1b9 0f00 	cmp.w	r9, #0
 8004f2c:	dc33      	bgt.n	8004f96 <_printf_float+0x396>
 8004f2e:	f04f 0800 	mov.w	r8, #0
 8004f32:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004f36:	f104 0b1a 	add.w	fp, r4, #26
 8004f3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f3c:	ebaa 0303 	sub.w	r3, sl, r3
 8004f40:	eba3 0309 	sub.w	r3, r3, r9
 8004f44:	4543      	cmp	r3, r8
 8004f46:	f77f af79 	ble.w	8004e3c <_printf_float+0x23c>
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	465a      	mov	r2, fp
 8004f4e:	4631      	mov	r1, r6
 8004f50:	4628      	mov	r0, r5
 8004f52:	47b8      	blx	r7
 8004f54:	3001      	adds	r0, #1
 8004f56:	f43f aeae 	beq.w	8004cb6 <_printf_float+0xb6>
 8004f5a:	f108 0801 	add.w	r8, r8, #1
 8004f5e:	e7ec      	b.n	8004f3a <_printf_float+0x33a>
 8004f60:	4642      	mov	r2, r8
 8004f62:	4631      	mov	r1, r6
 8004f64:	4628      	mov	r0, r5
 8004f66:	47b8      	blx	r7
 8004f68:	3001      	adds	r0, #1
 8004f6a:	d1c2      	bne.n	8004ef2 <_printf_float+0x2f2>
 8004f6c:	e6a3      	b.n	8004cb6 <_printf_float+0xb6>
 8004f6e:	2301      	movs	r3, #1
 8004f70:	4631      	mov	r1, r6
 8004f72:	4628      	mov	r0, r5
 8004f74:	9206      	str	r2, [sp, #24]
 8004f76:	47b8      	blx	r7
 8004f78:	3001      	adds	r0, #1
 8004f7a:	f43f ae9c 	beq.w	8004cb6 <_printf_float+0xb6>
 8004f7e:	9a06      	ldr	r2, [sp, #24]
 8004f80:	f10b 0b01 	add.w	fp, fp, #1
 8004f84:	e7bb      	b.n	8004efe <_printf_float+0x2fe>
 8004f86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f8a:	4631      	mov	r1, r6
 8004f8c:	4628      	mov	r0, r5
 8004f8e:	47b8      	blx	r7
 8004f90:	3001      	adds	r0, #1
 8004f92:	d1c0      	bne.n	8004f16 <_printf_float+0x316>
 8004f94:	e68f      	b.n	8004cb6 <_printf_float+0xb6>
 8004f96:	9a06      	ldr	r2, [sp, #24]
 8004f98:	464b      	mov	r3, r9
 8004f9a:	4442      	add	r2, r8
 8004f9c:	4631      	mov	r1, r6
 8004f9e:	4628      	mov	r0, r5
 8004fa0:	47b8      	blx	r7
 8004fa2:	3001      	adds	r0, #1
 8004fa4:	d1c3      	bne.n	8004f2e <_printf_float+0x32e>
 8004fa6:	e686      	b.n	8004cb6 <_printf_float+0xb6>
 8004fa8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004fac:	f1ba 0f01 	cmp.w	sl, #1
 8004fb0:	dc01      	bgt.n	8004fb6 <_printf_float+0x3b6>
 8004fb2:	07db      	lsls	r3, r3, #31
 8004fb4:	d536      	bpl.n	8005024 <_printf_float+0x424>
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	4642      	mov	r2, r8
 8004fba:	4631      	mov	r1, r6
 8004fbc:	4628      	mov	r0, r5
 8004fbe:	47b8      	blx	r7
 8004fc0:	3001      	adds	r0, #1
 8004fc2:	f43f ae78 	beq.w	8004cb6 <_printf_float+0xb6>
 8004fc6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004fca:	4631      	mov	r1, r6
 8004fcc:	4628      	mov	r0, r5
 8004fce:	47b8      	blx	r7
 8004fd0:	3001      	adds	r0, #1
 8004fd2:	f43f ae70 	beq.w	8004cb6 <_printf_float+0xb6>
 8004fd6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004fda:	2200      	movs	r2, #0
 8004fdc:	2300      	movs	r3, #0
 8004fde:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004fe2:	f7fb fd71 	bl	8000ac8 <__aeabi_dcmpeq>
 8004fe6:	b9c0      	cbnz	r0, 800501a <_printf_float+0x41a>
 8004fe8:	4653      	mov	r3, sl
 8004fea:	f108 0201 	add.w	r2, r8, #1
 8004fee:	4631      	mov	r1, r6
 8004ff0:	4628      	mov	r0, r5
 8004ff2:	47b8      	blx	r7
 8004ff4:	3001      	adds	r0, #1
 8004ff6:	d10c      	bne.n	8005012 <_printf_float+0x412>
 8004ff8:	e65d      	b.n	8004cb6 <_printf_float+0xb6>
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	465a      	mov	r2, fp
 8004ffe:	4631      	mov	r1, r6
 8005000:	4628      	mov	r0, r5
 8005002:	47b8      	blx	r7
 8005004:	3001      	adds	r0, #1
 8005006:	f43f ae56 	beq.w	8004cb6 <_printf_float+0xb6>
 800500a:	f108 0801 	add.w	r8, r8, #1
 800500e:	45d0      	cmp	r8, sl
 8005010:	dbf3      	blt.n	8004ffa <_printf_float+0x3fa>
 8005012:	464b      	mov	r3, r9
 8005014:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005018:	e6df      	b.n	8004dda <_printf_float+0x1da>
 800501a:	f04f 0800 	mov.w	r8, #0
 800501e:	f104 0b1a 	add.w	fp, r4, #26
 8005022:	e7f4      	b.n	800500e <_printf_float+0x40e>
 8005024:	2301      	movs	r3, #1
 8005026:	4642      	mov	r2, r8
 8005028:	e7e1      	b.n	8004fee <_printf_float+0x3ee>
 800502a:	2301      	movs	r3, #1
 800502c:	464a      	mov	r2, r9
 800502e:	4631      	mov	r1, r6
 8005030:	4628      	mov	r0, r5
 8005032:	47b8      	blx	r7
 8005034:	3001      	adds	r0, #1
 8005036:	f43f ae3e 	beq.w	8004cb6 <_printf_float+0xb6>
 800503a:	f108 0801 	add.w	r8, r8, #1
 800503e:	68e3      	ldr	r3, [r4, #12]
 8005040:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005042:	1a5b      	subs	r3, r3, r1
 8005044:	4543      	cmp	r3, r8
 8005046:	dcf0      	bgt.n	800502a <_printf_float+0x42a>
 8005048:	e6fc      	b.n	8004e44 <_printf_float+0x244>
 800504a:	f04f 0800 	mov.w	r8, #0
 800504e:	f104 0919 	add.w	r9, r4, #25
 8005052:	e7f4      	b.n	800503e <_printf_float+0x43e>

08005054 <_printf_common>:
 8005054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005058:	4616      	mov	r6, r2
 800505a:	4698      	mov	r8, r3
 800505c:	688a      	ldr	r2, [r1, #8]
 800505e:	690b      	ldr	r3, [r1, #16]
 8005060:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005064:	4293      	cmp	r3, r2
 8005066:	bfb8      	it	lt
 8005068:	4613      	movlt	r3, r2
 800506a:	6033      	str	r3, [r6, #0]
 800506c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005070:	4607      	mov	r7, r0
 8005072:	460c      	mov	r4, r1
 8005074:	b10a      	cbz	r2, 800507a <_printf_common+0x26>
 8005076:	3301      	adds	r3, #1
 8005078:	6033      	str	r3, [r6, #0]
 800507a:	6823      	ldr	r3, [r4, #0]
 800507c:	0699      	lsls	r1, r3, #26
 800507e:	bf42      	ittt	mi
 8005080:	6833      	ldrmi	r3, [r6, #0]
 8005082:	3302      	addmi	r3, #2
 8005084:	6033      	strmi	r3, [r6, #0]
 8005086:	6825      	ldr	r5, [r4, #0]
 8005088:	f015 0506 	ands.w	r5, r5, #6
 800508c:	d106      	bne.n	800509c <_printf_common+0x48>
 800508e:	f104 0a19 	add.w	sl, r4, #25
 8005092:	68e3      	ldr	r3, [r4, #12]
 8005094:	6832      	ldr	r2, [r6, #0]
 8005096:	1a9b      	subs	r3, r3, r2
 8005098:	42ab      	cmp	r3, r5
 800509a:	dc26      	bgt.n	80050ea <_printf_common+0x96>
 800509c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80050a0:	6822      	ldr	r2, [r4, #0]
 80050a2:	3b00      	subs	r3, #0
 80050a4:	bf18      	it	ne
 80050a6:	2301      	movne	r3, #1
 80050a8:	0692      	lsls	r2, r2, #26
 80050aa:	d42b      	bmi.n	8005104 <_printf_common+0xb0>
 80050ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80050b0:	4641      	mov	r1, r8
 80050b2:	4638      	mov	r0, r7
 80050b4:	47c8      	blx	r9
 80050b6:	3001      	adds	r0, #1
 80050b8:	d01e      	beq.n	80050f8 <_printf_common+0xa4>
 80050ba:	6823      	ldr	r3, [r4, #0]
 80050bc:	6922      	ldr	r2, [r4, #16]
 80050be:	f003 0306 	and.w	r3, r3, #6
 80050c2:	2b04      	cmp	r3, #4
 80050c4:	bf02      	ittt	eq
 80050c6:	68e5      	ldreq	r5, [r4, #12]
 80050c8:	6833      	ldreq	r3, [r6, #0]
 80050ca:	1aed      	subeq	r5, r5, r3
 80050cc:	68a3      	ldr	r3, [r4, #8]
 80050ce:	bf0c      	ite	eq
 80050d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050d4:	2500      	movne	r5, #0
 80050d6:	4293      	cmp	r3, r2
 80050d8:	bfc4      	itt	gt
 80050da:	1a9b      	subgt	r3, r3, r2
 80050dc:	18ed      	addgt	r5, r5, r3
 80050de:	2600      	movs	r6, #0
 80050e0:	341a      	adds	r4, #26
 80050e2:	42b5      	cmp	r5, r6
 80050e4:	d11a      	bne.n	800511c <_printf_common+0xc8>
 80050e6:	2000      	movs	r0, #0
 80050e8:	e008      	b.n	80050fc <_printf_common+0xa8>
 80050ea:	2301      	movs	r3, #1
 80050ec:	4652      	mov	r2, sl
 80050ee:	4641      	mov	r1, r8
 80050f0:	4638      	mov	r0, r7
 80050f2:	47c8      	blx	r9
 80050f4:	3001      	adds	r0, #1
 80050f6:	d103      	bne.n	8005100 <_printf_common+0xac>
 80050f8:	f04f 30ff 	mov.w	r0, #4294967295
 80050fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005100:	3501      	adds	r5, #1
 8005102:	e7c6      	b.n	8005092 <_printf_common+0x3e>
 8005104:	18e1      	adds	r1, r4, r3
 8005106:	1c5a      	adds	r2, r3, #1
 8005108:	2030      	movs	r0, #48	@ 0x30
 800510a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800510e:	4422      	add	r2, r4
 8005110:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005114:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005118:	3302      	adds	r3, #2
 800511a:	e7c7      	b.n	80050ac <_printf_common+0x58>
 800511c:	2301      	movs	r3, #1
 800511e:	4622      	mov	r2, r4
 8005120:	4641      	mov	r1, r8
 8005122:	4638      	mov	r0, r7
 8005124:	47c8      	blx	r9
 8005126:	3001      	adds	r0, #1
 8005128:	d0e6      	beq.n	80050f8 <_printf_common+0xa4>
 800512a:	3601      	adds	r6, #1
 800512c:	e7d9      	b.n	80050e2 <_printf_common+0x8e>
	...

08005130 <_printf_i>:
 8005130:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005134:	7e0f      	ldrb	r7, [r1, #24]
 8005136:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005138:	2f78      	cmp	r7, #120	@ 0x78
 800513a:	4691      	mov	r9, r2
 800513c:	4680      	mov	r8, r0
 800513e:	460c      	mov	r4, r1
 8005140:	469a      	mov	sl, r3
 8005142:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005146:	d807      	bhi.n	8005158 <_printf_i+0x28>
 8005148:	2f62      	cmp	r7, #98	@ 0x62
 800514a:	d80a      	bhi.n	8005162 <_printf_i+0x32>
 800514c:	2f00      	cmp	r7, #0
 800514e:	f000 80d2 	beq.w	80052f6 <_printf_i+0x1c6>
 8005152:	2f58      	cmp	r7, #88	@ 0x58
 8005154:	f000 80b9 	beq.w	80052ca <_printf_i+0x19a>
 8005158:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800515c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005160:	e03a      	b.n	80051d8 <_printf_i+0xa8>
 8005162:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005166:	2b15      	cmp	r3, #21
 8005168:	d8f6      	bhi.n	8005158 <_printf_i+0x28>
 800516a:	a101      	add	r1, pc, #4	@ (adr r1, 8005170 <_printf_i+0x40>)
 800516c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005170:	080051c9 	.word	0x080051c9
 8005174:	080051dd 	.word	0x080051dd
 8005178:	08005159 	.word	0x08005159
 800517c:	08005159 	.word	0x08005159
 8005180:	08005159 	.word	0x08005159
 8005184:	08005159 	.word	0x08005159
 8005188:	080051dd 	.word	0x080051dd
 800518c:	08005159 	.word	0x08005159
 8005190:	08005159 	.word	0x08005159
 8005194:	08005159 	.word	0x08005159
 8005198:	08005159 	.word	0x08005159
 800519c:	080052dd 	.word	0x080052dd
 80051a0:	08005207 	.word	0x08005207
 80051a4:	08005297 	.word	0x08005297
 80051a8:	08005159 	.word	0x08005159
 80051ac:	08005159 	.word	0x08005159
 80051b0:	080052ff 	.word	0x080052ff
 80051b4:	08005159 	.word	0x08005159
 80051b8:	08005207 	.word	0x08005207
 80051bc:	08005159 	.word	0x08005159
 80051c0:	08005159 	.word	0x08005159
 80051c4:	0800529f 	.word	0x0800529f
 80051c8:	6833      	ldr	r3, [r6, #0]
 80051ca:	1d1a      	adds	r2, r3, #4
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	6032      	str	r2, [r6, #0]
 80051d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80051d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80051d8:	2301      	movs	r3, #1
 80051da:	e09d      	b.n	8005318 <_printf_i+0x1e8>
 80051dc:	6833      	ldr	r3, [r6, #0]
 80051de:	6820      	ldr	r0, [r4, #0]
 80051e0:	1d19      	adds	r1, r3, #4
 80051e2:	6031      	str	r1, [r6, #0]
 80051e4:	0606      	lsls	r6, r0, #24
 80051e6:	d501      	bpl.n	80051ec <_printf_i+0xbc>
 80051e8:	681d      	ldr	r5, [r3, #0]
 80051ea:	e003      	b.n	80051f4 <_printf_i+0xc4>
 80051ec:	0645      	lsls	r5, r0, #25
 80051ee:	d5fb      	bpl.n	80051e8 <_printf_i+0xb8>
 80051f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80051f4:	2d00      	cmp	r5, #0
 80051f6:	da03      	bge.n	8005200 <_printf_i+0xd0>
 80051f8:	232d      	movs	r3, #45	@ 0x2d
 80051fa:	426d      	negs	r5, r5
 80051fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005200:	4859      	ldr	r0, [pc, #356]	@ (8005368 <_printf_i+0x238>)
 8005202:	230a      	movs	r3, #10
 8005204:	e011      	b.n	800522a <_printf_i+0xfa>
 8005206:	6821      	ldr	r1, [r4, #0]
 8005208:	6833      	ldr	r3, [r6, #0]
 800520a:	0608      	lsls	r0, r1, #24
 800520c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005210:	d402      	bmi.n	8005218 <_printf_i+0xe8>
 8005212:	0649      	lsls	r1, r1, #25
 8005214:	bf48      	it	mi
 8005216:	b2ad      	uxthmi	r5, r5
 8005218:	2f6f      	cmp	r7, #111	@ 0x6f
 800521a:	4853      	ldr	r0, [pc, #332]	@ (8005368 <_printf_i+0x238>)
 800521c:	6033      	str	r3, [r6, #0]
 800521e:	bf14      	ite	ne
 8005220:	230a      	movne	r3, #10
 8005222:	2308      	moveq	r3, #8
 8005224:	2100      	movs	r1, #0
 8005226:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800522a:	6866      	ldr	r6, [r4, #4]
 800522c:	60a6      	str	r6, [r4, #8]
 800522e:	2e00      	cmp	r6, #0
 8005230:	bfa2      	ittt	ge
 8005232:	6821      	ldrge	r1, [r4, #0]
 8005234:	f021 0104 	bicge.w	r1, r1, #4
 8005238:	6021      	strge	r1, [r4, #0]
 800523a:	b90d      	cbnz	r5, 8005240 <_printf_i+0x110>
 800523c:	2e00      	cmp	r6, #0
 800523e:	d04b      	beq.n	80052d8 <_printf_i+0x1a8>
 8005240:	4616      	mov	r6, r2
 8005242:	fbb5 f1f3 	udiv	r1, r5, r3
 8005246:	fb03 5711 	mls	r7, r3, r1, r5
 800524a:	5dc7      	ldrb	r7, [r0, r7]
 800524c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005250:	462f      	mov	r7, r5
 8005252:	42bb      	cmp	r3, r7
 8005254:	460d      	mov	r5, r1
 8005256:	d9f4      	bls.n	8005242 <_printf_i+0x112>
 8005258:	2b08      	cmp	r3, #8
 800525a:	d10b      	bne.n	8005274 <_printf_i+0x144>
 800525c:	6823      	ldr	r3, [r4, #0]
 800525e:	07df      	lsls	r7, r3, #31
 8005260:	d508      	bpl.n	8005274 <_printf_i+0x144>
 8005262:	6923      	ldr	r3, [r4, #16]
 8005264:	6861      	ldr	r1, [r4, #4]
 8005266:	4299      	cmp	r1, r3
 8005268:	bfde      	ittt	le
 800526a:	2330      	movle	r3, #48	@ 0x30
 800526c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005270:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005274:	1b92      	subs	r2, r2, r6
 8005276:	6122      	str	r2, [r4, #16]
 8005278:	f8cd a000 	str.w	sl, [sp]
 800527c:	464b      	mov	r3, r9
 800527e:	aa03      	add	r2, sp, #12
 8005280:	4621      	mov	r1, r4
 8005282:	4640      	mov	r0, r8
 8005284:	f7ff fee6 	bl	8005054 <_printf_common>
 8005288:	3001      	adds	r0, #1
 800528a:	d14a      	bne.n	8005322 <_printf_i+0x1f2>
 800528c:	f04f 30ff 	mov.w	r0, #4294967295
 8005290:	b004      	add	sp, #16
 8005292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005296:	6823      	ldr	r3, [r4, #0]
 8005298:	f043 0320 	orr.w	r3, r3, #32
 800529c:	6023      	str	r3, [r4, #0]
 800529e:	4833      	ldr	r0, [pc, #204]	@ (800536c <_printf_i+0x23c>)
 80052a0:	2778      	movs	r7, #120	@ 0x78
 80052a2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80052a6:	6823      	ldr	r3, [r4, #0]
 80052a8:	6831      	ldr	r1, [r6, #0]
 80052aa:	061f      	lsls	r7, r3, #24
 80052ac:	f851 5b04 	ldr.w	r5, [r1], #4
 80052b0:	d402      	bmi.n	80052b8 <_printf_i+0x188>
 80052b2:	065f      	lsls	r7, r3, #25
 80052b4:	bf48      	it	mi
 80052b6:	b2ad      	uxthmi	r5, r5
 80052b8:	6031      	str	r1, [r6, #0]
 80052ba:	07d9      	lsls	r1, r3, #31
 80052bc:	bf44      	itt	mi
 80052be:	f043 0320 	orrmi.w	r3, r3, #32
 80052c2:	6023      	strmi	r3, [r4, #0]
 80052c4:	b11d      	cbz	r5, 80052ce <_printf_i+0x19e>
 80052c6:	2310      	movs	r3, #16
 80052c8:	e7ac      	b.n	8005224 <_printf_i+0xf4>
 80052ca:	4827      	ldr	r0, [pc, #156]	@ (8005368 <_printf_i+0x238>)
 80052cc:	e7e9      	b.n	80052a2 <_printf_i+0x172>
 80052ce:	6823      	ldr	r3, [r4, #0]
 80052d0:	f023 0320 	bic.w	r3, r3, #32
 80052d4:	6023      	str	r3, [r4, #0]
 80052d6:	e7f6      	b.n	80052c6 <_printf_i+0x196>
 80052d8:	4616      	mov	r6, r2
 80052da:	e7bd      	b.n	8005258 <_printf_i+0x128>
 80052dc:	6833      	ldr	r3, [r6, #0]
 80052de:	6825      	ldr	r5, [r4, #0]
 80052e0:	6961      	ldr	r1, [r4, #20]
 80052e2:	1d18      	adds	r0, r3, #4
 80052e4:	6030      	str	r0, [r6, #0]
 80052e6:	062e      	lsls	r6, r5, #24
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	d501      	bpl.n	80052f0 <_printf_i+0x1c0>
 80052ec:	6019      	str	r1, [r3, #0]
 80052ee:	e002      	b.n	80052f6 <_printf_i+0x1c6>
 80052f0:	0668      	lsls	r0, r5, #25
 80052f2:	d5fb      	bpl.n	80052ec <_printf_i+0x1bc>
 80052f4:	8019      	strh	r1, [r3, #0]
 80052f6:	2300      	movs	r3, #0
 80052f8:	6123      	str	r3, [r4, #16]
 80052fa:	4616      	mov	r6, r2
 80052fc:	e7bc      	b.n	8005278 <_printf_i+0x148>
 80052fe:	6833      	ldr	r3, [r6, #0]
 8005300:	1d1a      	adds	r2, r3, #4
 8005302:	6032      	str	r2, [r6, #0]
 8005304:	681e      	ldr	r6, [r3, #0]
 8005306:	6862      	ldr	r2, [r4, #4]
 8005308:	2100      	movs	r1, #0
 800530a:	4630      	mov	r0, r6
 800530c:	f7fa ff60 	bl	80001d0 <memchr>
 8005310:	b108      	cbz	r0, 8005316 <_printf_i+0x1e6>
 8005312:	1b80      	subs	r0, r0, r6
 8005314:	6060      	str	r0, [r4, #4]
 8005316:	6863      	ldr	r3, [r4, #4]
 8005318:	6123      	str	r3, [r4, #16]
 800531a:	2300      	movs	r3, #0
 800531c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005320:	e7aa      	b.n	8005278 <_printf_i+0x148>
 8005322:	6923      	ldr	r3, [r4, #16]
 8005324:	4632      	mov	r2, r6
 8005326:	4649      	mov	r1, r9
 8005328:	4640      	mov	r0, r8
 800532a:	47d0      	blx	sl
 800532c:	3001      	adds	r0, #1
 800532e:	d0ad      	beq.n	800528c <_printf_i+0x15c>
 8005330:	6823      	ldr	r3, [r4, #0]
 8005332:	079b      	lsls	r3, r3, #30
 8005334:	d413      	bmi.n	800535e <_printf_i+0x22e>
 8005336:	68e0      	ldr	r0, [r4, #12]
 8005338:	9b03      	ldr	r3, [sp, #12]
 800533a:	4298      	cmp	r0, r3
 800533c:	bfb8      	it	lt
 800533e:	4618      	movlt	r0, r3
 8005340:	e7a6      	b.n	8005290 <_printf_i+0x160>
 8005342:	2301      	movs	r3, #1
 8005344:	4632      	mov	r2, r6
 8005346:	4649      	mov	r1, r9
 8005348:	4640      	mov	r0, r8
 800534a:	47d0      	blx	sl
 800534c:	3001      	adds	r0, #1
 800534e:	d09d      	beq.n	800528c <_printf_i+0x15c>
 8005350:	3501      	adds	r5, #1
 8005352:	68e3      	ldr	r3, [r4, #12]
 8005354:	9903      	ldr	r1, [sp, #12]
 8005356:	1a5b      	subs	r3, r3, r1
 8005358:	42ab      	cmp	r3, r5
 800535a:	dcf2      	bgt.n	8005342 <_printf_i+0x212>
 800535c:	e7eb      	b.n	8005336 <_printf_i+0x206>
 800535e:	2500      	movs	r5, #0
 8005360:	f104 0619 	add.w	r6, r4, #25
 8005364:	e7f5      	b.n	8005352 <_printf_i+0x222>
 8005366:	bf00      	nop
 8005368:	08007f2e 	.word	0x08007f2e
 800536c:	08007f3f 	.word	0x08007f3f

08005370 <std>:
 8005370:	2300      	movs	r3, #0
 8005372:	b510      	push	{r4, lr}
 8005374:	4604      	mov	r4, r0
 8005376:	e9c0 3300 	strd	r3, r3, [r0]
 800537a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800537e:	6083      	str	r3, [r0, #8]
 8005380:	8181      	strh	r1, [r0, #12]
 8005382:	6643      	str	r3, [r0, #100]	@ 0x64
 8005384:	81c2      	strh	r2, [r0, #14]
 8005386:	6183      	str	r3, [r0, #24]
 8005388:	4619      	mov	r1, r3
 800538a:	2208      	movs	r2, #8
 800538c:	305c      	adds	r0, #92	@ 0x5c
 800538e:	f000 f928 	bl	80055e2 <memset>
 8005392:	4b0d      	ldr	r3, [pc, #52]	@ (80053c8 <std+0x58>)
 8005394:	6263      	str	r3, [r4, #36]	@ 0x24
 8005396:	4b0d      	ldr	r3, [pc, #52]	@ (80053cc <std+0x5c>)
 8005398:	62a3      	str	r3, [r4, #40]	@ 0x28
 800539a:	4b0d      	ldr	r3, [pc, #52]	@ (80053d0 <std+0x60>)
 800539c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800539e:	4b0d      	ldr	r3, [pc, #52]	@ (80053d4 <std+0x64>)
 80053a0:	6323      	str	r3, [r4, #48]	@ 0x30
 80053a2:	4b0d      	ldr	r3, [pc, #52]	@ (80053d8 <std+0x68>)
 80053a4:	6224      	str	r4, [r4, #32]
 80053a6:	429c      	cmp	r4, r3
 80053a8:	d006      	beq.n	80053b8 <std+0x48>
 80053aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80053ae:	4294      	cmp	r4, r2
 80053b0:	d002      	beq.n	80053b8 <std+0x48>
 80053b2:	33d0      	adds	r3, #208	@ 0xd0
 80053b4:	429c      	cmp	r4, r3
 80053b6:	d105      	bne.n	80053c4 <std+0x54>
 80053b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80053bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053c0:	f000 b9b4 	b.w	800572c <__retarget_lock_init_recursive>
 80053c4:	bd10      	pop	{r4, pc}
 80053c6:	bf00      	nop
 80053c8:	0800555d 	.word	0x0800555d
 80053cc:	0800557f 	.word	0x0800557f
 80053d0:	080055b7 	.word	0x080055b7
 80053d4:	080055db 	.word	0x080055db
 80053d8:	20000504 	.word	0x20000504

080053dc <stdio_exit_handler>:
 80053dc:	4a02      	ldr	r2, [pc, #8]	@ (80053e8 <stdio_exit_handler+0xc>)
 80053de:	4903      	ldr	r1, [pc, #12]	@ (80053ec <stdio_exit_handler+0x10>)
 80053e0:	4803      	ldr	r0, [pc, #12]	@ (80053f0 <stdio_exit_handler+0x14>)
 80053e2:	f000 b869 	b.w	80054b8 <_fwalk_sglue>
 80053e6:	bf00      	nop
 80053e8:	2000000c 	.word	0x2000000c
 80053ec:	080070a5 	.word	0x080070a5
 80053f0:	2000001c 	.word	0x2000001c

080053f4 <cleanup_stdio>:
 80053f4:	6841      	ldr	r1, [r0, #4]
 80053f6:	4b0c      	ldr	r3, [pc, #48]	@ (8005428 <cleanup_stdio+0x34>)
 80053f8:	4299      	cmp	r1, r3
 80053fa:	b510      	push	{r4, lr}
 80053fc:	4604      	mov	r4, r0
 80053fe:	d001      	beq.n	8005404 <cleanup_stdio+0x10>
 8005400:	f001 fe50 	bl	80070a4 <_fflush_r>
 8005404:	68a1      	ldr	r1, [r4, #8]
 8005406:	4b09      	ldr	r3, [pc, #36]	@ (800542c <cleanup_stdio+0x38>)
 8005408:	4299      	cmp	r1, r3
 800540a:	d002      	beq.n	8005412 <cleanup_stdio+0x1e>
 800540c:	4620      	mov	r0, r4
 800540e:	f001 fe49 	bl	80070a4 <_fflush_r>
 8005412:	68e1      	ldr	r1, [r4, #12]
 8005414:	4b06      	ldr	r3, [pc, #24]	@ (8005430 <cleanup_stdio+0x3c>)
 8005416:	4299      	cmp	r1, r3
 8005418:	d004      	beq.n	8005424 <cleanup_stdio+0x30>
 800541a:	4620      	mov	r0, r4
 800541c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005420:	f001 be40 	b.w	80070a4 <_fflush_r>
 8005424:	bd10      	pop	{r4, pc}
 8005426:	bf00      	nop
 8005428:	20000504 	.word	0x20000504
 800542c:	2000056c 	.word	0x2000056c
 8005430:	200005d4 	.word	0x200005d4

08005434 <global_stdio_init.part.0>:
 8005434:	b510      	push	{r4, lr}
 8005436:	4b0b      	ldr	r3, [pc, #44]	@ (8005464 <global_stdio_init.part.0+0x30>)
 8005438:	4c0b      	ldr	r4, [pc, #44]	@ (8005468 <global_stdio_init.part.0+0x34>)
 800543a:	4a0c      	ldr	r2, [pc, #48]	@ (800546c <global_stdio_init.part.0+0x38>)
 800543c:	601a      	str	r2, [r3, #0]
 800543e:	4620      	mov	r0, r4
 8005440:	2200      	movs	r2, #0
 8005442:	2104      	movs	r1, #4
 8005444:	f7ff ff94 	bl	8005370 <std>
 8005448:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800544c:	2201      	movs	r2, #1
 800544e:	2109      	movs	r1, #9
 8005450:	f7ff ff8e 	bl	8005370 <std>
 8005454:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005458:	2202      	movs	r2, #2
 800545a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800545e:	2112      	movs	r1, #18
 8005460:	f7ff bf86 	b.w	8005370 <std>
 8005464:	2000063c 	.word	0x2000063c
 8005468:	20000504 	.word	0x20000504
 800546c:	080053dd 	.word	0x080053dd

08005470 <__sfp_lock_acquire>:
 8005470:	4801      	ldr	r0, [pc, #4]	@ (8005478 <__sfp_lock_acquire+0x8>)
 8005472:	f000 b95c 	b.w	800572e <__retarget_lock_acquire_recursive>
 8005476:	bf00      	nop
 8005478:	20000645 	.word	0x20000645

0800547c <__sfp_lock_release>:
 800547c:	4801      	ldr	r0, [pc, #4]	@ (8005484 <__sfp_lock_release+0x8>)
 800547e:	f000 b957 	b.w	8005730 <__retarget_lock_release_recursive>
 8005482:	bf00      	nop
 8005484:	20000645 	.word	0x20000645

08005488 <__sinit>:
 8005488:	b510      	push	{r4, lr}
 800548a:	4604      	mov	r4, r0
 800548c:	f7ff fff0 	bl	8005470 <__sfp_lock_acquire>
 8005490:	6a23      	ldr	r3, [r4, #32]
 8005492:	b11b      	cbz	r3, 800549c <__sinit+0x14>
 8005494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005498:	f7ff bff0 	b.w	800547c <__sfp_lock_release>
 800549c:	4b04      	ldr	r3, [pc, #16]	@ (80054b0 <__sinit+0x28>)
 800549e:	6223      	str	r3, [r4, #32]
 80054a0:	4b04      	ldr	r3, [pc, #16]	@ (80054b4 <__sinit+0x2c>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d1f5      	bne.n	8005494 <__sinit+0xc>
 80054a8:	f7ff ffc4 	bl	8005434 <global_stdio_init.part.0>
 80054ac:	e7f2      	b.n	8005494 <__sinit+0xc>
 80054ae:	bf00      	nop
 80054b0:	080053f5 	.word	0x080053f5
 80054b4:	2000063c 	.word	0x2000063c

080054b8 <_fwalk_sglue>:
 80054b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054bc:	4607      	mov	r7, r0
 80054be:	4688      	mov	r8, r1
 80054c0:	4614      	mov	r4, r2
 80054c2:	2600      	movs	r6, #0
 80054c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80054c8:	f1b9 0901 	subs.w	r9, r9, #1
 80054cc:	d505      	bpl.n	80054da <_fwalk_sglue+0x22>
 80054ce:	6824      	ldr	r4, [r4, #0]
 80054d0:	2c00      	cmp	r4, #0
 80054d2:	d1f7      	bne.n	80054c4 <_fwalk_sglue+0xc>
 80054d4:	4630      	mov	r0, r6
 80054d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054da:	89ab      	ldrh	r3, [r5, #12]
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d907      	bls.n	80054f0 <_fwalk_sglue+0x38>
 80054e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80054e4:	3301      	adds	r3, #1
 80054e6:	d003      	beq.n	80054f0 <_fwalk_sglue+0x38>
 80054e8:	4629      	mov	r1, r5
 80054ea:	4638      	mov	r0, r7
 80054ec:	47c0      	blx	r8
 80054ee:	4306      	orrs	r6, r0
 80054f0:	3568      	adds	r5, #104	@ 0x68
 80054f2:	e7e9      	b.n	80054c8 <_fwalk_sglue+0x10>

080054f4 <sniprintf>:
 80054f4:	b40c      	push	{r2, r3}
 80054f6:	b530      	push	{r4, r5, lr}
 80054f8:	4b17      	ldr	r3, [pc, #92]	@ (8005558 <sniprintf+0x64>)
 80054fa:	1e0c      	subs	r4, r1, #0
 80054fc:	681d      	ldr	r5, [r3, #0]
 80054fe:	b09d      	sub	sp, #116	@ 0x74
 8005500:	da08      	bge.n	8005514 <sniprintf+0x20>
 8005502:	238b      	movs	r3, #139	@ 0x8b
 8005504:	602b      	str	r3, [r5, #0]
 8005506:	f04f 30ff 	mov.w	r0, #4294967295
 800550a:	b01d      	add	sp, #116	@ 0x74
 800550c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005510:	b002      	add	sp, #8
 8005512:	4770      	bx	lr
 8005514:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005518:	f8ad 3014 	strh.w	r3, [sp, #20]
 800551c:	bf14      	ite	ne
 800551e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005522:	4623      	moveq	r3, r4
 8005524:	9304      	str	r3, [sp, #16]
 8005526:	9307      	str	r3, [sp, #28]
 8005528:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800552c:	9002      	str	r0, [sp, #8]
 800552e:	9006      	str	r0, [sp, #24]
 8005530:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005534:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005536:	ab21      	add	r3, sp, #132	@ 0x84
 8005538:	a902      	add	r1, sp, #8
 800553a:	4628      	mov	r0, r5
 800553c:	9301      	str	r3, [sp, #4]
 800553e:	f001 fc31 	bl	8006da4 <_svfiprintf_r>
 8005542:	1c43      	adds	r3, r0, #1
 8005544:	bfbc      	itt	lt
 8005546:	238b      	movlt	r3, #139	@ 0x8b
 8005548:	602b      	strlt	r3, [r5, #0]
 800554a:	2c00      	cmp	r4, #0
 800554c:	d0dd      	beq.n	800550a <sniprintf+0x16>
 800554e:	9b02      	ldr	r3, [sp, #8]
 8005550:	2200      	movs	r2, #0
 8005552:	701a      	strb	r2, [r3, #0]
 8005554:	e7d9      	b.n	800550a <sniprintf+0x16>
 8005556:	bf00      	nop
 8005558:	20000018 	.word	0x20000018

0800555c <__sread>:
 800555c:	b510      	push	{r4, lr}
 800555e:	460c      	mov	r4, r1
 8005560:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005564:	f000 f894 	bl	8005690 <_read_r>
 8005568:	2800      	cmp	r0, #0
 800556a:	bfab      	itete	ge
 800556c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800556e:	89a3      	ldrhlt	r3, [r4, #12]
 8005570:	181b      	addge	r3, r3, r0
 8005572:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005576:	bfac      	ite	ge
 8005578:	6563      	strge	r3, [r4, #84]	@ 0x54
 800557a:	81a3      	strhlt	r3, [r4, #12]
 800557c:	bd10      	pop	{r4, pc}

0800557e <__swrite>:
 800557e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005582:	461f      	mov	r7, r3
 8005584:	898b      	ldrh	r3, [r1, #12]
 8005586:	05db      	lsls	r3, r3, #23
 8005588:	4605      	mov	r5, r0
 800558a:	460c      	mov	r4, r1
 800558c:	4616      	mov	r6, r2
 800558e:	d505      	bpl.n	800559c <__swrite+0x1e>
 8005590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005594:	2302      	movs	r3, #2
 8005596:	2200      	movs	r2, #0
 8005598:	f000 f868 	bl	800566c <_lseek_r>
 800559c:	89a3      	ldrh	r3, [r4, #12]
 800559e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80055a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80055a6:	81a3      	strh	r3, [r4, #12]
 80055a8:	4632      	mov	r2, r6
 80055aa:	463b      	mov	r3, r7
 80055ac:	4628      	mov	r0, r5
 80055ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80055b2:	f000 b87f 	b.w	80056b4 <_write_r>

080055b6 <__sseek>:
 80055b6:	b510      	push	{r4, lr}
 80055b8:	460c      	mov	r4, r1
 80055ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055be:	f000 f855 	bl	800566c <_lseek_r>
 80055c2:	1c43      	adds	r3, r0, #1
 80055c4:	89a3      	ldrh	r3, [r4, #12]
 80055c6:	bf15      	itete	ne
 80055c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80055ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80055ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80055d2:	81a3      	strheq	r3, [r4, #12]
 80055d4:	bf18      	it	ne
 80055d6:	81a3      	strhne	r3, [r4, #12]
 80055d8:	bd10      	pop	{r4, pc}

080055da <__sclose>:
 80055da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055de:	f000 b835 	b.w	800564c <_close_r>

080055e2 <memset>:
 80055e2:	4402      	add	r2, r0
 80055e4:	4603      	mov	r3, r0
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d100      	bne.n	80055ec <memset+0xa>
 80055ea:	4770      	bx	lr
 80055ec:	f803 1b01 	strb.w	r1, [r3], #1
 80055f0:	e7f9      	b.n	80055e6 <memset+0x4>

080055f2 <strncmp>:
 80055f2:	b510      	push	{r4, lr}
 80055f4:	b16a      	cbz	r2, 8005612 <strncmp+0x20>
 80055f6:	3901      	subs	r1, #1
 80055f8:	1884      	adds	r4, r0, r2
 80055fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80055fe:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8005602:	429a      	cmp	r2, r3
 8005604:	d103      	bne.n	800560e <strncmp+0x1c>
 8005606:	42a0      	cmp	r0, r4
 8005608:	d001      	beq.n	800560e <strncmp+0x1c>
 800560a:	2a00      	cmp	r2, #0
 800560c:	d1f5      	bne.n	80055fa <strncmp+0x8>
 800560e:	1ad0      	subs	r0, r2, r3
 8005610:	bd10      	pop	{r4, pc}
 8005612:	4610      	mov	r0, r2
 8005614:	e7fc      	b.n	8005610 <strncmp+0x1e>

08005616 <strstr>:
 8005616:	780a      	ldrb	r2, [r1, #0]
 8005618:	b570      	push	{r4, r5, r6, lr}
 800561a:	b96a      	cbnz	r2, 8005638 <strstr+0x22>
 800561c:	bd70      	pop	{r4, r5, r6, pc}
 800561e:	429a      	cmp	r2, r3
 8005620:	d109      	bne.n	8005636 <strstr+0x20>
 8005622:	460c      	mov	r4, r1
 8005624:	4605      	mov	r5, r0
 8005626:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800562a:	2b00      	cmp	r3, #0
 800562c:	d0f6      	beq.n	800561c <strstr+0x6>
 800562e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8005632:	429e      	cmp	r6, r3
 8005634:	d0f7      	beq.n	8005626 <strstr+0x10>
 8005636:	3001      	adds	r0, #1
 8005638:	7803      	ldrb	r3, [r0, #0]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d1ef      	bne.n	800561e <strstr+0x8>
 800563e:	4618      	mov	r0, r3
 8005640:	e7ec      	b.n	800561c <strstr+0x6>
	...

08005644 <_localeconv_r>:
 8005644:	4800      	ldr	r0, [pc, #0]	@ (8005648 <_localeconv_r+0x4>)
 8005646:	4770      	bx	lr
 8005648:	20000158 	.word	0x20000158

0800564c <_close_r>:
 800564c:	b538      	push	{r3, r4, r5, lr}
 800564e:	4d06      	ldr	r5, [pc, #24]	@ (8005668 <_close_r+0x1c>)
 8005650:	2300      	movs	r3, #0
 8005652:	4604      	mov	r4, r0
 8005654:	4608      	mov	r0, r1
 8005656:	602b      	str	r3, [r5, #0]
 8005658:	f7fb ffa6 	bl	80015a8 <_close>
 800565c:	1c43      	adds	r3, r0, #1
 800565e:	d102      	bne.n	8005666 <_close_r+0x1a>
 8005660:	682b      	ldr	r3, [r5, #0]
 8005662:	b103      	cbz	r3, 8005666 <_close_r+0x1a>
 8005664:	6023      	str	r3, [r4, #0]
 8005666:	bd38      	pop	{r3, r4, r5, pc}
 8005668:	20000640 	.word	0x20000640

0800566c <_lseek_r>:
 800566c:	b538      	push	{r3, r4, r5, lr}
 800566e:	4d07      	ldr	r5, [pc, #28]	@ (800568c <_lseek_r+0x20>)
 8005670:	4604      	mov	r4, r0
 8005672:	4608      	mov	r0, r1
 8005674:	4611      	mov	r1, r2
 8005676:	2200      	movs	r2, #0
 8005678:	602a      	str	r2, [r5, #0]
 800567a:	461a      	mov	r2, r3
 800567c:	f7fb ffbb 	bl	80015f6 <_lseek>
 8005680:	1c43      	adds	r3, r0, #1
 8005682:	d102      	bne.n	800568a <_lseek_r+0x1e>
 8005684:	682b      	ldr	r3, [r5, #0]
 8005686:	b103      	cbz	r3, 800568a <_lseek_r+0x1e>
 8005688:	6023      	str	r3, [r4, #0]
 800568a:	bd38      	pop	{r3, r4, r5, pc}
 800568c:	20000640 	.word	0x20000640

08005690 <_read_r>:
 8005690:	b538      	push	{r3, r4, r5, lr}
 8005692:	4d07      	ldr	r5, [pc, #28]	@ (80056b0 <_read_r+0x20>)
 8005694:	4604      	mov	r4, r0
 8005696:	4608      	mov	r0, r1
 8005698:	4611      	mov	r1, r2
 800569a:	2200      	movs	r2, #0
 800569c:	602a      	str	r2, [r5, #0]
 800569e:	461a      	mov	r2, r3
 80056a0:	f7fb ff49 	bl	8001536 <_read>
 80056a4:	1c43      	adds	r3, r0, #1
 80056a6:	d102      	bne.n	80056ae <_read_r+0x1e>
 80056a8:	682b      	ldr	r3, [r5, #0]
 80056aa:	b103      	cbz	r3, 80056ae <_read_r+0x1e>
 80056ac:	6023      	str	r3, [r4, #0]
 80056ae:	bd38      	pop	{r3, r4, r5, pc}
 80056b0:	20000640 	.word	0x20000640

080056b4 <_write_r>:
 80056b4:	b538      	push	{r3, r4, r5, lr}
 80056b6:	4d07      	ldr	r5, [pc, #28]	@ (80056d4 <_write_r+0x20>)
 80056b8:	4604      	mov	r4, r0
 80056ba:	4608      	mov	r0, r1
 80056bc:	4611      	mov	r1, r2
 80056be:	2200      	movs	r2, #0
 80056c0:	602a      	str	r2, [r5, #0]
 80056c2:	461a      	mov	r2, r3
 80056c4:	f7fb ff54 	bl	8001570 <_write>
 80056c8:	1c43      	adds	r3, r0, #1
 80056ca:	d102      	bne.n	80056d2 <_write_r+0x1e>
 80056cc:	682b      	ldr	r3, [r5, #0]
 80056ce:	b103      	cbz	r3, 80056d2 <_write_r+0x1e>
 80056d0:	6023      	str	r3, [r4, #0]
 80056d2:	bd38      	pop	{r3, r4, r5, pc}
 80056d4:	20000640 	.word	0x20000640

080056d8 <__errno>:
 80056d8:	4b01      	ldr	r3, [pc, #4]	@ (80056e0 <__errno+0x8>)
 80056da:	6818      	ldr	r0, [r3, #0]
 80056dc:	4770      	bx	lr
 80056de:	bf00      	nop
 80056e0:	20000018 	.word	0x20000018

080056e4 <__libc_init_array>:
 80056e4:	b570      	push	{r4, r5, r6, lr}
 80056e6:	4d0d      	ldr	r5, [pc, #52]	@ (800571c <__libc_init_array+0x38>)
 80056e8:	4c0d      	ldr	r4, [pc, #52]	@ (8005720 <__libc_init_array+0x3c>)
 80056ea:	1b64      	subs	r4, r4, r5
 80056ec:	10a4      	asrs	r4, r4, #2
 80056ee:	2600      	movs	r6, #0
 80056f0:	42a6      	cmp	r6, r4
 80056f2:	d109      	bne.n	8005708 <__libc_init_array+0x24>
 80056f4:	4d0b      	ldr	r5, [pc, #44]	@ (8005724 <__libc_init_array+0x40>)
 80056f6:	4c0c      	ldr	r4, [pc, #48]	@ (8005728 <__libc_init_array+0x44>)
 80056f8:	f002 f864 	bl	80077c4 <_init>
 80056fc:	1b64      	subs	r4, r4, r5
 80056fe:	10a4      	asrs	r4, r4, #2
 8005700:	2600      	movs	r6, #0
 8005702:	42a6      	cmp	r6, r4
 8005704:	d105      	bne.n	8005712 <__libc_init_array+0x2e>
 8005706:	bd70      	pop	{r4, r5, r6, pc}
 8005708:	f855 3b04 	ldr.w	r3, [r5], #4
 800570c:	4798      	blx	r3
 800570e:	3601      	adds	r6, #1
 8005710:	e7ee      	b.n	80056f0 <__libc_init_array+0xc>
 8005712:	f855 3b04 	ldr.w	r3, [r5], #4
 8005716:	4798      	blx	r3
 8005718:	3601      	adds	r6, #1
 800571a:	e7f2      	b.n	8005702 <__libc_init_array+0x1e>
 800571c:	08008298 	.word	0x08008298
 8005720:	08008298 	.word	0x08008298
 8005724:	08008298 	.word	0x08008298
 8005728:	0800829c 	.word	0x0800829c

0800572c <__retarget_lock_init_recursive>:
 800572c:	4770      	bx	lr

0800572e <__retarget_lock_acquire_recursive>:
 800572e:	4770      	bx	lr

08005730 <__retarget_lock_release_recursive>:
 8005730:	4770      	bx	lr

08005732 <memcpy>:
 8005732:	440a      	add	r2, r1
 8005734:	4291      	cmp	r1, r2
 8005736:	f100 33ff 	add.w	r3, r0, #4294967295
 800573a:	d100      	bne.n	800573e <memcpy+0xc>
 800573c:	4770      	bx	lr
 800573e:	b510      	push	{r4, lr}
 8005740:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005744:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005748:	4291      	cmp	r1, r2
 800574a:	d1f9      	bne.n	8005740 <memcpy+0xe>
 800574c:	bd10      	pop	{r4, pc}

0800574e <quorem>:
 800574e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005752:	6903      	ldr	r3, [r0, #16]
 8005754:	690c      	ldr	r4, [r1, #16]
 8005756:	42a3      	cmp	r3, r4
 8005758:	4607      	mov	r7, r0
 800575a:	db7e      	blt.n	800585a <quorem+0x10c>
 800575c:	3c01      	subs	r4, #1
 800575e:	f101 0814 	add.w	r8, r1, #20
 8005762:	00a3      	lsls	r3, r4, #2
 8005764:	f100 0514 	add.w	r5, r0, #20
 8005768:	9300      	str	r3, [sp, #0]
 800576a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800576e:	9301      	str	r3, [sp, #4]
 8005770:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005774:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005778:	3301      	adds	r3, #1
 800577a:	429a      	cmp	r2, r3
 800577c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005780:	fbb2 f6f3 	udiv	r6, r2, r3
 8005784:	d32e      	bcc.n	80057e4 <quorem+0x96>
 8005786:	f04f 0a00 	mov.w	sl, #0
 800578a:	46c4      	mov	ip, r8
 800578c:	46ae      	mov	lr, r5
 800578e:	46d3      	mov	fp, sl
 8005790:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005794:	b298      	uxth	r0, r3
 8005796:	fb06 a000 	mla	r0, r6, r0, sl
 800579a:	0c02      	lsrs	r2, r0, #16
 800579c:	0c1b      	lsrs	r3, r3, #16
 800579e:	fb06 2303 	mla	r3, r6, r3, r2
 80057a2:	f8de 2000 	ldr.w	r2, [lr]
 80057a6:	b280      	uxth	r0, r0
 80057a8:	b292      	uxth	r2, r2
 80057aa:	1a12      	subs	r2, r2, r0
 80057ac:	445a      	add	r2, fp
 80057ae:	f8de 0000 	ldr.w	r0, [lr]
 80057b2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80057bc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80057c0:	b292      	uxth	r2, r2
 80057c2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80057c6:	45e1      	cmp	r9, ip
 80057c8:	f84e 2b04 	str.w	r2, [lr], #4
 80057cc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80057d0:	d2de      	bcs.n	8005790 <quorem+0x42>
 80057d2:	9b00      	ldr	r3, [sp, #0]
 80057d4:	58eb      	ldr	r3, [r5, r3]
 80057d6:	b92b      	cbnz	r3, 80057e4 <quorem+0x96>
 80057d8:	9b01      	ldr	r3, [sp, #4]
 80057da:	3b04      	subs	r3, #4
 80057dc:	429d      	cmp	r5, r3
 80057de:	461a      	mov	r2, r3
 80057e0:	d32f      	bcc.n	8005842 <quorem+0xf4>
 80057e2:	613c      	str	r4, [r7, #16]
 80057e4:	4638      	mov	r0, r7
 80057e6:	f001 f979 	bl	8006adc <__mcmp>
 80057ea:	2800      	cmp	r0, #0
 80057ec:	db25      	blt.n	800583a <quorem+0xec>
 80057ee:	4629      	mov	r1, r5
 80057f0:	2000      	movs	r0, #0
 80057f2:	f858 2b04 	ldr.w	r2, [r8], #4
 80057f6:	f8d1 c000 	ldr.w	ip, [r1]
 80057fa:	fa1f fe82 	uxth.w	lr, r2
 80057fe:	fa1f f38c 	uxth.w	r3, ip
 8005802:	eba3 030e 	sub.w	r3, r3, lr
 8005806:	4403      	add	r3, r0
 8005808:	0c12      	lsrs	r2, r2, #16
 800580a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800580e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005812:	b29b      	uxth	r3, r3
 8005814:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005818:	45c1      	cmp	r9, r8
 800581a:	f841 3b04 	str.w	r3, [r1], #4
 800581e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005822:	d2e6      	bcs.n	80057f2 <quorem+0xa4>
 8005824:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005828:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800582c:	b922      	cbnz	r2, 8005838 <quorem+0xea>
 800582e:	3b04      	subs	r3, #4
 8005830:	429d      	cmp	r5, r3
 8005832:	461a      	mov	r2, r3
 8005834:	d30b      	bcc.n	800584e <quorem+0x100>
 8005836:	613c      	str	r4, [r7, #16]
 8005838:	3601      	adds	r6, #1
 800583a:	4630      	mov	r0, r6
 800583c:	b003      	add	sp, #12
 800583e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005842:	6812      	ldr	r2, [r2, #0]
 8005844:	3b04      	subs	r3, #4
 8005846:	2a00      	cmp	r2, #0
 8005848:	d1cb      	bne.n	80057e2 <quorem+0x94>
 800584a:	3c01      	subs	r4, #1
 800584c:	e7c6      	b.n	80057dc <quorem+0x8e>
 800584e:	6812      	ldr	r2, [r2, #0]
 8005850:	3b04      	subs	r3, #4
 8005852:	2a00      	cmp	r2, #0
 8005854:	d1ef      	bne.n	8005836 <quorem+0xe8>
 8005856:	3c01      	subs	r4, #1
 8005858:	e7ea      	b.n	8005830 <quorem+0xe2>
 800585a:	2000      	movs	r0, #0
 800585c:	e7ee      	b.n	800583c <quorem+0xee>
	...

08005860 <_dtoa_r>:
 8005860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005864:	69c7      	ldr	r7, [r0, #28]
 8005866:	b099      	sub	sp, #100	@ 0x64
 8005868:	ed8d 0b02 	vstr	d0, [sp, #8]
 800586c:	ec55 4b10 	vmov	r4, r5, d0
 8005870:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005872:	9109      	str	r1, [sp, #36]	@ 0x24
 8005874:	4683      	mov	fp, r0
 8005876:	920e      	str	r2, [sp, #56]	@ 0x38
 8005878:	9313      	str	r3, [sp, #76]	@ 0x4c
 800587a:	b97f      	cbnz	r7, 800589c <_dtoa_r+0x3c>
 800587c:	2010      	movs	r0, #16
 800587e:	f000 fdfd 	bl	800647c <malloc>
 8005882:	4602      	mov	r2, r0
 8005884:	f8cb 001c 	str.w	r0, [fp, #28]
 8005888:	b920      	cbnz	r0, 8005894 <_dtoa_r+0x34>
 800588a:	4ba7      	ldr	r3, [pc, #668]	@ (8005b28 <_dtoa_r+0x2c8>)
 800588c:	21ef      	movs	r1, #239	@ 0xef
 800588e:	48a7      	ldr	r0, [pc, #668]	@ (8005b2c <_dtoa_r+0x2cc>)
 8005890:	f001 fc5a 	bl	8007148 <__assert_func>
 8005894:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005898:	6007      	str	r7, [r0, #0]
 800589a:	60c7      	str	r7, [r0, #12]
 800589c:	f8db 301c 	ldr.w	r3, [fp, #28]
 80058a0:	6819      	ldr	r1, [r3, #0]
 80058a2:	b159      	cbz	r1, 80058bc <_dtoa_r+0x5c>
 80058a4:	685a      	ldr	r2, [r3, #4]
 80058a6:	604a      	str	r2, [r1, #4]
 80058a8:	2301      	movs	r3, #1
 80058aa:	4093      	lsls	r3, r2
 80058ac:	608b      	str	r3, [r1, #8]
 80058ae:	4658      	mov	r0, fp
 80058b0:	f000 feda 	bl	8006668 <_Bfree>
 80058b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80058b8:	2200      	movs	r2, #0
 80058ba:	601a      	str	r2, [r3, #0]
 80058bc:	1e2b      	subs	r3, r5, #0
 80058be:	bfb9      	ittee	lt
 80058c0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80058c4:	9303      	strlt	r3, [sp, #12]
 80058c6:	2300      	movge	r3, #0
 80058c8:	6033      	strge	r3, [r6, #0]
 80058ca:	9f03      	ldr	r7, [sp, #12]
 80058cc:	4b98      	ldr	r3, [pc, #608]	@ (8005b30 <_dtoa_r+0x2d0>)
 80058ce:	bfbc      	itt	lt
 80058d0:	2201      	movlt	r2, #1
 80058d2:	6032      	strlt	r2, [r6, #0]
 80058d4:	43bb      	bics	r3, r7
 80058d6:	d112      	bne.n	80058fe <_dtoa_r+0x9e>
 80058d8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80058da:	f242 730f 	movw	r3, #9999	@ 0x270f
 80058de:	6013      	str	r3, [r2, #0]
 80058e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80058e4:	4323      	orrs	r3, r4
 80058e6:	f000 854d 	beq.w	8006384 <_dtoa_r+0xb24>
 80058ea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80058ec:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005b44 <_dtoa_r+0x2e4>
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	f000 854f 	beq.w	8006394 <_dtoa_r+0xb34>
 80058f6:	f10a 0303 	add.w	r3, sl, #3
 80058fa:	f000 bd49 	b.w	8006390 <_dtoa_r+0xb30>
 80058fe:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005902:	2200      	movs	r2, #0
 8005904:	ec51 0b17 	vmov	r0, r1, d7
 8005908:	2300      	movs	r3, #0
 800590a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800590e:	f7fb f8db 	bl	8000ac8 <__aeabi_dcmpeq>
 8005912:	4680      	mov	r8, r0
 8005914:	b158      	cbz	r0, 800592e <_dtoa_r+0xce>
 8005916:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005918:	2301      	movs	r3, #1
 800591a:	6013      	str	r3, [r2, #0]
 800591c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800591e:	b113      	cbz	r3, 8005926 <_dtoa_r+0xc6>
 8005920:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005922:	4b84      	ldr	r3, [pc, #528]	@ (8005b34 <_dtoa_r+0x2d4>)
 8005924:	6013      	str	r3, [r2, #0]
 8005926:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8005b48 <_dtoa_r+0x2e8>
 800592a:	f000 bd33 	b.w	8006394 <_dtoa_r+0xb34>
 800592e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005932:	aa16      	add	r2, sp, #88	@ 0x58
 8005934:	a917      	add	r1, sp, #92	@ 0x5c
 8005936:	4658      	mov	r0, fp
 8005938:	f001 f980 	bl	8006c3c <__d2b>
 800593c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005940:	4681      	mov	r9, r0
 8005942:	2e00      	cmp	r6, #0
 8005944:	d077      	beq.n	8005a36 <_dtoa_r+0x1d6>
 8005946:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005948:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800594c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005950:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005954:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005958:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800595c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005960:	4619      	mov	r1, r3
 8005962:	2200      	movs	r2, #0
 8005964:	4b74      	ldr	r3, [pc, #464]	@ (8005b38 <_dtoa_r+0x2d8>)
 8005966:	f7fa fc8f 	bl	8000288 <__aeabi_dsub>
 800596a:	a369      	add	r3, pc, #420	@ (adr r3, 8005b10 <_dtoa_r+0x2b0>)
 800596c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005970:	f7fa fe42 	bl	80005f8 <__aeabi_dmul>
 8005974:	a368      	add	r3, pc, #416	@ (adr r3, 8005b18 <_dtoa_r+0x2b8>)
 8005976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800597a:	f7fa fc87 	bl	800028c <__adddf3>
 800597e:	4604      	mov	r4, r0
 8005980:	4630      	mov	r0, r6
 8005982:	460d      	mov	r5, r1
 8005984:	f7fa fdce 	bl	8000524 <__aeabi_i2d>
 8005988:	a365      	add	r3, pc, #404	@ (adr r3, 8005b20 <_dtoa_r+0x2c0>)
 800598a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800598e:	f7fa fe33 	bl	80005f8 <__aeabi_dmul>
 8005992:	4602      	mov	r2, r0
 8005994:	460b      	mov	r3, r1
 8005996:	4620      	mov	r0, r4
 8005998:	4629      	mov	r1, r5
 800599a:	f7fa fc77 	bl	800028c <__adddf3>
 800599e:	4604      	mov	r4, r0
 80059a0:	460d      	mov	r5, r1
 80059a2:	f7fb f8d9 	bl	8000b58 <__aeabi_d2iz>
 80059a6:	2200      	movs	r2, #0
 80059a8:	4607      	mov	r7, r0
 80059aa:	2300      	movs	r3, #0
 80059ac:	4620      	mov	r0, r4
 80059ae:	4629      	mov	r1, r5
 80059b0:	f7fb f894 	bl	8000adc <__aeabi_dcmplt>
 80059b4:	b140      	cbz	r0, 80059c8 <_dtoa_r+0x168>
 80059b6:	4638      	mov	r0, r7
 80059b8:	f7fa fdb4 	bl	8000524 <__aeabi_i2d>
 80059bc:	4622      	mov	r2, r4
 80059be:	462b      	mov	r3, r5
 80059c0:	f7fb f882 	bl	8000ac8 <__aeabi_dcmpeq>
 80059c4:	b900      	cbnz	r0, 80059c8 <_dtoa_r+0x168>
 80059c6:	3f01      	subs	r7, #1
 80059c8:	2f16      	cmp	r7, #22
 80059ca:	d851      	bhi.n	8005a70 <_dtoa_r+0x210>
 80059cc:	4b5b      	ldr	r3, [pc, #364]	@ (8005b3c <_dtoa_r+0x2dc>)
 80059ce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80059d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80059da:	f7fb f87f 	bl	8000adc <__aeabi_dcmplt>
 80059de:	2800      	cmp	r0, #0
 80059e0:	d048      	beq.n	8005a74 <_dtoa_r+0x214>
 80059e2:	3f01      	subs	r7, #1
 80059e4:	2300      	movs	r3, #0
 80059e6:	9312      	str	r3, [sp, #72]	@ 0x48
 80059e8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80059ea:	1b9b      	subs	r3, r3, r6
 80059ec:	1e5a      	subs	r2, r3, #1
 80059ee:	bf44      	itt	mi
 80059f0:	f1c3 0801 	rsbmi	r8, r3, #1
 80059f4:	2300      	movmi	r3, #0
 80059f6:	9208      	str	r2, [sp, #32]
 80059f8:	bf54      	ite	pl
 80059fa:	f04f 0800 	movpl.w	r8, #0
 80059fe:	9308      	strmi	r3, [sp, #32]
 8005a00:	2f00      	cmp	r7, #0
 8005a02:	db39      	blt.n	8005a78 <_dtoa_r+0x218>
 8005a04:	9b08      	ldr	r3, [sp, #32]
 8005a06:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005a08:	443b      	add	r3, r7
 8005a0a:	9308      	str	r3, [sp, #32]
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005a10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a12:	2b09      	cmp	r3, #9
 8005a14:	d864      	bhi.n	8005ae0 <_dtoa_r+0x280>
 8005a16:	2b05      	cmp	r3, #5
 8005a18:	bfc4      	itt	gt
 8005a1a:	3b04      	subgt	r3, #4
 8005a1c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8005a1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a20:	f1a3 0302 	sub.w	r3, r3, #2
 8005a24:	bfcc      	ite	gt
 8005a26:	2400      	movgt	r4, #0
 8005a28:	2401      	movle	r4, #1
 8005a2a:	2b03      	cmp	r3, #3
 8005a2c:	d863      	bhi.n	8005af6 <_dtoa_r+0x296>
 8005a2e:	e8df f003 	tbb	[pc, r3]
 8005a32:	372a      	.short	0x372a
 8005a34:	5535      	.short	0x5535
 8005a36:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8005a3a:	441e      	add	r6, r3
 8005a3c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005a40:	2b20      	cmp	r3, #32
 8005a42:	bfc1      	itttt	gt
 8005a44:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005a48:	409f      	lslgt	r7, r3
 8005a4a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005a4e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005a52:	bfd6      	itet	le
 8005a54:	f1c3 0320 	rsble	r3, r3, #32
 8005a58:	ea47 0003 	orrgt.w	r0, r7, r3
 8005a5c:	fa04 f003 	lslle.w	r0, r4, r3
 8005a60:	f7fa fd50 	bl	8000504 <__aeabi_ui2d>
 8005a64:	2201      	movs	r2, #1
 8005a66:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005a6a:	3e01      	subs	r6, #1
 8005a6c:	9214      	str	r2, [sp, #80]	@ 0x50
 8005a6e:	e777      	b.n	8005960 <_dtoa_r+0x100>
 8005a70:	2301      	movs	r3, #1
 8005a72:	e7b8      	b.n	80059e6 <_dtoa_r+0x186>
 8005a74:	9012      	str	r0, [sp, #72]	@ 0x48
 8005a76:	e7b7      	b.n	80059e8 <_dtoa_r+0x188>
 8005a78:	427b      	negs	r3, r7
 8005a7a:	930a      	str	r3, [sp, #40]	@ 0x28
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	eba8 0807 	sub.w	r8, r8, r7
 8005a82:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005a84:	e7c4      	b.n	8005a10 <_dtoa_r+0x1b0>
 8005a86:	2300      	movs	r3, #0
 8005a88:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005a8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	dc35      	bgt.n	8005afc <_dtoa_r+0x29c>
 8005a90:	2301      	movs	r3, #1
 8005a92:	9300      	str	r3, [sp, #0]
 8005a94:	9307      	str	r3, [sp, #28]
 8005a96:	461a      	mov	r2, r3
 8005a98:	920e      	str	r2, [sp, #56]	@ 0x38
 8005a9a:	e00b      	b.n	8005ab4 <_dtoa_r+0x254>
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e7f3      	b.n	8005a88 <_dtoa_r+0x228>
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005aa4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005aa6:	18fb      	adds	r3, r7, r3
 8005aa8:	9300      	str	r3, [sp, #0]
 8005aaa:	3301      	adds	r3, #1
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	9307      	str	r3, [sp, #28]
 8005ab0:	bfb8      	it	lt
 8005ab2:	2301      	movlt	r3, #1
 8005ab4:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005ab8:	2100      	movs	r1, #0
 8005aba:	2204      	movs	r2, #4
 8005abc:	f102 0514 	add.w	r5, r2, #20
 8005ac0:	429d      	cmp	r5, r3
 8005ac2:	d91f      	bls.n	8005b04 <_dtoa_r+0x2a4>
 8005ac4:	6041      	str	r1, [r0, #4]
 8005ac6:	4658      	mov	r0, fp
 8005ac8:	f000 fd8e 	bl	80065e8 <_Balloc>
 8005acc:	4682      	mov	sl, r0
 8005ace:	2800      	cmp	r0, #0
 8005ad0:	d13c      	bne.n	8005b4c <_dtoa_r+0x2ec>
 8005ad2:	4b1b      	ldr	r3, [pc, #108]	@ (8005b40 <_dtoa_r+0x2e0>)
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	f240 11af 	movw	r1, #431	@ 0x1af
 8005ada:	e6d8      	b.n	800588e <_dtoa_r+0x2e>
 8005adc:	2301      	movs	r3, #1
 8005ade:	e7e0      	b.n	8005aa2 <_dtoa_r+0x242>
 8005ae0:	2401      	movs	r4, #1
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ae6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8005aec:	9300      	str	r3, [sp, #0]
 8005aee:	9307      	str	r3, [sp, #28]
 8005af0:	2200      	movs	r2, #0
 8005af2:	2312      	movs	r3, #18
 8005af4:	e7d0      	b.n	8005a98 <_dtoa_r+0x238>
 8005af6:	2301      	movs	r3, #1
 8005af8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005afa:	e7f5      	b.n	8005ae8 <_dtoa_r+0x288>
 8005afc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005afe:	9300      	str	r3, [sp, #0]
 8005b00:	9307      	str	r3, [sp, #28]
 8005b02:	e7d7      	b.n	8005ab4 <_dtoa_r+0x254>
 8005b04:	3101      	adds	r1, #1
 8005b06:	0052      	lsls	r2, r2, #1
 8005b08:	e7d8      	b.n	8005abc <_dtoa_r+0x25c>
 8005b0a:	bf00      	nop
 8005b0c:	f3af 8000 	nop.w
 8005b10:	636f4361 	.word	0x636f4361
 8005b14:	3fd287a7 	.word	0x3fd287a7
 8005b18:	8b60c8b3 	.word	0x8b60c8b3
 8005b1c:	3fc68a28 	.word	0x3fc68a28
 8005b20:	509f79fb 	.word	0x509f79fb
 8005b24:	3fd34413 	.word	0x3fd34413
 8005b28:	08007f5d 	.word	0x08007f5d
 8005b2c:	08007f74 	.word	0x08007f74
 8005b30:	7ff00000 	.word	0x7ff00000
 8005b34:	08007f2d 	.word	0x08007f2d
 8005b38:	3ff80000 	.word	0x3ff80000
 8005b3c:	08008070 	.word	0x08008070
 8005b40:	08007fcc 	.word	0x08007fcc
 8005b44:	08007f59 	.word	0x08007f59
 8005b48:	08007f2c 	.word	0x08007f2c
 8005b4c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005b50:	6018      	str	r0, [r3, #0]
 8005b52:	9b07      	ldr	r3, [sp, #28]
 8005b54:	2b0e      	cmp	r3, #14
 8005b56:	f200 80a4 	bhi.w	8005ca2 <_dtoa_r+0x442>
 8005b5a:	2c00      	cmp	r4, #0
 8005b5c:	f000 80a1 	beq.w	8005ca2 <_dtoa_r+0x442>
 8005b60:	2f00      	cmp	r7, #0
 8005b62:	dd33      	ble.n	8005bcc <_dtoa_r+0x36c>
 8005b64:	4bad      	ldr	r3, [pc, #692]	@ (8005e1c <_dtoa_r+0x5bc>)
 8005b66:	f007 020f 	and.w	r2, r7, #15
 8005b6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005b6e:	ed93 7b00 	vldr	d7, [r3]
 8005b72:	05f8      	lsls	r0, r7, #23
 8005b74:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005b78:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005b7c:	d516      	bpl.n	8005bac <_dtoa_r+0x34c>
 8005b7e:	4ba8      	ldr	r3, [pc, #672]	@ (8005e20 <_dtoa_r+0x5c0>)
 8005b80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005b84:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005b88:	f7fa fe60 	bl	800084c <__aeabi_ddiv>
 8005b8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b90:	f004 040f 	and.w	r4, r4, #15
 8005b94:	2603      	movs	r6, #3
 8005b96:	4da2      	ldr	r5, [pc, #648]	@ (8005e20 <_dtoa_r+0x5c0>)
 8005b98:	b954      	cbnz	r4, 8005bb0 <_dtoa_r+0x350>
 8005b9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ba2:	f7fa fe53 	bl	800084c <__aeabi_ddiv>
 8005ba6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005baa:	e028      	b.n	8005bfe <_dtoa_r+0x39e>
 8005bac:	2602      	movs	r6, #2
 8005bae:	e7f2      	b.n	8005b96 <_dtoa_r+0x336>
 8005bb0:	07e1      	lsls	r1, r4, #31
 8005bb2:	d508      	bpl.n	8005bc6 <_dtoa_r+0x366>
 8005bb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005bb8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005bbc:	f7fa fd1c 	bl	80005f8 <__aeabi_dmul>
 8005bc0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005bc4:	3601      	adds	r6, #1
 8005bc6:	1064      	asrs	r4, r4, #1
 8005bc8:	3508      	adds	r5, #8
 8005bca:	e7e5      	b.n	8005b98 <_dtoa_r+0x338>
 8005bcc:	f000 80d2 	beq.w	8005d74 <_dtoa_r+0x514>
 8005bd0:	427c      	negs	r4, r7
 8005bd2:	4b92      	ldr	r3, [pc, #584]	@ (8005e1c <_dtoa_r+0x5bc>)
 8005bd4:	4d92      	ldr	r5, [pc, #584]	@ (8005e20 <_dtoa_r+0x5c0>)
 8005bd6:	f004 020f 	and.w	r2, r4, #15
 8005bda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005be6:	f7fa fd07 	bl	80005f8 <__aeabi_dmul>
 8005bea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005bee:	1124      	asrs	r4, r4, #4
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	2602      	movs	r6, #2
 8005bf4:	2c00      	cmp	r4, #0
 8005bf6:	f040 80b2 	bne.w	8005d5e <_dtoa_r+0x4fe>
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d1d3      	bne.n	8005ba6 <_dtoa_r+0x346>
 8005bfe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005c00:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	f000 80b7 	beq.w	8005d78 <_dtoa_r+0x518>
 8005c0a:	4b86      	ldr	r3, [pc, #536]	@ (8005e24 <_dtoa_r+0x5c4>)
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	4620      	mov	r0, r4
 8005c10:	4629      	mov	r1, r5
 8005c12:	f7fa ff63 	bl	8000adc <__aeabi_dcmplt>
 8005c16:	2800      	cmp	r0, #0
 8005c18:	f000 80ae 	beq.w	8005d78 <_dtoa_r+0x518>
 8005c1c:	9b07      	ldr	r3, [sp, #28]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	f000 80aa 	beq.w	8005d78 <_dtoa_r+0x518>
 8005c24:	9b00      	ldr	r3, [sp, #0]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	dd37      	ble.n	8005c9a <_dtoa_r+0x43a>
 8005c2a:	1e7b      	subs	r3, r7, #1
 8005c2c:	9304      	str	r3, [sp, #16]
 8005c2e:	4620      	mov	r0, r4
 8005c30:	4b7d      	ldr	r3, [pc, #500]	@ (8005e28 <_dtoa_r+0x5c8>)
 8005c32:	2200      	movs	r2, #0
 8005c34:	4629      	mov	r1, r5
 8005c36:	f7fa fcdf 	bl	80005f8 <__aeabi_dmul>
 8005c3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c3e:	9c00      	ldr	r4, [sp, #0]
 8005c40:	3601      	adds	r6, #1
 8005c42:	4630      	mov	r0, r6
 8005c44:	f7fa fc6e 	bl	8000524 <__aeabi_i2d>
 8005c48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c4c:	f7fa fcd4 	bl	80005f8 <__aeabi_dmul>
 8005c50:	4b76      	ldr	r3, [pc, #472]	@ (8005e2c <_dtoa_r+0x5cc>)
 8005c52:	2200      	movs	r2, #0
 8005c54:	f7fa fb1a 	bl	800028c <__adddf3>
 8005c58:	4605      	mov	r5, r0
 8005c5a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005c5e:	2c00      	cmp	r4, #0
 8005c60:	f040 808d 	bne.w	8005d7e <_dtoa_r+0x51e>
 8005c64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c68:	4b71      	ldr	r3, [pc, #452]	@ (8005e30 <_dtoa_r+0x5d0>)
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f7fa fb0c 	bl	8000288 <__aeabi_dsub>
 8005c70:	4602      	mov	r2, r0
 8005c72:	460b      	mov	r3, r1
 8005c74:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005c78:	462a      	mov	r2, r5
 8005c7a:	4633      	mov	r3, r6
 8005c7c:	f7fa ff4c 	bl	8000b18 <__aeabi_dcmpgt>
 8005c80:	2800      	cmp	r0, #0
 8005c82:	f040 828b 	bne.w	800619c <_dtoa_r+0x93c>
 8005c86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c8a:	462a      	mov	r2, r5
 8005c8c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005c90:	f7fa ff24 	bl	8000adc <__aeabi_dcmplt>
 8005c94:	2800      	cmp	r0, #0
 8005c96:	f040 8128 	bne.w	8005eea <_dtoa_r+0x68a>
 8005c9a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005c9e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005ca2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	f2c0 815a 	blt.w	8005f5e <_dtoa_r+0x6fe>
 8005caa:	2f0e      	cmp	r7, #14
 8005cac:	f300 8157 	bgt.w	8005f5e <_dtoa_r+0x6fe>
 8005cb0:	4b5a      	ldr	r3, [pc, #360]	@ (8005e1c <_dtoa_r+0x5bc>)
 8005cb2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005cb6:	ed93 7b00 	vldr	d7, [r3]
 8005cba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	ed8d 7b00 	vstr	d7, [sp]
 8005cc2:	da03      	bge.n	8005ccc <_dtoa_r+0x46c>
 8005cc4:	9b07      	ldr	r3, [sp, #28]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	f340 8101 	ble.w	8005ece <_dtoa_r+0x66e>
 8005ccc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005cd0:	4656      	mov	r6, sl
 8005cd2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005cd6:	4620      	mov	r0, r4
 8005cd8:	4629      	mov	r1, r5
 8005cda:	f7fa fdb7 	bl	800084c <__aeabi_ddiv>
 8005cde:	f7fa ff3b 	bl	8000b58 <__aeabi_d2iz>
 8005ce2:	4680      	mov	r8, r0
 8005ce4:	f7fa fc1e 	bl	8000524 <__aeabi_i2d>
 8005ce8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005cec:	f7fa fc84 	bl	80005f8 <__aeabi_dmul>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	460b      	mov	r3, r1
 8005cf4:	4620      	mov	r0, r4
 8005cf6:	4629      	mov	r1, r5
 8005cf8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005cfc:	f7fa fac4 	bl	8000288 <__aeabi_dsub>
 8005d00:	f806 4b01 	strb.w	r4, [r6], #1
 8005d04:	9d07      	ldr	r5, [sp, #28]
 8005d06:	eba6 040a 	sub.w	r4, r6, sl
 8005d0a:	42a5      	cmp	r5, r4
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	460b      	mov	r3, r1
 8005d10:	f040 8117 	bne.w	8005f42 <_dtoa_r+0x6e2>
 8005d14:	f7fa faba 	bl	800028c <__adddf3>
 8005d18:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005d1c:	4604      	mov	r4, r0
 8005d1e:	460d      	mov	r5, r1
 8005d20:	f7fa fefa 	bl	8000b18 <__aeabi_dcmpgt>
 8005d24:	2800      	cmp	r0, #0
 8005d26:	f040 80f9 	bne.w	8005f1c <_dtoa_r+0x6bc>
 8005d2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005d2e:	4620      	mov	r0, r4
 8005d30:	4629      	mov	r1, r5
 8005d32:	f7fa fec9 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d36:	b118      	cbz	r0, 8005d40 <_dtoa_r+0x4e0>
 8005d38:	f018 0f01 	tst.w	r8, #1
 8005d3c:	f040 80ee 	bne.w	8005f1c <_dtoa_r+0x6bc>
 8005d40:	4649      	mov	r1, r9
 8005d42:	4658      	mov	r0, fp
 8005d44:	f000 fc90 	bl	8006668 <_Bfree>
 8005d48:	2300      	movs	r3, #0
 8005d4a:	7033      	strb	r3, [r6, #0]
 8005d4c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005d4e:	3701      	adds	r7, #1
 8005d50:	601f      	str	r7, [r3, #0]
 8005d52:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	f000 831d 	beq.w	8006394 <_dtoa_r+0xb34>
 8005d5a:	601e      	str	r6, [r3, #0]
 8005d5c:	e31a      	b.n	8006394 <_dtoa_r+0xb34>
 8005d5e:	07e2      	lsls	r2, r4, #31
 8005d60:	d505      	bpl.n	8005d6e <_dtoa_r+0x50e>
 8005d62:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005d66:	f7fa fc47 	bl	80005f8 <__aeabi_dmul>
 8005d6a:	3601      	adds	r6, #1
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	1064      	asrs	r4, r4, #1
 8005d70:	3508      	adds	r5, #8
 8005d72:	e73f      	b.n	8005bf4 <_dtoa_r+0x394>
 8005d74:	2602      	movs	r6, #2
 8005d76:	e742      	b.n	8005bfe <_dtoa_r+0x39e>
 8005d78:	9c07      	ldr	r4, [sp, #28]
 8005d7a:	9704      	str	r7, [sp, #16]
 8005d7c:	e761      	b.n	8005c42 <_dtoa_r+0x3e2>
 8005d7e:	4b27      	ldr	r3, [pc, #156]	@ (8005e1c <_dtoa_r+0x5bc>)
 8005d80:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005d82:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005d86:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005d8a:	4454      	add	r4, sl
 8005d8c:	2900      	cmp	r1, #0
 8005d8e:	d053      	beq.n	8005e38 <_dtoa_r+0x5d8>
 8005d90:	4928      	ldr	r1, [pc, #160]	@ (8005e34 <_dtoa_r+0x5d4>)
 8005d92:	2000      	movs	r0, #0
 8005d94:	f7fa fd5a 	bl	800084c <__aeabi_ddiv>
 8005d98:	4633      	mov	r3, r6
 8005d9a:	462a      	mov	r2, r5
 8005d9c:	f7fa fa74 	bl	8000288 <__aeabi_dsub>
 8005da0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005da4:	4656      	mov	r6, sl
 8005da6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005daa:	f7fa fed5 	bl	8000b58 <__aeabi_d2iz>
 8005dae:	4605      	mov	r5, r0
 8005db0:	f7fa fbb8 	bl	8000524 <__aeabi_i2d>
 8005db4:	4602      	mov	r2, r0
 8005db6:	460b      	mov	r3, r1
 8005db8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005dbc:	f7fa fa64 	bl	8000288 <__aeabi_dsub>
 8005dc0:	3530      	adds	r5, #48	@ 0x30
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	460b      	mov	r3, r1
 8005dc6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005dca:	f806 5b01 	strb.w	r5, [r6], #1
 8005dce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005dd2:	f7fa fe83 	bl	8000adc <__aeabi_dcmplt>
 8005dd6:	2800      	cmp	r0, #0
 8005dd8:	d171      	bne.n	8005ebe <_dtoa_r+0x65e>
 8005dda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005dde:	4911      	ldr	r1, [pc, #68]	@ (8005e24 <_dtoa_r+0x5c4>)
 8005de0:	2000      	movs	r0, #0
 8005de2:	f7fa fa51 	bl	8000288 <__aeabi_dsub>
 8005de6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005dea:	f7fa fe77 	bl	8000adc <__aeabi_dcmplt>
 8005dee:	2800      	cmp	r0, #0
 8005df0:	f040 8095 	bne.w	8005f1e <_dtoa_r+0x6be>
 8005df4:	42a6      	cmp	r6, r4
 8005df6:	f43f af50 	beq.w	8005c9a <_dtoa_r+0x43a>
 8005dfa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005dfe:	4b0a      	ldr	r3, [pc, #40]	@ (8005e28 <_dtoa_r+0x5c8>)
 8005e00:	2200      	movs	r2, #0
 8005e02:	f7fa fbf9 	bl	80005f8 <__aeabi_dmul>
 8005e06:	4b08      	ldr	r3, [pc, #32]	@ (8005e28 <_dtoa_r+0x5c8>)
 8005e08:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e12:	f7fa fbf1 	bl	80005f8 <__aeabi_dmul>
 8005e16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e1a:	e7c4      	b.n	8005da6 <_dtoa_r+0x546>
 8005e1c:	08008070 	.word	0x08008070
 8005e20:	08008048 	.word	0x08008048
 8005e24:	3ff00000 	.word	0x3ff00000
 8005e28:	40240000 	.word	0x40240000
 8005e2c:	401c0000 	.word	0x401c0000
 8005e30:	40140000 	.word	0x40140000
 8005e34:	3fe00000 	.word	0x3fe00000
 8005e38:	4631      	mov	r1, r6
 8005e3a:	4628      	mov	r0, r5
 8005e3c:	f7fa fbdc 	bl	80005f8 <__aeabi_dmul>
 8005e40:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005e44:	9415      	str	r4, [sp, #84]	@ 0x54
 8005e46:	4656      	mov	r6, sl
 8005e48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e4c:	f7fa fe84 	bl	8000b58 <__aeabi_d2iz>
 8005e50:	4605      	mov	r5, r0
 8005e52:	f7fa fb67 	bl	8000524 <__aeabi_i2d>
 8005e56:	4602      	mov	r2, r0
 8005e58:	460b      	mov	r3, r1
 8005e5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e5e:	f7fa fa13 	bl	8000288 <__aeabi_dsub>
 8005e62:	3530      	adds	r5, #48	@ 0x30
 8005e64:	f806 5b01 	strb.w	r5, [r6], #1
 8005e68:	4602      	mov	r2, r0
 8005e6a:	460b      	mov	r3, r1
 8005e6c:	42a6      	cmp	r6, r4
 8005e6e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005e72:	f04f 0200 	mov.w	r2, #0
 8005e76:	d124      	bne.n	8005ec2 <_dtoa_r+0x662>
 8005e78:	4bac      	ldr	r3, [pc, #688]	@ (800612c <_dtoa_r+0x8cc>)
 8005e7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005e7e:	f7fa fa05 	bl	800028c <__adddf3>
 8005e82:	4602      	mov	r2, r0
 8005e84:	460b      	mov	r3, r1
 8005e86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e8a:	f7fa fe45 	bl	8000b18 <__aeabi_dcmpgt>
 8005e8e:	2800      	cmp	r0, #0
 8005e90:	d145      	bne.n	8005f1e <_dtoa_r+0x6be>
 8005e92:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005e96:	49a5      	ldr	r1, [pc, #660]	@ (800612c <_dtoa_r+0x8cc>)
 8005e98:	2000      	movs	r0, #0
 8005e9a:	f7fa f9f5 	bl	8000288 <__aeabi_dsub>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	460b      	mov	r3, r1
 8005ea2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ea6:	f7fa fe19 	bl	8000adc <__aeabi_dcmplt>
 8005eaa:	2800      	cmp	r0, #0
 8005eac:	f43f aef5 	beq.w	8005c9a <_dtoa_r+0x43a>
 8005eb0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8005eb2:	1e73      	subs	r3, r6, #1
 8005eb4:	9315      	str	r3, [sp, #84]	@ 0x54
 8005eb6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005eba:	2b30      	cmp	r3, #48	@ 0x30
 8005ebc:	d0f8      	beq.n	8005eb0 <_dtoa_r+0x650>
 8005ebe:	9f04      	ldr	r7, [sp, #16]
 8005ec0:	e73e      	b.n	8005d40 <_dtoa_r+0x4e0>
 8005ec2:	4b9b      	ldr	r3, [pc, #620]	@ (8006130 <_dtoa_r+0x8d0>)
 8005ec4:	f7fa fb98 	bl	80005f8 <__aeabi_dmul>
 8005ec8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ecc:	e7bc      	b.n	8005e48 <_dtoa_r+0x5e8>
 8005ece:	d10c      	bne.n	8005eea <_dtoa_r+0x68a>
 8005ed0:	4b98      	ldr	r3, [pc, #608]	@ (8006134 <_dtoa_r+0x8d4>)
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005ed8:	f7fa fb8e 	bl	80005f8 <__aeabi_dmul>
 8005edc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ee0:	f7fa fe10 	bl	8000b04 <__aeabi_dcmpge>
 8005ee4:	2800      	cmp	r0, #0
 8005ee6:	f000 8157 	beq.w	8006198 <_dtoa_r+0x938>
 8005eea:	2400      	movs	r4, #0
 8005eec:	4625      	mov	r5, r4
 8005eee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005ef0:	43db      	mvns	r3, r3
 8005ef2:	9304      	str	r3, [sp, #16]
 8005ef4:	4656      	mov	r6, sl
 8005ef6:	2700      	movs	r7, #0
 8005ef8:	4621      	mov	r1, r4
 8005efa:	4658      	mov	r0, fp
 8005efc:	f000 fbb4 	bl	8006668 <_Bfree>
 8005f00:	2d00      	cmp	r5, #0
 8005f02:	d0dc      	beq.n	8005ebe <_dtoa_r+0x65e>
 8005f04:	b12f      	cbz	r7, 8005f12 <_dtoa_r+0x6b2>
 8005f06:	42af      	cmp	r7, r5
 8005f08:	d003      	beq.n	8005f12 <_dtoa_r+0x6b2>
 8005f0a:	4639      	mov	r1, r7
 8005f0c:	4658      	mov	r0, fp
 8005f0e:	f000 fbab 	bl	8006668 <_Bfree>
 8005f12:	4629      	mov	r1, r5
 8005f14:	4658      	mov	r0, fp
 8005f16:	f000 fba7 	bl	8006668 <_Bfree>
 8005f1a:	e7d0      	b.n	8005ebe <_dtoa_r+0x65e>
 8005f1c:	9704      	str	r7, [sp, #16]
 8005f1e:	4633      	mov	r3, r6
 8005f20:	461e      	mov	r6, r3
 8005f22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005f26:	2a39      	cmp	r2, #57	@ 0x39
 8005f28:	d107      	bne.n	8005f3a <_dtoa_r+0x6da>
 8005f2a:	459a      	cmp	sl, r3
 8005f2c:	d1f8      	bne.n	8005f20 <_dtoa_r+0x6c0>
 8005f2e:	9a04      	ldr	r2, [sp, #16]
 8005f30:	3201      	adds	r2, #1
 8005f32:	9204      	str	r2, [sp, #16]
 8005f34:	2230      	movs	r2, #48	@ 0x30
 8005f36:	f88a 2000 	strb.w	r2, [sl]
 8005f3a:	781a      	ldrb	r2, [r3, #0]
 8005f3c:	3201      	adds	r2, #1
 8005f3e:	701a      	strb	r2, [r3, #0]
 8005f40:	e7bd      	b.n	8005ebe <_dtoa_r+0x65e>
 8005f42:	4b7b      	ldr	r3, [pc, #492]	@ (8006130 <_dtoa_r+0x8d0>)
 8005f44:	2200      	movs	r2, #0
 8005f46:	f7fa fb57 	bl	80005f8 <__aeabi_dmul>
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	4604      	mov	r4, r0
 8005f50:	460d      	mov	r5, r1
 8005f52:	f7fa fdb9 	bl	8000ac8 <__aeabi_dcmpeq>
 8005f56:	2800      	cmp	r0, #0
 8005f58:	f43f aebb 	beq.w	8005cd2 <_dtoa_r+0x472>
 8005f5c:	e6f0      	b.n	8005d40 <_dtoa_r+0x4e0>
 8005f5e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005f60:	2a00      	cmp	r2, #0
 8005f62:	f000 80db 	beq.w	800611c <_dtoa_r+0x8bc>
 8005f66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005f68:	2a01      	cmp	r2, #1
 8005f6a:	f300 80bf 	bgt.w	80060ec <_dtoa_r+0x88c>
 8005f6e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005f70:	2a00      	cmp	r2, #0
 8005f72:	f000 80b7 	beq.w	80060e4 <_dtoa_r+0x884>
 8005f76:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005f7a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005f7c:	4646      	mov	r6, r8
 8005f7e:	9a08      	ldr	r2, [sp, #32]
 8005f80:	2101      	movs	r1, #1
 8005f82:	441a      	add	r2, r3
 8005f84:	4658      	mov	r0, fp
 8005f86:	4498      	add	r8, r3
 8005f88:	9208      	str	r2, [sp, #32]
 8005f8a:	f000 fc21 	bl	80067d0 <__i2b>
 8005f8e:	4605      	mov	r5, r0
 8005f90:	b15e      	cbz	r6, 8005faa <_dtoa_r+0x74a>
 8005f92:	9b08      	ldr	r3, [sp, #32]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	dd08      	ble.n	8005faa <_dtoa_r+0x74a>
 8005f98:	42b3      	cmp	r3, r6
 8005f9a:	9a08      	ldr	r2, [sp, #32]
 8005f9c:	bfa8      	it	ge
 8005f9e:	4633      	movge	r3, r6
 8005fa0:	eba8 0803 	sub.w	r8, r8, r3
 8005fa4:	1af6      	subs	r6, r6, r3
 8005fa6:	1ad3      	subs	r3, r2, r3
 8005fa8:	9308      	str	r3, [sp, #32]
 8005faa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005fac:	b1f3      	cbz	r3, 8005fec <_dtoa_r+0x78c>
 8005fae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	f000 80b7 	beq.w	8006124 <_dtoa_r+0x8c4>
 8005fb6:	b18c      	cbz	r4, 8005fdc <_dtoa_r+0x77c>
 8005fb8:	4629      	mov	r1, r5
 8005fba:	4622      	mov	r2, r4
 8005fbc:	4658      	mov	r0, fp
 8005fbe:	f000 fcc7 	bl	8006950 <__pow5mult>
 8005fc2:	464a      	mov	r2, r9
 8005fc4:	4601      	mov	r1, r0
 8005fc6:	4605      	mov	r5, r0
 8005fc8:	4658      	mov	r0, fp
 8005fca:	f000 fc17 	bl	80067fc <__multiply>
 8005fce:	4649      	mov	r1, r9
 8005fd0:	9004      	str	r0, [sp, #16]
 8005fd2:	4658      	mov	r0, fp
 8005fd4:	f000 fb48 	bl	8006668 <_Bfree>
 8005fd8:	9b04      	ldr	r3, [sp, #16]
 8005fda:	4699      	mov	r9, r3
 8005fdc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005fde:	1b1a      	subs	r2, r3, r4
 8005fe0:	d004      	beq.n	8005fec <_dtoa_r+0x78c>
 8005fe2:	4649      	mov	r1, r9
 8005fe4:	4658      	mov	r0, fp
 8005fe6:	f000 fcb3 	bl	8006950 <__pow5mult>
 8005fea:	4681      	mov	r9, r0
 8005fec:	2101      	movs	r1, #1
 8005fee:	4658      	mov	r0, fp
 8005ff0:	f000 fbee 	bl	80067d0 <__i2b>
 8005ff4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005ff6:	4604      	mov	r4, r0
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	f000 81cf 	beq.w	800639c <_dtoa_r+0xb3c>
 8005ffe:	461a      	mov	r2, r3
 8006000:	4601      	mov	r1, r0
 8006002:	4658      	mov	r0, fp
 8006004:	f000 fca4 	bl	8006950 <__pow5mult>
 8006008:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800600a:	2b01      	cmp	r3, #1
 800600c:	4604      	mov	r4, r0
 800600e:	f300 8095 	bgt.w	800613c <_dtoa_r+0x8dc>
 8006012:	9b02      	ldr	r3, [sp, #8]
 8006014:	2b00      	cmp	r3, #0
 8006016:	f040 8087 	bne.w	8006128 <_dtoa_r+0x8c8>
 800601a:	9b03      	ldr	r3, [sp, #12]
 800601c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006020:	2b00      	cmp	r3, #0
 8006022:	f040 8089 	bne.w	8006138 <_dtoa_r+0x8d8>
 8006026:	9b03      	ldr	r3, [sp, #12]
 8006028:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800602c:	0d1b      	lsrs	r3, r3, #20
 800602e:	051b      	lsls	r3, r3, #20
 8006030:	b12b      	cbz	r3, 800603e <_dtoa_r+0x7de>
 8006032:	9b08      	ldr	r3, [sp, #32]
 8006034:	3301      	adds	r3, #1
 8006036:	9308      	str	r3, [sp, #32]
 8006038:	f108 0801 	add.w	r8, r8, #1
 800603c:	2301      	movs	r3, #1
 800603e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006040:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006042:	2b00      	cmp	r3, #0
 8006044:	f000 81b0 	beq.w	80063a8 <_dtoa_r+0xb48>
 8006048:	6923      	ldr	r3, [r4, #16]
 800604a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800604e:	6918      	ldr	r0, [r3, #16]
 8006050:	f000 fb72 	bl	8006738 <__hi0bits>
 8006054:	f1c0 0020 	rsb	r0, r0, #32
 8006058:	9b08      	ldr	r3, [sp, #32]
 800605a:	4418      	add	r0, r3
 800605c:	f010 001f 	ands.w	r0, r0, #31
 8006060:	d077      	beq.n	8006152 <_dtoa_r+0x8f2>
 8006062:	f1c0 0320 	rsb	r3, r0, #32
 8006066:	2b04      	cmp	r3, #4
 8006068:	dd6b      	ble.n	8006142 <_dtoa_r+0x8e2>
 800606a:	9b08      	ldr	r3, [sp, #32]
 800606c:	f1c0 001c 	rsb	r0, r0, #28
 8006070:	4403      	add	r3, r0
 8006072:	4480      	add	r8, r0
 8006074:	4406      	add	r6, r0
 8006076:	9308      	str	r3, [sp, #32]
 8006078:	f1b8 0f00 	cmp.w	r8, #0
 800607c:	dd05      	ble.n	800608a <_dtoa_r+0x82a>
 800607e:	4649      	mov	r1, r9
 8006080:	4642      	mov	r2, r8
 8006082:	4658      	mov	r0, fp
 8006084:	f000 fcbe 	bl	8006a04 <__lshift>
 8006088:	4681      	mov	r9, r0
 800608a:	9b08      	ldr	r3, [sp, #32]
 800608c:	2b00      	cmp	r3, #0
 800608e:	dd05      	ble.n	800609c <_dtoa_r+0x83c>
 8006090:	4621      	mov	r1, r4
 8006092:	461a      	mov	r2, r3
 8006094:	4658      	mov	r0, fp
 8006096:	f000 fcb5 	bl	8006a04 <__lshift>
 800609a:	4604      	mov	r4, r0
 800609c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d059      	beq.n	8006156 <_dtoa_r+0x8f6>
 80060a2:	4621      	mov	r1, r4
 80060a4:	4648      	mov	r0, r9
 80060a6:	f000 fd19 	bl	8006adc <__mcmp>
 80060aa:	2800      	cmp	r0, #0
 80060ac:	da53      	bge.n	8006156 <_dtoa_r+0x8f6>
 80060ae:	1e7b      	subs	r3, r7, #1
 80060b0:	9304      	str	r3, [sp, #16]
 80060b2:	4649      	mov	r1, r9
 80060b4:	2300      	movs	r3, #0
 80060b6:	220a      	movs	r2, #10
 80060b8:	4658      	mov	r0, fp
 80060ba:	f000 faf7 	bl	80066ac <__multadd>
 80060be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80060c0:	4681      	mov	r9, r0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	f000 8172 	beq.w	80063ac <_dtoa_r+0xb4c>
 80060c8:	2300      	movs	r3, #0
 80060ca:	4629      	mov	r1, r5
 80060cc:	220a      	movs	r2, #10
 80060ce:	4658      	mov	r0, fp
 80060d0:	f000 faec 	bl	80066ac <__multadd>
 80060d4:	9b00      	ldr	r3, [sp, #0]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	4605      	mov	r5, r0
 80060da:	dc67      	bgt.n	80061ac <_dtoa_r+0x94c>
 80060dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060de:	2b02      	cmp	r3, #2
 80060e0:	dc41      	bgt.n	8006166 <_dtoa_r+0x906>
 80060e2:	e063      	b.n	80061ac <_dtoa_r+0x94c>
 80060e4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80060e6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80060ea:	e746      	b.n	8005f7a <_dtoa_r+0x71a>
 80060ec:	9b07      	ldr	r3, [sp, #28]
 80060ee:	1e5c      	subs	r4, r3, #1
 80060f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80060f2:	42a3      	cmp	r3, r4
 80060f4:	bfbf      	itttt	lt
 80060f6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80060f8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80060fa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80060fc:	1ae3      	sublt	r3, r4, r3
 80060fe:	bfb4      	ite	lt
 8006100:	18d2      	addlt	r2, r2, r3
 8006102:	1b1c      	subge	r4, r3, r4
 8006104:	9b07      	ldr	r3, [sp, #28]
 8006106:	bfbc      	itt	lt
 8006108:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800610a:	2400      	movlt	r4, #0
 800610c:	2b00      	cmp	r3, #0
 800610e:	bfb5      	itete	lt
 8006110:	eba8 0603 	sublt.w	r6, r8, r3
 8006114:	9b07      	ldrge	r3, [sp, #28]
 8006116:	2300      	movlt	r3, #0
 8006118:	4646      	movge	r6, r8
 800611a:	e730      	b.n	8005f7e <_dtoa_r+0x71e>
 800611c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800611e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006120:	4646      	mov	r6, r8
 8006122:	e735      	b.n	8005f90 <_dtoa_r+0x730>
 8006124:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006126:	e75c      	b.n	8005fe2 <_dtoa_r+0x782>
 8006128:	2300      	movs	r3, #0
 800612a:	e788      	b.n	800603e <_dtoa_r+0x7de>
 800612c:	3fe00000 	.word	0x3fe00000
 8006130:	40240000 	.word	0x40240000
 8006134:	40140000 	.word	0x40140000
 8006138:	9b02      	ldr	r3, [sp, #8]
 800613a:	e780      	b.n	800603e <_dtoa_r+0x7de>
 800613c:	2300      	movs	r3, #0
 800613e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006140:	e782      	b.n	8006048 <_dtoa_r+0x7e8>
 8006142:	d099      	beq.n	8006078 <_dtoa_r+0x818>
 8006144:	9a08      	ldr	r2, [sp, #32]
 8006146:	331c      	adds	r3, #28
 8006148:	441a      	add	r2, r3
 800614a:	4498      	add	r8, r3
 800614c:	441e      	add	r6, r3
 800614e:	9208      	str	r2, [sp, #32]
 8006150:	e792      	b.n	8006078 <_dtoa_r+0x818>
 8006152:	4603      	mov	r3, r0
 8006154:	e7f6      	b.n	8006144 <_dtoa_r+0x8e4>
 8006156:	9b07      	ldr	r3, [sp, #28]
 8006158:	9704      	str	r7, [sp, #16]
 800615a:	2b00      	cmp	r3, #0
 800615c:	dc20      	bgt.n	80061a0 <_dtoa_r+0x940>
 800615e:	9300      	str	r3, [sp, #0]
 8006160:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006162:	2b02      	cmp	r3, #2
 8006164:	dd1e      	ble.n	80061a4 <_dtoa_r+0x944>
 8006166:	9b00      	ldr	r3, [sp, #0]
 8006168:	2b00      	cmp	r3, #0
 800616a:	f47f aec0 	bne.w	8005eee <_dtoa_r+0x68e>
 800616e:	4621      	mov	r1, r4
 8006170:	2205      	movs	r2, #5
 8006172:	4658      	mov	r0, fp
 8006174:	f000 fa9a 	bl	80066ac <__multadd>
 8006178:	4601      	mov	r1, r0
 800617a:	4604      	mov	r4, r0
 800617c:	4648      	mov	r0, r9
 800617e:	f000 fcad 	bl	8006adc <__mcmp>
 8006182:	2800      	cmp	r0, #0
 8006184:	f77f aeb3 	ble.w	8005eee <_dtoa_r+0x68e>
 8006188:	4656      	mov	r6, sl
 800618a:	2331      	movs	r3, #49	@ 0x31
 800618c:	f806 3b01 	strb.w	r3, [r6], #1
 8006190:	9b04      	ldr	r3, [sp, #16]
 8006192:	3301      	adds	r3, #1
 8006194:	9304      	str	r3, [sp, #16]
 8006196:	e6ae      	b.n	8005ef6 <_dtoa_r+0x696>
 8006198:	9c07      	ldr	r4, [sp, #28]
 800619a:	9704      	str	r7, [sp, #16]
 800619c:	4625      	mov	r5, r4
 800619e:	e7f3      	b.n	8006188 <_dtoa_r+0x928>
 80061a0:	9b07      	ldr	r3, [sp, #28]
 80061a2:	9300      	str	r3, [sp, #0]
 80061a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	f000 8104 	beq.w	80063b4 <_dtoa_r+0xb54>
 80061ac:	2e00      	cmp	r6, #0
 80061ae:	dd05      	ble.n	80061bc <_dtoa_r+0x95c>
 80061b0:	4629      	mov	r1, r5
 80061b2:	4632      	mov	r2, r6
 80061b4:	4658      	mov	r0, fp
 80061b6:	f000 fc25 	bl	8006a04 <__lshift>
 80061ba:	4605      	mov	r5, r0
 80061bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d05a      	beq.n	8006278 <_dtoa_r+0xa18>
 80061c2:	6869      	ldr	r1, [r5, #4]
 80061c4:	4658      	mov	r0, fp
 80061c6:	f000 fa0f 	bl	80065e8 <_Balloc>
 80061ca:	4606      	mov	r6, r0
 80061cc:	b928      	cbnz	r0, 80061da <_dtoa_r+0x97a>
 80061ce:	4b84      	ldr	r3, [pc, #528]	@ (80063e0 <_dtoa_r+0xb80>)
 80061d0:	4602      	mov	r2, r0
 80061d2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80061d6:	f7ff bb5a 	b.w	800588e <_dtoa_r+0x2e>
 80061da:	692a      	ldr	r2, [r5, #16]
 80061dc:	3202      	adds	r2, #2
 80061de:	0092      	lsls	r2, r2, #2
 80061e0:	f105 010c 	add.w	r1, r5, #12
 80061e4:	300c      	adds	r0, #12
 80061e6:	f7ff faa4 	bl	8005732 <memcpy>
 80061ea:	2201      	movs	r2, #1
 80061ec:	4631      	mov	r1, r6
 80061ee:	4658      	mov	r0, fp
 80061f0:	f000 fc08 	bl	8006a04 <__lshift>
 80061f4:	f10a 0301 	add.w	r3, sl, #1
 80061f8:	9307      	str	r3, [sp, #28]
 80061fa:	9b00      	ldr	r3, [sp, #0]
 80061fc:	4453      	add	r3, sl
 80061fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006200:	9b02      	ldr	r3, [sp, #8]
 8006202:	f003 0301 	and.w	r3, r3, #1
 8006206:	462f      	mov	r7, r5
 8006208:	930a      	str	r3, [sp, #40]	@ 0x28
 800620a:	4605      	mov	r5, r0
 800620c:	9b07      	ldr	r3, [sp, #28]
 800620e:	4621      	mov	r1, r4
 8006210:	3b01      	subs	r3, #1
 8006212:	4648      	mov	r0, r9
 8006214:	9300      	str	r3, [sp, #0]
 8006216:	f7ff fa9a 	bl	800574e <quorem>
 800621a:	4639      	mov	r1, r7
 800621c:	9002      	str	r0, [sp, #8]
 800621e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006222:	4648      	mov	r0, r9
 8006224:	f000 fc5a 	bl	8006adc <__mcmp>
 8006228:	462a      	mov	r2, r5
 800622a:	9008      	str	r0, [sp, #32]
 800622c:	4621      	mov	r1, r4
 800622e:	4658      	mov	r0, fp
 8006230:	f000 fc70 	bl	8006b14 <__mdiff>
 8006234:	68c2      	ldr	r2, [r0, #12]
 8006236:	4606      	mov	r6, r0
 8006238:	bb02      	cbnz	r2, 800627c <_dtoa_r+0xa1c>
 800623a:	4601      	mov	r1, r0
 800623c:	4648      	mov	r0, r9
 800623e:	f000 fc4d 	bl	8006adc <__mcmp>
 8006242:	4602      	mov	r2, r0
 8006244:	4631      	mov	r1, r6
 8006246:	4658      	mov	r0, fp
 8006248:	920e      	str	r2, [sp, #56]	@ 0x38
 800624a:	f000 fa0d 	bl	8006668 <_Bfree>
 800624e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006250:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006252:	9e07      	ldr	r6, [sp, #28]
 8006254:	ea43 0102 	orr.w	r1, r3, r2
 8006258:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800625a:	4319      	orrs	r1, r3
 800625c:	d110      	bne.n	8006280 <_dtoa_r+0xa20>
 800625e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006262:	d029      	beq.n	80062b8 <_dtoa_r+0xa58>
 8006264:	9b08      	ldr	r3, [sp, #32]
 8006266:	2b00      	cmp	r3, #0
 8006268:	dd02      	ble.n	8006270 <_dtoa_r+0xa10>
 800626a:	9b02      	ldr	r3, [sp, #8]
 800626c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006270:	9b00      	ldr	r3, [sp, #0]
 8006272:	f883 8000 	strb.w	r8, [r3]
 8006276:	e63f      	b.n	8005ef8 <_dtoa_r+0x698>
 8006278:	4628      	mov	r0, r5
 800627a:	e7bb      	b.n	80061f4 <_dtoa_r+0x994>
 800627c:	2201      	movs	r2, #1
 800627e:	e7e1      	b.n	8006244 <_dtoa_r+0x9e4>
 8006280:	9b08      	ldr	r3, [sp, #32]
 8006282:	2b00      	cmp	r3, #0
 8006284:	db04      	blt.n	8006290 <_dtoa_r+0xa30>
 8006286:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006288:	430b      	orrs	r3, r1
 800628a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800628c:	430b      	orrs	r3, r1
 800628e:	d120      	bne.n	80062d2 <_dtoa_r+0xa72>
 8006290:	2a00      	cmp	r2, #0
 8006292:	dded      	ble.n	8006270 <_dtoa_r+0xa10>
 8006294:	4649      	mov	r1, r9
 8006296:	2201      	movs	r2, #1
 8006298:	4658      	mov	r0, fp
 800629a:	f000 fbb3 	bl	8006a04 <__lshift>
 800629e:	4621      	mov	r1, r4
 80062a0:	4681      	mov	r9, r0
 80062a2:	f000 fc1b 	bl	8006adc <__mcmp>
 80062a6:	2800      	cmp	r0, #0
 80062a8:	dc03      	bgt.n	80062b2 <_dtoa_r+0xa52>
 80062aa:	d1e1      	bne.n	8006270 <_dtoa_r+0xa10>
 80062ac:	f018 0f01 	tst.w	r8, #1
 80062b0:	d0de      	beq.n	8006270 <_dtoa_r+0xa10>
 80062b2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80062b6:	d1d8      	bne.n	800626a <_dtoa_r+0xa0a>
 80062b8:	9a00      	ldr	r2, [sp, #0]
 80062ba:	2339      	movs	r3, #57	@ 0x39
 80062bc:	7013      	strb	r3, [r2, #0]
 80062be:	4633      	mov	r3, r6
 80062c0:	461e      	mov	r6, r3
 80062c2:	3b01      	subs	r3, #1
 80062c4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80062c8:	2a39      	cmp	r2, #57	@ 0x39
 80062ca:	d052      	beq.n	8006372 <_dtoa_r+0xb12>
 80062cc:	3201      	adds	r2, #1
 80062ce:	701a      	strb	r2, [r3, #0]
 80062d0:	e612      	b.n	8005ef8 <_dtoa_r+0x698>
 80062d2:	2a00      	cmp	r2, #0
 80062d4:	dd07      	ble.n	80062e6 <_dtoa_r+0xa86>
 80062d6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80062da:	d0ed      	beq.n	80062b8 <_dtoa_r+0xa58>
 80062dc:	9a00      	ldr	r2, [sp, #0]
 80062de:	f108 0301 	add.w	r3, r8, #1
 80062e2:	7013      	strb	r3, [r2, #0]
 80062e4:	e608      	b.n	8005ef8 <_dtoa_r+0x698>
 80062e6:	9b07      	ldr	r3, [sp, #28]
 80062e8:	9a07      	ldr	r2, [sp, #28]
 80062ea:	f803 8c01 	strb.w	r8, [r3, #-1]
 80062ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d028      	beq.n	8006346 <_dtoa_r+0xae6>
 80062f4:	4649      	mov	r1, r9
 80062f6:	2300      	movs	r3, #0
 80062f8:	220a      	movs	r2, #10
 80062fa:	4658      	mov	r0, fp
 80062fc:	f000 f9d6 	bl	80066ac <__multadd>
 8006300:	42af      	cmp	r7, r5
 8006302:	4681      	mov	r9, r0
 8006304:	f04f 0300 	mov.w	r3, #0
 8006308:	f04f 020a 	mov.w	r2, #10
 800630c:	4639      	mov	r1, r7
 800630e:	4658      	mov	r0, fp
 8006310:	d107      	bne.n	8006322 <_dtoa_r+0xac2>
 8006312:	f000 f9cb 	bl	80066ac <__multadd>
 8006316:	4607      	mov	r7, r0
 8006318:	4605      	mov	r5, r0
 800631a:	9b07      	ldr	r3, [sp, #28]
 800631c:	3301      	adds	r3, #1
 800631e:	9307      	str	r3, [sp, #28]
 8006320:	e774      	b.n	800620c <_dtoa_r+0x9ac>
 8006322:	f000 f9c3 	bl	80066ac <__multadd>
 8006326:	4629      	mov	r1, r5
 8006328:	4607      	mov	r7, r0
 800632a:	2300      	movs	r3, #0
 800632c:	220a      	movs	r2, #10
 800632e:	4658      	mov	r0, fp
 8006330:	f000 f9bc 	bl	80066ac <__multadd>
 8006334:	4605      	mov	r5, r0
 8006336:	e7f0      	b.n	800631a <_dtoa_r+0xaba>
 8006338:	9b00      	ldr	r3, [sp, #0]
 800633a:	2b00      	cmp	r3, #0
 800633c:	bfcc      	ite	gt
 800633e:	461e      	movgt	r6, r3
 8006340:	2601      	movle	r6, #1
 8006342:	4456      	add	r6, sl
 8006344:	2700      	movs	r7, #0
 8006346:	4649      	mov	r1, r9
 8006348:	2201      	movs	r2, #1
 800634a:	4658      	mov	r0, fp
 800634c:	f000 fb5a 	bl	8006a04 <__lshift>
 8006350:	4621      	mov	r1, r4
 8006352:	4681      	mov	r9, r0
 8006354:	f000 fbc2 	bl	8006adc <__mcmp>
 8006358:	2800      	cmp	r0, #0
 800635a:	dcb0      	bgt.n	80062be <_dtoa_r+0xa5e>
 800635c:	d102      	bne.n	8006364 <_dtoa_r+0xb04>
 800635e:	f018 0f01 	tst.w	r8, #1
 8006362:	d1ac      	bne.n	80062be <_dtoa_r+0xa5e>
 8006364:	4633      	mov	r3, r6
 8006366:	461e      	mov	r6, r3
 8006368:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800636c:	2a30      	cmp	r2, #48	@ 0x30
 800636e:	d0fa      	beq.n	8006366 <_dtoa_r+0xb06>
 8006370:	e5c2      	b.n	8005ef8 <_dtoa_r+0x698>
 8006372:	459a      	cmp	sl, r3
 8006374:	d1a4      	bne.n	80062c0 <_dtoa_r+0xa60>
 8006376:	9b04      	ldr	r3, [sp, #16]
 8006378:	3301      	adds	r3, #1
 800637a:	9304      	str	r3, [sp, #16]
 800637c:	2331      	movs	r3, #49	@ 0x31
 800637e:	f88a 3000 	strb.w	r3, [sl]
 8006382:	e5b9      	b.n	8005ef8 <_dtoa_r+0x698>
 8006384:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006386:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80063e4 <_dtoa_r+0xb84>
 800638a:	b11b      	cbz	r3, 8006394 <_dtoa_r+0xb34>
 800638c:	f10a 0308 	add.w	r3, sl, #8
 8006390:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006392:	6013      	str	r3, [r2, #0]
 8006394:	4650      	mov	r0, sl
 8006396:	b019      	add	sp, #100	@ 0x64
 8006398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800639c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800639e:	2b01      	cmp	r3, #1
 80063a0:	f77f ae37 	ble.w	8006012 <_dtoa_r+0x7b2>
 80063a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80063a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80063a8:	2001      	movs	r0, #1
 80063aa:	e655      	b.n	8006058 <_dtoa_r+0x7f8>
 80063ac:	9b00      	ldr	r3, [sp, #0]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	f77f aed6 	ble.w	8006160 <_dtoa_r+0x900>
 80063b4:	4656      	mov	r6, sl
 80063b6:	4621      	mov	r1, r4
 80063b8:	4648      	mov	r0, r9
 80063ba:	f7ff f9c8 	bl	800574e <quorem>
 80063be:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80063c2:	f806 8b01 	strb.w	r8, [r6], #1
 80063c6:	9b00      	ldr	r3, [sp, #0]
 80063c8:	eba6 020a 	sub.w	r2, r6, sl
 80063cc:	4293      	cmp	r3, r2
 80063ce:	ddb3      	ble.n	8006338 <_dtoa_r+0xad8>
 80063d0:	4649      	mov	r1, r9
 80063d2:	2300      	movs	r3, #0
 80063d4:	220a      	movs	r2, #10
 80063d6:	4658      	mov	r0, fp
 80063d8:	f000 f968 	bl	80066ac <__multadd>
 80063dc:	4681      	mov	r9, r0
 80063de:	e7ea      	b.n	80063b6 <_dtoa_r+0xb56>
 80063e0:	08007fcc 	.word	0x08007fcc
 80063e4:	08007f50 	.word	0x08007f50

080063e8 <_free_r>:
 80063e8:	b538      	push	{r3, r4, r5, lr}
 80063ea:	4605      	mov	r5, r0
 80063ec:	2900      	cmp	r1, #0
 80063ee:	d041      	beq.n	8006474 <_free_r+0x8c>
 80063f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063f4:	1f0c      	subs	r4, r1, #4
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	bfb8      	it	lt
 80063fa:	18e4      	addlt	r4, r4, r3
 80063fc:	f000 f8e8 	bl	80065d0 <__malloc_lock>
 8006400:	4a1d      	ldr	r2, [pc, #116]	@ (8006478 <_free_r+0x90>)
 8006402:	6813      	ldr	r3, [r2, #0]
 8006404:	b933      	cbnz	r3, 8006414 <_free_r+0x2c>
 8006406:	6063      	str	r3, [r4, #4]
 8006408:	6014      	str	r4, [r2, #0]
 800640a:	4628      	mov	r0, r5
 800640c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006410:	f000 b8e4 	b.w	80065dc <__malloc_unlock>
 8006414:	42a3      	cmp	r3, r4
 8006416:	d908      	bls.n	800642a <_free_r+0x42>
 8006418:	6820      	ldr	r0, [r4, #0]
 800641a:	1821      	adds	r1, r4, r0
 800641c:	428b      	cmp	r3, r1
 800641e:	bf01      	itttt	eq
 8006420:	6819      	ldreq	r1, [r3, #0]
 8006422:	685b      	ldreq	r3, [r3, #4]
 8006424:	1809      	addeq	r1, r1, r0
 8006426:	6021      	streq	r1, [r4, #0]
 8006428:	e7ed      	b.n	8006406 <_free_r+0x1e>
 800642a:	461a      	mov	r2, r3
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	b10b      	cbz	r3, 8006434 <_free_r+0x4c>
 8006430:	42a3      	cmp	r3, r4
 8006432:	d9fa      	bls.n	800642a <_free_r+0x42>
 8006434:	6811      	ldr	r1, [r2, #0]
 8006436:	1850      	adds	r0, r2, r1
 8006438:	42a0      	cmp	r0, r4
 800643a:	d10b      	bne.n	8006454 <_free_r+0x6c>
 800643c:	6820      	ldr	r0, [r4, #0]
 800643e:	4401      	add	r1, r0
 8006440:	1850      	adds	r0, r2, r1
 8006442:	4283      	cmp	r3, r0
 8006444:	6011      	str	r1, [r2, #0]
 8006446:	d1e0      	bne.n	800640a <_free_r+0x22>
 8006448:	6818      	ldr	r0, [r3, #0]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	6053      	str	r3, [r2, #4]
 800644e:	4408      	add	r0, r1
 8006450:	6010      	str	r0, [r2, #0]
 8006452:	e7da      	b.n	800640a <_free_r+0x22>
 8006454:	d902      	bls.n	800645c <_free_r+0x74>
 8006456:	230c      	movs	r3, #12
 8006458:	602b      	str	r3, [r5, #0]
 800645a:	e7d6      	b.n	800640a <_free_r+0x22>
 800645c:	6820      	ldr	r0, [r4, #0]
 800645e:	1821      	adds	r1, r4, r0
 8006460:	428b      	cmp	r3, r1
 8006462:	bf04      	itt	eq
 8006464:	6819      	ldreq	r1, [r3, #0]
 8006466:	685b      	ldreq	r3, [r3, #4]
 8006468:	6063      	str	r3, [r4, #4]
 800646a:	bf04      	itt	eq
 800646c:	1809      	addeq	r1, r1, r0
 800646e:	6021      	streq	r1, [r4, #0]
 8006470:	6054      	str	r4, [r2, #4]
 8006472:	e7ca      	b.n	800640a <_free_r+0x22>
 8006474:	bd38      	pop	{r3, r4, r5, pc}
 8006476:	bf00      	nop
 8006478:	2000064c 	.word	0x2000064c

0800647c <malloc>:
 800647c:	4b02      	ldr	r3, [pc, #8]	@ (8006488 <malloc+0xc>)
 800647e:	4601      	mov	r1, r0
 8006480:	6818      	ldr	r0, [r3, #0]
 8006482:	f000 b825 	b.w	80064d0 <_malloc_r>
 8006486:	bf00      	nop
 8006488:	20000018 	.word	0x20000018

0800648c <sbrk_aligned>:
 800648c:	b570      	push	{r4, r5, r6, lr}
 800648e:	4e0f      	ldr	r6, [pc, #60]	@ (80064cc <sbrk_aligned+0x40>)
 8006490:	460c      	mov	r4, r1
 8006492:	6831      	ldr	r1, [r6, #0]
 8006494:	4605      	mov	r5, r0
 8006496:	b911      	cbnz	r1, 800649e <sbrk_aligned+0x12>
 8006498:	f000 fe46 	bl	8007128 <_sbrk_r>
 800649c:	6030      	str	r0, [r6, #0]
 800649e:	4621      	mov	r1, r4
 80064a0:	4628      	mov	r0, r5
 80064a2:	f000 fe41 	bl	8007128 <_sbrk_r>
 80064a6:	1c43      	adds	r3, r0, #1
 80064a8:	d103      	bne.n	80064b2 <sbrk_aligned+0x26>
 80064aa:	f04f 34ff 	mov.w	r4, #4294967295
 80064ae:	4620      	mov	r0, r4
 80064b0:	bd70      	pop	{r4, r5, r6, pc}
 80064b2:	1cc4      	adds	r4, r0, #3
 80064b4:	f024 0403 	bic.w	r4, r4, #3
 80064b8:	42a0      	cmp	r0, r4
 80064ba:	d0f8      	beq.n	80064ae <sbrk_aligned+0x22>
 80064bc:	1a21      	subs	r1, r4, r0
 80064be:	4628      	mov	r0, r5
 80064c0:	f000 fe32 	bl	8007128 <_sbrk_r>
 80064c4:	3001      	adds	r0, #1
 80064c6:	d1f2      	bne.n	80064ae <sbrk_aligned+0x22>
 80064c8:	e7ef      	b.n	80064aa <sbrk_aligned+0x1e>
 80064ca:	bf00      	nop
 80064cc:	20000648 	.word	0x20000648

080064d0 <_malloc_r>:
 80064d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064d4:	1ccd      	adds	r5, r1, #3
 80064d6:	f025 0503 	bic.w	r5, r5, #3
 80064da:	3508      	adds	r5, #8
 80064dc:	2d0c      	cmp	r5, #12
 80064de:	bf38      	it	cc
 80064e0:	250c      	movcc	r5, #12
 80064e2:	2d00      	cmp	r5, #0
 80064e4:	4606      	mov	r6, r0
 80064e6:	db01      	blt.n	80064ec <_malloc_r+0x1c>
 80064e8:	42a9      	cmp	r1, r5
 80064ea:	d904      	bls.n	80064f6 <_malloc_r+0x26>
 80064ec:	230c      	movs	r3, #12
 80064ee:	6033      	str	r3, [r6, #0]
 80064f0:	2000      	movs	r0, #0
 80064f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80065cc <_malloc_r+0xfc>
 80064fa:	f000 f869 	bl	80065d0 <__malloc_lock>
 80064fe:	f8d8 3000 	ldr.w	r3, [r8]
 8006502:	461c      	mov	r4, r3
 8006504:	bb44      	cbnz	r4, 8006558 <_malloc_r+0x88>
 8006506:	4629      	mov	r1, r5
 8006508:	4630      	mov	r0, r6
 800650a:	f7ff ffbf 	bl	800648c <sbrk_aligned>
 800650e:	1c43      	adds	r3, r0, #1
 8006510:	4604      	mov	r4, r0
 8006512:	d158      	bne.n	80065c6 <_malloc_r+0xf6>
 8006514:	f8d8 4000 	ldr.w	r4, [r8]
 8006518:	4627      	mov	r7, r4
 800651a:	2f00      	cmp	r7, #0
 800651c:	d143      	bne.n	80065a6 <_malloc_r+0xd6>
 800651e:	2c00      	cmp	r4, #0
 8006520:	d04b      	beq.n	80065ba <_malloc_r+0xea>
 8006522:	6823      	ldr	r3, [r4, #0]
 8006524:	4639      	mov	r1, r7
 8006526:	4630      	mov	r0, r6
 8006528:	eb04 0903 	add.w	r9, r4, r3
 800652c:	f000 fdfc 	bl	8007128 <_sbrk_r>
 8006530:	4581      	cmp	r9, r0
 8006532:	d142      	bne.n	80065ba <_malloc_r+0xea>
 8006534:	6821      	ldr	r1, [r4, #0]
 8006536:	1a6d      	subs	r5, r5, r1
 8006538:	4629      	mov	r1, r5
 800653a:	4630      	mov	r0, r6
 800653c:	f7ff ffa6 	bl	800648c <sbrk_aligned>
 8006540:	3001      	adds	r0, #1
 8006542:	d03a      	beq.n	80065ba <_malloc_r+0xea>
 8006544:	6823      	ldr	r3, [r4, #0]
 8006546:	442b      	add	r3, r5
 8006548:	6023      	str	r3, [r4, #0]
 800654a:	f8d8 3000 	ldr.w	r3, [r8]
 800654e:	685a      	ldr	r2, [r3, #4]
 8006550:	bb62      	cbnz	r2, 80065ac <_malloc_r+0xdc>
 8006552:	f8c8 7000 	str.w	r7, [r8]
 8006556:	e00f      	b.n	8006578 <_malloc_r+0xa8>
 8006558:	6822      	ldr	r2, [r4, #0]
 800655a:	1b52      	subs	r2, r2, r5
 800655c:	d420      	bmi.n	80065a0 <_malloc_r+0xd0>
 800655e:	2a0b      	cmp	r2, #11
 8006560:	d917      	bls.n	8006592 <_malloc_r+0xc2>
 8006562:	1961      	adds	r1, r4, r5
 8006564:	42a3      	cmp	r3, r4
 8006566:	6025      	str	r5, [r4, #0]
 8006568:	bf18      	it	ne
 800656a:	6059      	strne	r1, [r3, #4]
 800656c:	6863      	ldr	r3, [r4, #4]
 800656e:	bf08      	it	eq
 8006570:	f8c8 1000 	streq.w	r1, [r8]
 8006574:	5162      	str	r2, [r4, r5]
 8006576:	604b      	str	r3, [r1, #4]
 8006578:	4630      	mov	r0, r6
 800657a:	f000 f82f 	bl	80065dc <__malloc_unlock>
 800657e:	f104 000b 	add.w	r0, r4, #11
 8006582:	1d23      	adds	r3, r4, #4
 8006584:	f020 0007 	bic.w	r0, r0, #7
 8006588:	1ac2      	subs	r2, r0, r3
 800658a:	bf1c      	itt	ne
 800658c:	1a1b      	subne	r3, r3, r0
 800658e:	50a3      	strne	r3, [r4, r2]
 8006590:	e7af      	b.n	80064f2 <_malloc_r+0x22>
 8006592:	6862      	ldr	r2, [r4, #4]
 8006594:	42a3      	cmp	r3, r4
 8006596:	bf0c      	ite	eq
 8006598:	f8c8 2000 	streq.w	r2, [r8]
 800659c:	605a      	strne	r2, [r3, #4]
 800659e:	e7eb      	b.n	8006578 <_malloc_r+0xa8>
 80065a0:	4623      	mov	r3, r4
 80065a2:	6864      	ldr	r4, [r4, #4]
 80065a4:	e7ae      	b.n	8006504 <_malloc_r+0x34>
 80065a6:	463c      	mov	r4, r7
 80065a8:	687f      	ldr	r7, [r7, #4]
 80065aa:	e7b6      	b.n	800651a <_malloc_r+0x4a>
 80065ac:	461a      	mov	r2, r3
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	42a3      	cmp	r3, r4
 80065b2:	d1fb      	bne.n	80065ac <_malloc_r+0xdc>
 80065b4:	2300      	movs	r3, #0
 80065b6:	6053      	str	r3, [r2, #4]
 80065b8:	e7de      	b.n	8006578 <_malloc_r+0xa8>
 80065ba:	230c      	movs	r3, #12
 80065bc:	6033      	str	r3, [r6, #0]
 80065be:	4630      	mov	r0, r6
 80065c0:	f000 f80c 	bl	80065dc <__malloc_unlock>
 80065c4:	e794      	b.n	80064f0 <_malloc_r+0x20>
 80065c6:	6005      	str	r5, [r0, #0]
 80065c8:	e7d6      	b.n	8006578 <_malloc_r+0xa8>
 80065ca:	bf00      	nop
 80065cc:	2000064c 	.word	0x2000064c

080065d0 <__malloc_lock>:
 80065d0:	4801      	ldr	r0, [pc, #4]	@ (80065d8 <__malloc_lock+0x8>)
 80065d2:	f7ff b8ac 	b.w	800572e <__retarget_lock_acquire_recursive>
 80065d6:	bf00      	nop
 80065d8:	20000644 	.word	0x20000644

080065dc <__malloc_unlock>:
 80065dc:	4801      	ldr	r0, [pc, #4]	@ (80065e4 <__malloc_unlock+0x8>)
 80065de:	f7ff b8a7 	b.w	8005730 <__retarget_lock_release_recursive>
 80065e2:	bf00      	nop
 80065e4:	20000644 	.word	0x20000644

080065e8 <_Balloc>:
 80065e8:	b570      	push	{r4, r5, r6, lr}
 80065ea:	69c6      	ldr	r6, [r0, #28]
 80065ec:	4604      	mov	r4, r0
 80065ee:	460d      	mov	r5, r1
 80065f0:	b976      	cbnz	r6, 8006610 <_Balloc+0x28>
 80065f2:	2010      	movs	r0, #16
 80065f4:	f7ff ff42 	bl	800647c <malloc>
 80065f8:	4602      	mov	r2, r0
 80065fa:	61e0      	str	r0, [r4, #28]
 80065fc:	b920      	cbnz	r0, 8006608 <_Balloc+0x20>
 80065fe:	4b18      	ldr	r3, [pc, #96]	@ (8006660 <_Balloc+0x78>)
 8006600:	4818      	ldr	r0, [pc, #96]	@ (8006664 <_Balloc+0x7c>)
 8006602:	216b      	movs	r1, #107	@ 0x6b
 8006604:	f000 fda0 	bl	8007148 <__assert_func>
 8006608:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800660c:	6006      	str	r6, [r0, #0]
 800660e:	60c6      	str	r6, [r0, #12]
 8006610:	69e6      	ldr	r6, [r4, #28]
 8006612:	68f3      	ldr	r3, [r6, #12]
 8006614:	b183      	cbz	r3, 8006638 <_Balloc+0x50>
 8006616:	69e3      	ldr	r3, [r4, #28]
 8006618:	68db      	ldr	r3, [r3, #12]
 800661a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800661e:	b9b8      	cbnz	r0, 8006650 <_Balloc+0x68>
 8006620:	2101      	movs	r1, #1
 8006622:	fa01 f605 	lsl.w	r6, r1, r5
 8006626:	1d72      	adds	r2, r6, #5
 8006628:	0092      	lsls	r2, r2, #2
 800662a:	4620      	mov	r0, r4
 800662c:	f000 fdaa 	bl	8007184 <_calloc_r>
 8006630:	b160      	cbz	r0, 800664c <_Balloc+0x64>
 8006632:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006636:	e00e      	b.n	8006656 <_Balloc+0x6e>
 8006638:	2221      	movs	r2, #33	@ 0x21
 800663a:	2104      	movs	r1, #4
 800663c:	4620      	mov	r0, r4
 800663e:	f000 fda1 	bl	8007184 <_calloc_r>
 8006642:	69e3      	ldr	r3, [r4, #28]
 8006644:	60f0      	str	r0, [r6, #12]
 8006646:	68db      	ldr	r3, [r3, #12]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d1e4      	bne.n	8006616 <_Balloc+0x2e>
 800664c:	2000      	movs	r0, #0
 800664e:	bd70      	pop	{r4, r5, r6, pc}
 8006650:	6802      	ldr	r2, [r0, #0]
 8006652:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006656:	2300      	movs	r3, #0
 8006658:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800665c:	e7f7      	b.n	800664e <_Balloc+0x66>
 800665e:	bf00      	nop
 8006660:	08007f5d 	.word	0x08007f5d
 8006664:	08007fdd 	.word	0x08007fdd

08006668 <_Bfree>:
 8006668:	b570      	push	{r4, r5, r6, lr}
 800666a:	69c6      	ldr	r6, [r0, #28]
 800666c:	4605      	mov	r5, r0
 800666e:	460c      	mov	r4, r1
 8006670:	b976      	cbnz	r6, 8006690 <_Bfree+0x28>
 8006672:	2010      	movs	r0, #16
 8006674:	f7ff ff02 	bl	800647c <malloc>
 8006678:	4602      	mov	r2, r0
 800667a:	61e8      	str	r0, [r5, #28]
 800667c:	b920      	cbnz	r0, 8006688 <_Bfree+0x20>
 800667e:	4b09      	ldr	r3, [pc, #36]	@ (80066a4 <_Bfree+0x3c>)
 8006680:	4809      	ldr	r0, [pc, #36]	@ (80066a8 <_Bfree+0x40>)
 8006682:	218f      	movs	r1, #143	@ 0x8f
 8006684:	f000 fd60 	bl	8007148 <__assert_func>
 8006688:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800668c:	6006      	str	r6, [r0, #0]
 800668e:	60c6      	str	r6, [r0, #12]
 8006690:	b13c      	cbz	r4, 80066a2 <_Bfree+0x3a>
 8006692:	69eb      	ldr	r3, [r5, #28]
 8006694:	6862      	ldr	r2, [r4, #4]
 8006696:	68db      	ldr	r3, [r3, #12]
 8006698:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800669c:	6021      	str	r1, [r4, #0]
 800669e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80066a2:	bd70      	pop	{r4, r5, r6, pc}
 80066a4:	08007f5d 	.word	0x08007f5d
 80066a8:	08007fdd 	.word	0x08007fdd

080066ac <__multadd>:
 80066ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066b0:	690d      	ldr	r5, [r1, #16]
 80066b2:	4607      	mov	r7, r0
 80066b4:	460c      	mov	r4, r1
 80066b6:	461e      	mov	r6, r3
 80066b8:	f101 0c14 	add.w	ip, r1, #20
 80066bc:	2000      	movs	r0, #0
 80066be:	f8dc 3000 	ldr.w	r3, [ip]
 80066c2:	b299      	uxth	r1, r3
 80066c4:	fb02 6101 	mla	r1, r2, r1, r6
 80066c8:	0c1e      	lsrs	r6, r3, #16
 80066ca:	0c0b      	lsrs	r3, r1, #16
 80066cc:	fb02 3306 	mla	r3, r2, r6, r3
 80066d0:	b289      	uxth	r1, r1
 80066d2:	3001      	adds	r0, #1
 80066d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80066d8:	4285      	cmp	r5, r0
 80066da:	f84c 1b04 	str.w	r1, [ip], #4
 80066de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80066e2:	dcec      	bgt.n	80066be <__multadd+0x12>
 80066e4:	b30e      	cbz	r6, 800672a <__multadd+0x7e>
 80066e6:	68a3      	ldr	r3, [r4, #8]
 80066e8:	42ab      	cmp	r3, r5
 80066ea:	dc19      	bgt.n	8006720 <__multadd+0x74>
 80066ec:	6861      	ldr	r1, [r4, #4]
 80066ee:	4638      	mov	r0, r7
 80066f0:	3101      	adds	r1, #1
 80066f2:	f7ff ff79 	bl	80065e8 <_Balloc>
 80066f6:	4680      	mov	r8, r0
 80066f8:	b928      	cbnz	r0, 8006706 <__multadd+0x5a>
 80066fa:	4602      	mov	r2, r0
 80066fc:	4b0c      	ldr	r3, [pc, #48]	@ (8006730 <__multadd+0x84>)
 80066fe:	480d      	ldr	r0, [pc, #52]	@ (8006734 <__multadd+0x88>)
 8006700:	21ba      	movs	r1, #186	@ 0xba
 8006702:	f000 fd21 	bl	8007148 <__assert_func>
 8006706:	6922      	ldr	r2, [r4, #16]
 8006708:	3202      	adds	r2, #2
 800670a:	f104 010c 	add.w	r1, r4, #12
 800670e:	0092      	lsls	r2, r2, #2
 8006710:	300c      	adds	r0, #12
 8006712:	f7ff f80e 	bl	8005732 <memcpy>
 8006716:	4621      	mov	r1, r4
 8006718:	4638      	mov	r0, r7
 800671a:	f7ff ffa5 	bl	8006668 <_Bfree>
 800671e:	4644      	mov	r4, r8
 8006720:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006724:	3501      	adds	r5, #1
 8006726:	615e      	str	r6, [r3, #20]
 8006728:	6125      	str	r5, [r4, #16]
 800672a:	4620      	mov	r0, r4
 800672c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006730:	08007fcc 	.word	0x08007fcc
 8006734:	08007fdd 	.word	0x08007fdd

08006738 <__hi0bits>:
 8006738:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800673c:	4603      	mov	r3, r0
 800673e:	bf36      	itet	cc
 8006740:	0403      	lslcc	r3, r0, #16
 8006742:	2000      	movcs	r0, #0
 8006744:	2010      	movcc	r0, #16
 8006746:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800674a:	bf3c      	itt	cc
 800674c:	021b      	lslcc	r3, r3, #8
 800674e:	3008      	addcc	r0, #8
 8006750:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006754:	bf3c      	itt	cc
 8006756:	011b      	lslcc	r3, r3, #4
 8006758:	3004      	addcc	r0, #4
 800675a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800675e:	bf3c      	itt	cc
 8006760:	009b      	lslcc	r3, r3, #2
 8006762:	3002      	addcc	r0, #2
 8006764:	2b00      	cmp	r3, #0
 8006766:	db05      	blt.n	8006774 <__hi0bits+0x3c>
 8006768:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800676c:	f100 0001 	add.w	r0, r0, #1
 8006770:	bf08      	it	eq
 8006772:	2020      	moveq	r0, #32
 8006774:	4770      	bx	lr

08006776 <__lo0bits>:
 8006776:	6803      	ldr	r3, [r0, #0]
 8006778:	4602      	mov	r2, r0
 800677a:	f013 0007 	ands.w	r0, r3, #7
 800677e:	d00b      	beq.n	8006798 <__lo0bits+0x22>
 8006780:	07d9      	lsls	r1, r3, #31
 8006782:	d421      	bmi.n	80067c8 <__lo0bits+0x52>
 8006784:	0798      	lsls	r0, r3, #30
 8006786:	bf49      	itett	mi
 8006788:	085b      	lsrmi	r3, r3, #1
 800678a:	089b      	lsrpl	r3, r3, #2
 800678c:	2001      	movmi	r0, #1
 800678e:	6013      	strmi	r3, [r2, #0]
 8006790:	bf5c      	itt	pl
 8006792:	6013      	strpl	r3, [r2, #0]
 8006794:	2002      	movpl	r0, #2
 8006796:	4770      	bx	lr
 8006798:	b299      	uxth	r1, r3
 800679a:	b909      	cbnz	r1, 80067a0 <__lo0bits+0x2a>
 800679c:	0c1b      	lsrs	r3, r3, #16
 800679e:	2010      	movs	r0, #16
 80067a0:	b2d9      	uxtb	r1, r3
 80067a2:	b909      	cbnz	r1, 80067a8 <__lo0bits+0x32>
 80067a4:	3008      	adds	r0, #8
 80067a6:	0a1b      	lsrs	r3, r3, #8
 80067a8:	0719      	lsls	r1, r3, #28
 80067aa:	bf04      	itt	eq
 80067ac:	091b      	lsreq	r3, r3, #4
 80067ae:	3004      	addeq	r0, #4
 80067b0:	0799      	lsls	r1, r3, #30
 80067b2:	bf04      	itt	eq
 80067b4:	089b      	lsreq	r3, r3, #2
 80067b6:	3002      	addeq	r0, #2
 80067b8:	07d9      	lsls	r1, r3, #31
 80067ba:	d403      	bmi.n	80067c4 <__lo0bits+0x4e>
 80067bc:	085b      	lsrs	r3, r3, #1
 80067be:	f100 0001 	add.w	r0, r0, #1
 80067c2:	d003      	beq.n	80067cc <__lo0bits+0x56>
 80067c4:	6013      	str	r3, [r2, #0]
 80067c6:	4770      	bx	lr
 80067c8:	2000      	movs	r0, #0
 80067ca:	4770      	bx	lr
 80067cc:	2020      	movs	r0, #32
 80067ce:	4770      	bx	lr

080067d0 <__i2b>:
 80067d0:	b510      	push	{r4, lr}
 80067d2:	460c      	mov	r4, r1
 80067d4:	2101      	movs	r1, #1
 80067d6:	f7ff ff07 	bl	80065e8 <_Balloc>
 80067da:	4602      	mov	r2, r0
 80067dc:	b928      	cbnz	r0, 80067ea <__i2b+0x1a>
 80067de:	4b05      	ldr	r3, [pc, #20]	@ (80067f4 <__i2b+0x24>)
 80067e0:	4805      	ldr	r0, [pc, #20]	@ (80067f8 <__i2b+0x28>)
 80067e2:	f240 1145 	movw	r1, #325	@ 0x145
 80067e6:	f000 fcaf 	bl	8007148 <__assert_func>
 80067ea:	2301      	movs	r3, #1
 80067ec:	6144      	str	r4, [r0, #20]
 80067ee:	6103      	str	r3, [r0, #16]
 80067f0:	bd10      	pop	{r4, pc}
 80067f2:	bf00      	nop
 80067f4:	08007fcc 	.word	0x08007fcc
 80067f8:	08007fdd 	.word	0x08007fdd

080067fc <__multiply>:
 80067fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006800:	4614      	mov	r4, r2
 8006802:	690a      	ldr	r2, [r1, #16]
 8006804:	6923      	ldr	r3, [r4, #16]
 8006806:	429a      	cmp	r2, r3
 8006808:	bfa8      	it	ge
 800680a:	4623      	movge	r3, r4
 800680c:	460f      	mov	r7, r1
 800680e:	bfa4      	itt	ge
 8006810:	460c      	movge	r4, r1
 8006812:	461f      	movge	r7, r3
 8006814:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006818:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800681c:	68a3      	ldr	r3, [r4, #8]
 800681e:	6861      	ldr	r1, [r4, #4]
 8006820:	eb0a 0609 	add.w	r6, sl, r9
 8006824:	42b3      	cmp	r3, r6
 8006826:	b085      	sub	sp, #20
 8006828:	bfb8      	it	lt
 800682a:	3101      	addlt	r1, #1
 800682c:	f7ff fedc 	bl	80065e8 <_Balloc>
 8006830:	b930      	cbnz	r0, 8006840 <__multiply+0x44>
 8006832:	4602      	mov	r2, r0
 8006834:	4b44      	ldr	r3, [pc, #272]	@ (8006948 <__multiply+0x14c>)
 8006836:	4845      	ldr	r0, [pc, #276]	@ (800694c <__multiply+0x150>)
 8006838:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800683c:	f000 fc84 	bl	8007148 <__assert_func>
 8006840:	f100 0514 	add.w	r5, r0, #20
 8006844:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006848:	462b      	mov	r3, r5
 800684a:	2200      	movs	r2, #0
 800684c:	4543      	cmp	r3, r8
 800684e:	d321      	bcc.n	8006894 <__multiply+0x98>
 8006850:	f107 0114 	add.w	r1, r7, #20
 8006854:	f104 0214 	add.w	r2, r4, #20
 8006858:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800685c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006860:	9302      	str	r3, [sp, #8]
 8006862:	1b13      	subs	r3, r2, r4
 8006864:	3b15      	subs	r3, #21
 8006866:	f023 0303 	bic.w	r3, r3, #3
 800686a:	3304      	adds	r3, #4
 800686c:	f104 0715 	add.w	r7, r4, #21
 8006870:	42ba      	cmp	r2, r7
 8006872:	bf38      	it	cc
 8006874:	2304      	movcc	r3, #4
 8006876:	9301      	str	r3, [sp, #4]
 8006878:	9b02      	ldr	r3, [sp, #8]
 800687a:	9103      	str	r1, [sp, #12]
 800687c:	428b      	cmp	r3, r1
 800687e:	d80c      	bhi.n	800689a <__multiply+0x9e>
 8006880:	2e00      	cmp	r6, #0
 8006882:	dd03      	ble.n	800688c <__multiply+0x90>
 8006884:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006888:	2b00      	cmp	r3, #0
 800688a:	d05b      	beq.n	8006944 <__multiply+0x148>
 800688c:	6106      	str	r6, [r0, #16]
 800688e:	b005      	add	sp, #20
 8006890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006894:	f843 2b04 	str.w	r2, [r3], #4
 8006898:	e7d8      	b.n	800684c <__multiply+0x50>
 800689a:	f8b1 a000 	ldrh.w	sl, [r1]
 800689e:	f1ba 0f00 	cmp.w	sl, #0
 80068a2:	d024      	beq.n	80068ee <__multiply+0xf2>
 80068a4:	f104 0e14 	add.w	lr, r4, #20
 80068a8:	46a9      	mov	r9, r5
 80068aa:	f04f 0c00 	mov.w	ip, #0
 80068ae:	f85e 7b04 	ldr.w	r7, [lr], #4
 80068b2:	f8d9 3000 	ldr.w	r3, [r9]
 80068b6:	fa1f fb87 	uxth.w	fp, r7
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	fb0a 330b 	mla	r3, sl, fp, r3
 80068c0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80068c4:	f8d9 7000 	ldr.w	r7, [r9]
 80068c8:	4463      	add	r3, ip
 80068ca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80068ce:	fb0a c70b 	mla	r7, sl, fp, ip
 80068d2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80068dc:	4572      	cmp	r2, lr
 80068de:	f849 3b04 	str.w	r3, [r9], #4
 80068e2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80068e6:	d8e2      	bhi.n	80068ae <__multiply+0xb2>
 80068e8:	9b01      	ldr	r3, [sp, #4]
 80068ea:	f845 c003 	str.w	ip, [r5, r3]
 80068ee:	9b03      	ldr	r3, [sp, #12]
 80068f0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80068f4:	3104      	adds	r1, #4
 80068f6:	f1b9 0f00 	cmp.w	r9, #0
 80068fa:	d021      	beq.n	8006940 <__multiply+0x144>
 80068fc:	682b      	ldr	r3, [r5, #0]
 80068fe:	f104 0c14 	add.w	ip, r4, #20
 8006902:	46ae      	mov	lr, r5
 8006904:	f04f 0a00 	mov.w	sl, #0
 8006908:	f8bc b000 	ldrh.w	fp, [ip]
 800690c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006910:	fb09 770b 	mla	r7, r9, fp, r7
 8006914:	4457      	add	r7, sl
 8006916:	b29b      	uxth	r3, r3
 8006918:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800691c:	f84e 3b04 	str.w	r3, [lr], #4
 8006920:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006924:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006928:	f8be 3000 	ldrh.w	r3, [lr]
 800692c:	fb09 330a 	mla	r3, r9, sl, r3
 8006930:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006934:	4562      	cmp	r2, ip
 8006936:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800693a:	d8e5      	bhi.n	8006908 <__multiply+0x10c>
 800693c:	9f01      	ldr	r7, [sp, #4]
 800693e:	51eb      	str	r3, [r5, r7]
 8006940:	3504      	adds	r5, #4
 8006942:	e799      	b.n	8006878 <__multiply+0x7c>
 8006944:	3e01      	subs	r6, #1
 8006946:	e79b      	b.n	8006880 <__multiply+0x84>
 8006948:	08007fcc 	.word	0x08007fcc
 800694c:	08007fdd 	.word	0x08007fdd

08006950 <__pow5mult>:
 8006950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006954:	4615      	mov	r5, r2
 8006956:	f012 0203 	ands.w	r2, r2, #3
 800695a:	4607      	mov	r7, r0
 800695c:	460e      	mov	r6, r1
 800695e:	d007      	beq.n	8006970 <__pow5mult+0x20>
 8006960:	4c25      	ldr	r4, [pc, #148]	@ (80069f8 <__pow5mult+0xa8>)
 8006962:	3a01      	subs	r2, #1
 8006964:	2300      	movs	r3, #0
 8006966:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800696a:	f7ff fe9f 	bl	80066ac <__multadd>
 800696e:	4606      	mov	r6, r0
 8006970:	10ad      	asrs	r5, r5, #2
 8006972:	d03d      	beq.n	80069f0 <__pow5mult+0xa0>
 8006974:	69fc      	ldr	r4, [r7, #28]
 8006976:	b97c      	cbnz	r4, 8006998 <__pow5mult+0x48>
 8006978:	2010      	movs	r0, #16
 800697a:	f7ff fd7f 	bl	800647c <malloc>
 800697e:	4602      	mov	r2, r0
 8006980:	61f8      	str	r0, [r7, #28]
 8006982:	b928      	cbnz	r0, 8006990 <__pow5mult+0x40>
 8006984:	4b1d      	ldr	r3, [pc, #116]	@ (80069fc <__pow5mult+0xac>)
 8006986:	481e      	ldr	r0, [pc, #120]	@ (8006a00 <__pow5mult+0xb0>)
 8006988:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800698c:	f000 fbdc 	bl	8007148 <__assert_func>
 8006990:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006994:	6004      	str	r4, [r0, #0]
 8006996:	60c4      	str	r4, [r0, #12]
 8006998:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800699c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80069a0:	b94c      	cbnz	r4, 80069b6 <__pow5mult+0x66>
 80069a2:	f240 2171 	movw	r1, #625	@ 0x271
 80069a6:	4638      	mov	r0, r7
 80069a8:	f7ff ff12 	bl	80067d0 <__i2b>
 80069ac:	2300      	movs	r3, #0
 80069ae:	f8c8 0008 	str.w	r0, [r8, #8]
 80069b2:	4604      	mov	r4, r0
 80069b4:	6003      	str	r3, [r0, #0]
 80069b6:	f04f 0900 	mov.w	r9, #0
 80069ba:	07eb      	lsls	r3, r5, #31
 80069bc:	d50a      	bpl.n	80069d4 <__pow5mult+0x84>
 80069be:	4631      	mov	r1, r6
 80069c0:	4622      	mov	r2, r4
 80069c2:	4638      	mov	r0, r7
 80069c4:	f7ff ff1a 	bl	80067fc <__multiply>
 80069c8:	4631      	mov	r1, r6
 80069ca:	4680      	mov	r8, r0
 80069cc:	4638      	mov	r0, r7
 80069ce:	f7ff fe4b 	bl	8006668 <_Bfree>
 80069d2:	4646      	mov	r6, r8
 80069d4:	106d      	asrs	r5, r5, #1
 80069d6:	d00b      	beq.n	80069f0 <__pow5mult+0xa0>
 80069d8:	6820      	ldr	r0, [r4, #0]
 80069da:	b938      	cbnz	r0, 80069ec <__pow5mult+0x9c>
 80069dc:	4622      	mov	r2, r4
 80069de:	4621      	mov	r1, r4
 80069e0:	4638      	mov	r0, r7
 80069e2:	f7ff ff0b 	bl	80067fc <__multiply>
 80069e6:	6020      	str	r0, [r4, #0]
 80069e8:	f8c0 9000 	str.w	r9, [r0]
 80069ec:	4604      	mov	r4, r0
 80069ee:	e7e4      	b.n	80069ba <__pow5mult+0x6a>
 80069f0:	4630      	mov	r0, r6
 80069f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069f6:	bf00      	nop
 80069f8:	08008038 	.word	0x08008038
 80069fc:	08007f5d 	.word	0x08007f5d
 8006a00:	08007fdd 	.word	0x08007fdd

08006a04 <__lshift>:
 8006a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a08:	460c      	mov	r4, r1
 8006a0a:	6849      	ldr	r1, [r1, #4]
 8006a0c:	6923      	ldr	r3, [r4, #16]
 8006a0e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006a12:	68a3      	ldr	r3, [r4, #8]
 8006a14:	4607      	mov	r7, r0
 8006a16:	4691      	mov	r9, r2
 8006a18:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006a1c:	f108 0601 	add.w	r6, r8, #1
 8006a20:	42b3      	cmp	r3, r6
 8006a22:	db0b      	blt.n	8006a3c <__lshift+0x38>
 8006a24:	4638      	mov	r0, r7
 8006a26:	f7ff fddf 	bl	80065e8 <_Balloc>
 8006a2a:	4605      	mov	r5, r0
 8006a2c:	b948      	cbnz	r0, 8006a42 <__lshift+0x3e>
 8006a2e:	4602      	mov	r2, r0
 8006a30:	4b28      	ldr	r3, [pc, #160]	@ (8006ad4 <__lshift+0xd0>)
 8006a32:	4829      	ldr	r0, [pc, #164]	@ (8006ad8 <__lshift+0xd4>)
 8006a34:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006a38:	f000 fb86 	bl	8007148 <__assert_func>
 8006a3c:	3101      	adds	r1, #1
 8006a3e:	005b      	lsls	r3, r3, #1
 8006a40:	e7ee      	b.n	8006a20 <__lshift+0x1c>
 8006a42:	2300      	movs	r3, #0
 8006a44:	f100 0114 	add.w	r1, r0, #20
 8006a48:	f100 0210 	add.w	r2, r0, #16
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	4553      	cmp	r3, sl
 8006a50:	db33      	blt.n	8006aba <__lshift+0xb6>
 8006a52:	6920      	ldr	r0, [r4, #16]
 8006a54:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006a58:	f104 0314 	add.w	r3, r4, #20
 8006a5c:	f019 091f 	ands.w	r9, r9, #31
 8006a60:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006a64:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006a68:	d02b      	beq.n	8006ac2 <__lshift+0xbe>
 8006a6a:	f1c9 0e20 	rsb	lr, r9, #32
 8006a6e:	468a      	mov	sl, r1
 8006a70:	2200      	movs	r2, #0
 8006a72:	6818      	ldr	r0, [r3, #0]
 8006a74:	fa00 f009 	lsl.w	r0, r0, r9
 8006a78:	4310      	orrs	r0, r2
 8006a7a:	f84a 0b04 	str.w	r0, [sl], #4
 8006a7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a82:	459c      	cmp	ip, r3
 8006a84:	fa22 f20e 	lsr.w	r2, r2, lr
 8006a88:	d8f3      	bhi.n	8006a72 <__lshift+0x6e>
 8006a8a:	ebac 0304 	sub.w	r3, ip, r4
 8006a8e:	3b15      	subs	r3, #21
 8006a90:	f023 0303 	bic.w	r3, r3, #3
 8006a94:	3304      	adds	r3, #4
 8006a96:	f104 0015 	add.w	r0, r4, #21
 8006a9a:	4584      	cmp	ip, r0
 8006a9c:	bf38      	it	cc
 8006a9e:	2304      	movcc	r3, #4
 8006aa0:	50ca      	str	r2, [r1, r3]
 8006aa2:	b10a      	cbz	r2, 8006aa8 <__lshift+0xa4>
 8006aa4:	f108 0602 	add.w	r6, r8, #2
 8006aa8:	3e01      	subs	r6, #1
 8006aaa:	4638      	mov	r0, r7
 8006aac:	612e      	str	r6, [r5, #16]
 8006aae:	4621      	mov	r1, r4
 8006ab0:	f7ff fdda 	bl	8006668 <_Bfree>
 8006ab4:	4628      	mov	r0, r5
 8006ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aba:	f842 0f04 	str.w	r0, [r2, #4]!
 8006abe:	3301      	adds	r3, #1
 8006ac0:	e7c5      	b.n	8006a4e <__lshift+0x4a>
 8006ac2:	3904      	subs	r1, #4
 8006ac4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ac8:	f841 2f04 	str.w	r2, [r1, #4]!
 8006acc:	459c      	cmp	ip, r3
 8006ace:	d8f9      	bhi.n	8006ac4 <__lshift+0xc0>
 8006ad0:	e7ea      	b.n	8006aa8 <__lshift+0xa4>
 8006ad2:	bf00      	nop
 8006ad4:	08007fcc 	.word	0x08007fcc
 8006ad8:	08007fdd 	.word	0x08007fdd

08006adc <__mcmp>:
 8006adc:	690a      	ldr	r2, [r1, #16]
 8006ade:	4603      	mov	r3, r0
 8006ae0:	6900      	ldr	r0, [r0, #16]
 8006ae2:	1a80      	subs	r0, r0, r2
 8006ae4:	b530      	push	{r4, r5, lr}
 8006ae6:	d10e      	bne.n	8006b06 <__mcmp+0x2a>
 8006ae8:	3314      	adds	r3, #20
 8006aea:	3114      	adds	r1, #20
 8006aec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006af0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006af4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006af8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006afc:	4295      	cmp	r5, r2
 8006afe:	d003      	beq.n	8006b08 <__mcmp+0x2c>
 8006b00:	d205      	bcs.n	8006b0e <__mcmp+0x32>
 8006b02:	f04f 30ff 	mov.w	r0, #4294967295
 8006b06:	bd30      	pop	{r4, r5, pc}
 8006b08:	42a3      	cmp	r3, r4
 8006b0a:	d3f3      	bcc.n	8006af4 <__mcmp+0x18>
 8006b0c:	e7fb      	b.n	8006b06 <__mcmp+0x2a>
 8006b0e:	2001      	movs	r0, #1
 8006b10:	e7f9      	b.n	8006b06 <__mcmp+0x2a>
	...

08006b14 <__mdiff>:
 8006b14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b18:	4689      	mov	r9, r1
 8006b1a:	4606      	mov	r6, r0
 8006b1c:	4611      	mov	r1, r2
 8006b1e:	4648      	mov	r0, r9
 8006b20:	4614      	mov	r4, r2
 8006b22:	f7ff ffdb 	bl	8006adc <__mcmp>
 8006b26:	1e05      	subs	r5, r0, #0
 8006b28:	d112      	bne.n	8006b50 <__mdiff+0x3c>
 8006b2a:	4629      	mov	r1, r5
 8006b2c:	4630      	mov	r0, r6
 8006b2e:	f7ff fd5b 	bl	80065e8 <_Balloc>
 8006b32:	4602      	mov	r2, r0
 8006b34:	b928      	cbnz	r0, 8006b42 <__mdiff+0x2e>
 8006b36:	4b3f      	ldr	r3, [pc, #252]	@ (8006c34 <__mdiff+0x120>)
 8006b38:	f240 2137 	movw	r1, #567	@ 0x237
 8006b3c:	483e      	ldr	r0, [pc, #248]	@ (8006c38 <__mdiff+0x124>)
 8006b3e:	f000 fb03 	bl	8007148 <__assert_func>
 8006b42:	2301      	movs	r3, #1
 8006b44:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006b48:	4610      	mov	r0, r2
 8006b4a:	b003      	add	sp, #12
 8006b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b50:	bfbc      	itt	lt
 8006b52:	464b      	movlt	r3, r9
 8006b54:	46a1      	movlt	r9, r4
 8006b56:	4630      	mov	r0, r6
 8006b58:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006b5c:	bfba      	itte	lt
 8006b5e:	461c      	movlt	r4, r3
 8006b60:	2501      	movlt	r5, #1
 8006b62:	2500      	movge	r5, #0
 8006b64:	f7ff fd40 	bl	80065e8 <_Balloc>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	b918      	cbnz	r0, 8006b74 <__mdiff+0x60>
 8006b6c:	4b31      	ldr	r3, [pc, #196]	@ (8006c34 <__mdiff+0x120>)
 8006b6e:	f240 2145 	movw	r1, #581	@ 0x245
 8006b72:	e7e3      	b.n	8006b3c <__mdiff+0x28>
 8006b74:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006b78:	6926      	ldr	r6, [r4, #16]
 8006b7a:	60c5      	str	r5, [r0, #12]
 8006b7c:	f109 0310 	add.w	r3, r9, #16
 8006b80:	f109 0514 	add.w	r5, r9, #20
 8006b84:	f104 0e14 	add.w	lr, r4, #20
 8006b88:	f100 0b14 	add.w	fp, r0, #20
 8006b8c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006b90:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006b94:	9301      	str	r3, [sp, #4]
 8006b96:	46d9      	mov	r9, fp
 8006b98:	f04f 0c00 	mov.w	ip, #0
 8006b9c:	9b01      	ldr	r3, [sp, #4]
 8006b9e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006ba2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006ba6:	9301      	str	r3, [sp, #4]
 8006ba8:	fa1f f38a 	uxth.w	r3, sl
 8006bac:	4619      	mov	r1, r3
 8006bae:	b283      	uxth	r3, r0
 8006bb0:	1acb      	subs	r3, r1, r3
 8006bb2:	0c00      	lsrs	r0, r0, #16
 8006bb4:	4463      	add	r3, ip
 8006bb6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006bba:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006bbe:	b29b      	uxth	r3, r3
 8006bc0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006bc4:	4576      	cmp	r6, lr
 8006bc6:	f849 3b04 	str.w	r3, [r9], #4
 8006bca:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006bce:	d8e5      	bhi.n	8006b9c <__mdiff+0x88>
 8006bd0:	1b33      	subs	r3, r6, r4
 8006bd2:	3b15      	subs	r3, #21
 8006bd4:	f023 0303 	bic.w	r3, r3, #3
 8006bd8:	3415      	adds	r4, #21
 8006bda:	3304      	adds	r3, #4
 8006bdc:	42a6      	cmp	r6, r4
 8006bde:	bf38      	it	cc
 8006be0:	2304      	movcc	r3, #4
 8006be2:	441d      	add	r5, r3
 8006be4:	445b      	add	r3, fp
 8006be6:	461e      	mov	r6, r3
 8006be8:	462c      	mov	r4, r5
 8006bea:	4544      	cmp	r4, r8
 8006bec:	d30e      	bcc.n	8006c0c <__mdiff+0xf8>
 8006bee:	f108 0103 	add.w	r1, r8, #3
 8006bf2:	1b49      	subs	r1, r1, r5
 8006bf4:	f021 0103 	bic.w	r1, r1, #3
 8006bf8:	3d03      	subs	r5, #3
 8006bfa:	45a8      	cmp	r8, r5
 8006bfc:	bf38      	it	cc
 8006bfe:	2100      	movcc	r1, #0
 8006c00:	440b      	add	r3, r1
 8006c02:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006c06:	b191      	cbz	r1, 8006c2e <__mdiff+0x11a>
 8006c08:	6117      	str	r7, [r2, #16]
 8006c0a:	e79d      	b.n	8006b48 <__mdiff+0x34>
 8006c0c:	f854 1b04 	ldr.w	r1, [r4], #4
 8006c10:	46e6      	mov	lr, ip
 8006c12:	0c08      	lsrs	r0, r1, #16
 8006c14:	fa1c fc81 	uxtah	ip, ip, r1
 8006c18:	4471      	add	r1, lr
 8006c1a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006c1e:	b289      	uxth	r1, r1
 8006c20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006c24:	f846 1b04 	str.w	r1, [r6], #4
 8006c28:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006c2c:	e7dd      	b.n	8006bea <__mdiff+0xd6>
 8006c2e:	3f01      	subs	r7, #1
 8006c30:	e7e7      	b.n	8006c02 <__mdiff+0xee>
 8006c32:	bf00      	nop
 8006c34:	08007fcc 	.word	0x08007fcc
 8006c38:	08007fdd 	.word	0x08007fdd

08006c3c <__d2b>:
 8006c3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006c40:	460f      	mov	r7, r1
 8006c42:	2101      	movs	r1, #1
 8006c44:	ec59 8b10 	vmov	r8, r9, d0
 8006c48:	4616      	mov	r6, r2
 8006c4a:	f7ff fccd 	bl	80065e8 <_Balloc>
 8006c4e:	4604      	mov	r4, r0
 8006c50:	b930      	cbnz	r0, 8006c60 <__d2b+0x24>
 8006c52:	4602      	mov	r2, r0
 8006c54:	4b23      	ldr	r3, [pc, #140]	@ (8006ce4 <__d2b+0xa8>)
 8006c56:	4824      	ldr	r0, [pc, #144]	@ (8006ce8 <__d2b+0xac>)
 8006c58:	f240 310f 	movw	r1, #783	@ 0x30f
 8006c5c:	f000 fa74 	bl	8007148 <__assert_func>
 8006c60:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006c64:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006c68:	b10d      	cbz	r5, 8006c6e <__d2b+0x32>
 8006c6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006c6e:	9301      	str	r3, [sp, #4]
 8006c70:	f1b8 0300 	subs.w	r3, r8, #0
 8006c74:	d023      	beq.n	8006cbe <__d2b+0x82>
 8006c76:	4668      	mov	r0, sp
 8006c78:	9300      	str	r3, [sp, #0]
 8006c7a:	f7ff fd7c 	bl	8006776 <__lo0bits>
 8006c7e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006c82:	b1d0      	cbz	r0, 8006cba <__d2b+0x7e>
 8006c84:	f1c0 0320 	rsb	r3, r0, #32
 8006c88:	fa02 f303 	lsl.w	r3, r2, r3
 8006c8c:	430b      	orrs	r3, r1
 8006c8e:	40c2      	lsrs	r2, r0
 8006c90:	6163      	str	r3, [r4, #20]
 8006c92:	9201      	str	r2, [sp, #4]
 8006c94:	9b01      	ldr	r3, [sp, #4]
 8006c96:	61a3      	str	r3, [r4, #24]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	bf0c      	ite	eq
 8006c9c:	2201      	moveq	r2, #1
 8006c9e:	2202      	movne	r2, #2
 8006ca0:	6122      	str	r2, [r4, #16]
 8006ca2:	b1a5      	cbz	r5, 8006cce <__d2b+0x92>
 8006ca4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006ca8:	4405      	add	r5, r0
 8006caa:	603d      	str	r5, [r7, #0]
 8006cac:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006cb0:	6030      	str	r0, [r6, #0]
 8006cb2:	4620      	mov	r0, r4
 8006cb4:	b003      	add	sp, #12
 8006cb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006cba:	6161      	str	r1, [r4, #20]
 8006cbc:	e7ea      	b.n	8006c94 <__d2b+0x58>
 8006cbe:	a801      	add	r0, sp, #4
 8006cc0:	f7ff fd59 	bl	8006776 <__lo0bits>
 8006cc4:	9b01      	ldr	r3, [sp, #4]
 8006cc6:	6163      	str	r3, [r4, #20]
 8006cc8:	3020      	adds	r0, #32
 8006cca:	2201      	movs	r2, #1
 8006ccc:	e7e8      	b.n	8006ca0 <__d2b+0x64>
 8006cce:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006cd2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006cd6:	6038      	str	r0, [r7, #0]
 8006cd8:	6918      	ldr	r0, [r3, #16]
 8006cda:	f7ff fd2d 	bl	8006738 <__hi0bits>
 8006cde:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006ce2:	e7e5      	b.n	8006cb0 <__d2b+0x74>
 8006ce4:	08007fcc 	.word	0x08007fcc
 8006ce8:	08007fdd 	.word	0x08007fdd

08006cec <__ssputs_r>:
 8006cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cf0:	688e      	ldr	r6, [r1, #8]
 8006cf2:	461f      	mov	r7, r3
 8006cf4:	42be      	cmp	r6, r7
 8006cf6:	680b      	ldr	r3, [r1, #0]
 8006cf8:	4682      	mov	sl, r0
 8006cfa:	460c      	mov	r4, r1
 8006cfc:	4690      	mov	r8, r2
 8006cfe:	d82d      	bhi.n	8006d5c <__ssputs_r+0x70>
 8006d00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006d04:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006d08:	d026      	beq.n	8006d58 <__ssputs_r+0x6c>
 8006d0a:	6965      	ldr	r5, [r4, #20]
 8006d0c:	6909      	ldr	r1, [r1, #16]
 8006d0e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006d12:	eba3 0901 	sub.w	r9, r3, r1
 8006d16:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006d1a:	1c7b      	adds	r3, r7, #1
 8006d1c:	444b      	add	r3, r9
 8006d1e:	106d      	asrs	r5, r5, #1
 8006d20:	429d      	cmp	r5, r3
 8006d22:	bf38      	it	cc
 8006d24:	461d      	movcc	r5, r3
 8006d26:	0553      	lsls	r3, r2, #21
 8006d28:	d527      	bpl.n	8006d7a <__ssputs_r+0x8e>
 8006d2a:	4629      	mov	r1, r5
 8006d2c:	f7ff fbd0 	bl	80064d0 <_malloc_r>
 8006d30:	4606      	mov	r6, r0
 8006d32:	b360      	cbz	r0, 8006d8e <__ssputs_r+0xa2>
 8006d34:	6921      	ldr	r1, [r4, #16]
 8006d36:	464a      	mov	r2, r9
 8006d38:	f7fe fcfb 	bl	8005732 <memcpy>
 8006d3c:	89a3      	ldrh	r3, [r4, #12]
 8006d3e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006d42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d46:	81a3      	strh	r3, [r4, #12]
 8006d48:	6126      	str	r6, [r4, #16]
 8006d4a:	6165      	str	r5, [r4, #20]
 8006d4c:	444e      	add	r6, r9
 8006d4e:	eba5 0509 	sub.w	r5, r5, r9
 8006d52:	6026      	str	r6, [r4, #0]
 8006d54:	60a5      	str	r5, [r4, #8]
 8006d56:	463e      	mov	r6, r7
 8006d58:	42be      	cmp	r6, r7
 8006d5a:	d900      	bls.n	8006d5e <__ssputs_r+0x72>
 8006d5c:	463e      	mov	r6, r7
 8006d5e:	6820      	ldr	r0, [r4, #0]
 8006d60:	4632      	mov	r2, r6
 8006d62:	4641      	mov	r1, r8
 8006d64:	f000 f9c6 	bl	80070f4 <memmove>
 8006d68:	68a3      	ldr	r3, [r4, #8]
 8006d6a:	1b9b      	subs	r3, r3, r6
 8006d6c:	60a3      	str	r3, [r4, #8]
 8006d6e:	6823      	ldr	r3, [r4, #0]
 8006d70:	4433      	add	r3, r6
 8006d72:	6023      	str	r3, [r4, #0]
 8006d74:	2000      	movs	r0, #0
 8006d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d7a:	462a      	mov	r2, r5
 8006d7c:	f000 fa28 	bl	80071d0 <_realloc_r>
 8006d80:	4606      	mov	r6, r0
 8006d82:	2800      	cmp	r0, #0
 8006d84:	d1e0      	bne.n	8006d48 <__ssputs_r+0x5c>
 8006d86:	6921      	ldr	r1, [r4, #16]
 8006d88:	4650      	mov	r0, sl
 8006d8a:	f7ff fb2d 	bl	80063e8 <_free_r>
 8006d8e:	230c      	movs	r3, #12
 8006d90:	f8ca 3000 	str.w	r3, [sl]
 8006d94:	89a3      	ldrh	r3, [r4, #12]
 8006d96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d9a:	81a3      	strh	r3, [r4, #12]
 8006d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8006da0:	e7e9      	b.n	8006d76 <__ssputs_r+0x8a>
	...

08006da4 <_svfiprintf_r>:
 8006da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006da8:	4698      	mov	r8, r3
 8006daa:	898b      	ldrh	r3, [r1, #12]
 8006dac:	061b      	lsls	r3, r3, #24
 8006dae:	b09d      	sub	sp, #116	@ 0x74
 8006db0:	4607      	mov	r7, r0
 8006db2:	460d      	mov	r5, r1
 8006db4:	4614      	mov	r4, r2
 8006db6:	d510      	bpl.n	8006dda <_svfiprintf_r+0x36>
 8006db8:	690b      	ldr	r3, [r1, #16]
 8006dba:	b973      	cbnz	r3, 8006dda <_svfiprintf_r+0x36>
 8006dbc:	2140      	movs	r1, #64	@ 0x40
 8006dbe:	f7ff fb87 	bl	80064d0 <_malloc_r>
 8006dc2:	6028      	str	r0, [r5, #0]
 8006dc4:	6128      	str	r0, [r5, #16]
 8006dc6:	b930      	cbnz	r0, 8006dd6 <_svfiprintf_r+0x32>
 8006dc8:	230c      	movs	r3, #12
 8006dca:	603b      	str	r3, [r7, #0]
 8006dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8006dd0:	b01d      	add	sp, #116	@ 0x74
 8006dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dd6:	2340      	movs	r3, #64	@ 0x40
 8006dd8:	616b      	str	r3, [r5, #20]
 8006dda:	2300      	movs	r3, #0
 8006ddc:	9309      	str	r3, [sp, #36]	@ 0x24
 8006dde:	2320      	movs	r3, #32
 8006de0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006de4:	f8cd 800c 	str.w	r8, [sp, #12]
 8006de8:	2330      	movs	r3, #48	@ 0x30
 8006dea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006f88 <_svfiprintf_r+0x1e4>
 8006dee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006df2:	f04f 0901 	mov.w	r9, #1
 8006df6:	4623      	mov	r3, r4
 8006df8:	469a      	mov	sl, r3
 8006dfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006dfe:	b10a      	cbz	r2, 8006e04 <_svfiprintf_r+0x60>
 8006e00:	2a25      	cmp	r2, #37	@ 0x25
 8006e02:	d1f9      	bne.n	8006df8 <_svfiprintf_r+0x54>
 8006e04:	ebba 0b04 	subs.w	fp, sl, r4
 8006e08:	d00b      	beq.n	8006e22 <_svfiprintf_r+0x7e>
 8006e0a:	465b      	mov	r3, fp
 8006e0c:	4622      	mov	r2, r4
 8006e0e:	4629      	mov	r1, r5
 8006e10:	4638      	mov	r0, r7
 8006e12:	f7ff ff6b 	bl	8006cec <__ssputs_r>
 8006e16:	3001      	adds	r0, #1
 8006e18:	f000 80a7 	beq.w	8006f6a <_svfiprintf_r+0x1c6>
 8006e1c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006e1e:	445a      	add	r2, fp
 8006e20:	9209      	str	r2, [sp, #36]	@ 0x24
 8006e22:	f89a 3000 	ldrb.w	r3, [sl]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	f000 809f 	beq.w	8006f6a <_svfiprintf_r+0x1c6>
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	f04f 32ff 	mov.w	r2, #4294967295
 8006e32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e36:	f10a 0a01 	add.w	sl, sl, #1
 8006e3a:	9304      	str	r3, [sp, #16]
 8006e3c:	9307      	str	r3, [sp, #28]
 8006e3e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006e42:	931a      	str	r3, [sp, #104]	@ 0x68
 8006e44:	4654      	mov	r4, sl
 8006e46:	2205      	movs	r2, #5
 8006e48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e4c:	484e      	ldr	r0, [pc, #312]	@ (8006f88 <_svfiprintf_r+0x1e4>)
 8006e4e:	f7f9 f9bf 	bl	80001d0 <memchr>
 8006e52:	9a04      	ldr	r2, [sp, #16]
 8006e54:	b9d8      	cbnz	r0, 8006e8e <_svfiprintf_r+0xea>
 8006e56:	06d0      	lsls	r0, r2, #27
 8006e58:	bf44      	itt	mi
 8006e5a:	2320      	movmi	r3, #32
 8006e5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006e60:	0711      	lsls	r1, r2, #28
 8006e62:	bf44      	itt	mi
 8006e64:	232b      	movmi	r3, #43	@ 0x2b
 8006e66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006e6a:	f89a 3000 	ldrb.w	r3, [sl]
 8006e6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e70:	d015      	beq.n	8006e9e <_svfiprintf_r+0xfa>
 8006e72:	9a07      	ldr	r2, [sp, #28]
 8006e74:	4654      	mov	r4, sl
 8006e76:	2000      	movs	r0, #0
 8006e78:	f04f 0c0a 	mov.w	ip, #10
 8006e7c:	4621      	mov	r1, r4
 8006e7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e82:	3b30      	subs	r3, #48	@ 0x30
 8006e84:	2b09      	cmp	r3, #9
 8006e86:	d94b      	bls.n	8006f20 <_svfiprintf_r+0x17c>
 8006e88:	b1b0      	cbz	r0, 8006eb8 <_svfiprintf_r+0x114>
 8006e8a:	9207      	str	r2, [sp, #28]
 8006e8c:	e014      	b.n	8006eb8 <_svfiprintf_r+0x114>
 8006e8e:	eba0 0308 	sub.w	r3, r0, r8
 8006e92:	fa09 f303 	lsl.w	r3, r9, r3
 8006e96:	4313      	orrs	r3, r2
 8006e98:	9304      	str	r3, [sp, #16]
 8006e9a:	46a2      	mov	sl, r4
 8006e9c:	e7d2      	b.n	8006e44 <_svfiprintf_r+0xa0>
 8006e9e:	9b03      	ldr	r3, [sp, #12]
 8006ea0:	1d19      	adds	r1, r3, #4
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	9103      	str	r1, [sp, #12]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	bfbb      	ittet	lt
 8006eaa:	425b      	neglt	r3, r3
 8006eac:	f042 0202 	orrlt.w	r2, r2, #2
 8006eb0:	9307      	strge	r3, [sp, #28]
 8006eb2:	9307      	strlt	r3, [sp, #28]
 8006eb4:	bfb8      	it	lt
 8006eb6:	9204      	strlt	r2, [sp, #16]
 8006eb8:	7823      	ldrb	r3, [r4, #0]
 8006eba:	2b2e      	cmp	r3, #46	@ 0x2e
 8006ebc:	d10a      	bne.n	8006ed4 <_svfiprintf_r+0x130>
 8006ebe:	7863      	ldrb	r3, [r4, #1]
 8006ec0:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ec2:	d132      	bne.n	8006f2a <_svfiprintf_r+0x186>
 8006ec4:	9b03      	ldr	r3, [sp, #12]
 8006ec6:	1d1a      	adds	r2, r3, #4
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	9203      	str	r2, [sp, #12]
 8006ecc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006ed0:	3402      	adds	r4, #2
 8006ed2:	9305      	str	r3, [sp, #20]
 8006ed4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006f98 <_svfiprintf_r+0x1f4>
 8006ed8:	7821      	ldrb	r1, [r4, #0]
 8006eda:	2203      	movs	r2, #3
 8006edc:	4650      	mov	r0, sl
 8006ede:	f7f9 f977 	bl	80001d0 <memchr>
 8006ee2:	b138      	cbz	r0, 8006ef4 <_svfiprintf_r+0x150>
 8006ee4:	9b04      	ldr	r3, [sp, #16]
 8006ee6:	eba0 000a 	sub.w	r0, r0, sl
 8006eea:	2240      	movs	r2, #64	@ 0x40
 8006eec:	4082      	lsls	r2, r0
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	3401      	adds	r4, #1
 8006ef2:	9304      	str	r3, [sp, #16]
 8006ef4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ef8:	4824      	ldr	r0, [pc, #144]	@ (8006f8c <_svfiprintf_r+0x1e8>)
 8006efa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006efe:	2206      	movs	r2, #6
 8006f00:	f7f9 f966 	bl	80001d0 <memchr>
 8006f04:	2800      	cmp	r0, #0
 8006f06:	d036      	beq.n	8006f76 <_svfiprintf_r+0x1d2>
 8006f08:	4b21      	ldr	r3, [pc, #132]	@ (8006f90 <_svfiprintf_r+0x1ec>)
 8006f0a:	bb1b      	cbnz	r3, 8006f54 <_svfiprintf_r+0x1b0>
 8006f0c:	9b03      	ldr	r3, [sp, #12]
 8006f0e:	3307      	adds	r3, #7
 8006f10:	f023 0307 	bic.w	r3, r3, #7
 8006f14:	3308      	adds	r3, #8
 8006f16:	9303      	str	r3, [sp, #12]
 8006f18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f1a:	4433      	add	r3, r6
 8006f1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f1e:	e76a      	b.n	8006df6 <_svfiprintf_r+0x52>
 8006f20:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f24:	460c      	mov	r4, r1
 8006f26:	2001      	movs	r0, #1
 8006f28:	e7a8      	b.n	8006e7c <_svfiprintf_r+0xd8>
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	3401      	adds	r4, #1
 8006f2e:	9305      	str	r3, [sp, #20]
 8006f30:	4619      	mov	r1, r3
 8006f32:	f04f 0c0a 	mov.w	ip, #10
 8006f36:	4620      	mov	r0, r4
 8006f38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f3c:	3a30      	subs	r2, #48	@ 0x30
 8006f3e:	2a09      	cmp	r2, #9
 8006f40:	d903      	bls.n	8006f4a <_svfiprintf_r+0x1a6>
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d0c6      	beq.n	8006ed4 <_svfiprintf_r+0x130>
 8006f46:	9105      	str	r1, [sp, #20]
 8006f48:	e7c4      	b.n	8006ed4 <_svfiprintf_r+0x130>
 8006f4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f4e:	4604      	mov	r4, r0
 8006f50:	2301      	movs	r3, #1
 8006f52:	e7f0      	b.n	8006f36 <_svfiprintf_r+0x192>
 8006f54:	ab03      	add	r3, sp, #12
 8006f56:	9300      	str	r3, [sp, #0]
 8006f58:	462a      	mov	r2, r5
 8006f5a:	4b0e      	ldr	r3, [pc, #56]	@ (8006f94 <_svfiprintf_r+0x1f0>)
 8006f5c:	a904      	add	r1, sp, #16
 8006f5e:	4638      	mov	r0, r7
 8006f60:	f7fd fe4e 	bl	8004c00 <_printf_float>
 8006f64:	1c42      	adds	r2, r0, #1
 8006f66:	4606      	mov	r6, r0
 8006f68:	d1d6      	bne.n	8006f18 <_svfiprintf_r+0x174>
 8006f6a:	89ab      	ldrh	r3, [r5, #12]
 8006f6c:	065b      	lsls	r3, r3, #25
 8006f6e:	f53f af2d 	bmi.w	8006dcc <_svfiprintf_r+0x28>
 8006f72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006f74:	e72c      	b.n	8006dd0 <_svfiprintf_r+0x2c>
 8006f76:	ab03      	add	r3, sp, #12
 8006f78:	9300      	str	r3, [sp, #0]
 8006f7a:	462a      	mov	r2, r5
 8006f7c:	4b05      	ldr	r3, [pc, #20]	@ (8006f94 <_svfiprintf_r+0x1f0>)
 8006f7e:	a904      	add	r1, sp, #16
 8006f80:	4638      	mov	r0, r7
 8006f82:	f7fe f8d5 	bl	8005130 <_printf_i>
 8006f86:	e7ed      	b.n	8006f64 <_svfiprintf_r+0x1c0>
 8006f88:	08008138 	.word	0x08008138
 8006f8c:	08008142 	.word	0x08008142
 8006f90:	08004c01 	.word	0x08004c01
 8006f94:	08006ced 	.word	0x08006ced
 8006f98:	0800813e 	.word	0x0800813e

08006f9c <__sflush_r>:
 8006f9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fa4:	0716      	lsls	r6, r2, #28
 8006fa6:	4605      	mov	r5, r0
 8006fa8:	460c      	mov	r4, r1
 8006faa:	d454      	bmi.n	8007056 <__sflush_r+0xba>
 8006fac:	684b      	ldr	r3, [r1, #4]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	dc02      	bgt.n	8006fb8 <__sflush_r+0x1c>
 8006fb2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	dd48      	ble.n	800704a <__sflush_r+0xae>
 8006fb8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006fba:	2e00      	cmp	r6, #0
 8006fbc:	d045      	beq.n	800704a <__sflush_r+0xae>
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006fc4:	682f      	ldr	r7, [r5, #0]
 8006fc6:	6a21      	ldr	r1, [r4, #32]
 8006fc8:	602b      	str	r3, [r5, #0]
 8006fca:	d030      	beq.n	800702e <__sflush_r+0x92>
 8006fcc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006fce:	89a3      	ldrh	r3, [r4, #12]
 8006fd0:	0759      	lsls	r1, r3, #29
 8006fd2:	d505      	bpl.n	8006fe0 <__sflush_r+0x44>
 8006fd4:	6863      	ldr	r3, [r4, #4]
 8006fd6:	1ad2      	subs	r2, r2, r3
 8006fd8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006fda:	b10b      	cbz	r3, 8006fe0 <__sflush_r+0x44>
 8006fdc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006fde:	1ad2      	subs	r2, r2, r3
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006fe4:	6a21      	ldr	r1, [r4, #32]
 8006fe6:	4628      	mov	r0, r5
 8006fe8:	47b0      	blx	r6
 8006fea:	1c43      	adds	r3, r0, #1
 8006fec:	89a3      	ldrh	r3, [r4, #12]
 8006fee:	d106      	bne.n	8006ffe <__sflush_r+0x62>
 8006ff0:	6829      	ldr	r1, [r5, #0]
 8006ff2:	291d      	cmp	r1, #29
 8006ff4:	d82b      	bhi.n	800704e <__sflush_r+0xb2>
 8006ff6:	4a2a      	ldr	r2, [pc, #168]	@ (80070a0 <__sflush_r+0x104>)
 8006ff8:	410a      	asrs	r2, r1
 8006ffa:	07d6      	lsls	r6, r2, #31
 8006ffc:	d427      	bmi.n	800704e <__sflush_r+0xb2>
 8006ffe:	2200      	movs	r2, #0
 8007000:	6062      	str	r2, [r4, #4]
 8007002:	04d9      	lsls	r1, r3, #19
 8007004:	6922      	ldr	r2, [r4, #16]
 8007006:	6022      	str	r2, [r4, #0]
 8007008:	d504      	bpl.n	8007014 <__sflush_r+0x78>
 800700a:	1c42      	adds	r2, r0, #1
 800700c:	d101      	bne.n	8007012 <__sflush_r+0x76>
 800700e:	682b      	ldr	r3, [r5, #0]
 8007010:	b903      	cbnz	r3, 8007014 <__sflush_r+0x78>
 8007012:	6560      	str	r0, [r4, #84]	@ 0x54
 8007014:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007016:	602f      	str	r7, [r5, #0]
 8007018:	b1b9      	cbz	r1, 800704a <__sflush_r+0xae>
 800701a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800701e:	4299      	cmp	r1, r3
 8007020:	d002      	beq.n	8007028 <__sflush_r+0x8c>
 8007022:	4628      	mov	r0, r5
 8007024:	f7ff f9e0 	bl	80063e8 <_free_r>
 8007028:	2300      	movs	r3, #0
 800702a:	6363      	str	r3, [r4, #52]	@ 0x34
 800702c:	e00d      	b.n	800704a <__sflush_r+0xae>
 800702e:	2301      	movs	r3, #1
 8007030:	4628      	mov	r0, r5
 8007032:	47b0      	blx	r6
 8007034:	4602      	mov	r2, r0
 8007036:	1c50      	adds	r0, r2, #1
 8007038:	d1c9      	bne.n	8006fce <__sflush_r+0x32>
 800703a:	682b      	ldr	r3, [r5, #0]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d0c6      	beq.n	8006fce <__sflush_r+0x32>
 8007040:	2b1d      	cmp	r3, #29
 8007042:	d001      	beq.n	8007048 <__sflush_r+0xac>
 8007044:	2b16      	cmp	r3, #22
 8007046:	d11e      	bne.n	8007086 <__sflush_r+0xea>
 8007048:	602f      	str	r7, [r5, #0]
 800704a:	2000      	movs	r0, #0
 800704c:	e022      	b.n	8007094 <__sflush_r+0xf8>
 800704e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007052:	b21b      	sxth	r3, r3
 8007054:	e01b      	b.n	800708e <__sflush_r+0xf2>
 8007056:	690f      	ldr	r7, [r1, #16]
 8007058:	2f00      	cmp	r7, #0
 800705a:	d0f6      	beq.n	800704a <__sflush_r+0xae>
 800705c:	0793      	lsls	r3, r2, #30
 800705e:	680e      	ldr	r6, [r1, #0]
 8007060:	bf08      	it	eq
 8007062:	694b      	ldreq	r3, [r1, #20]
 8007064:	600f      	str	r7, [r1, #0]
 8007066:	bf18      	it	ne
 8007068:	2300      	movne	r3, #0
 800706a:	eba6 0807 	sub.w	r8, r6, r7
 800706e:	608b      	str	r3, [r1, #8]
 8007070:	f1b8 0f00 	cmp.w	r8, #0
 8007074:	dde9      	ble.n	800704a <__sflush_r+0xae>
 8007076:	6a21      	ldr	r1, [r4, #32]
 8007078:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800707a:	4643      	mov	r3, r8
 800707c:	463a      	mov	r2, r7
 800707e:	4628      	mov	r0, r5
 8007080:	47b0      	blx	r6
 8007082:	2800      	cmp	r0, #0
 8007084:	dc08      	bgt.n	8007098 <__sflush_r+0xfc>
 8007086:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800708a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800708e:	81a3      	strh	r3, [r4, #12]
 8007090:	f04f 30ff 	mov.w	r0, #4294967295
 8007094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007098:	4407      	add	r7, r0
 800709a:	eba8 0800 	sub.w	r8, r8, r0
 800709e:	e7e7      	b.n	8007070 <__sflush_r+0xd4>
 80070a0:	dfbffffe 	.word	0xdfbffffe

080070a4 <_fflush_r>:
 80070a4:	b538      	push	{r3, r4, r5, lr}
 80070a6:	690b      	ldr	r3, [r1, #16]
 80070a8:	4605      	mov	r5, r0
 80070aa:	460c      	mov	r4, r1
 80070ac:	b913      	cbnz	r3, 80070b4 <_fflush_r+0x10>
 80070ae:	2500      	movs	r5, #0
 80070b0:	4628      	mov	r0, r5
 80070b2:	bd38      	pop	{r3, r4, r5, pc}
 80070b4:	b118      	cbz	r0, 80070be <_fflush_r+0x1a>
 80070b6:	6a03      	ldr	r3, [r0, #32]
 80070b8:	b90b      	cbnz	r3, 80070be <_fflush_r+0x1a>
 80070ba:	f7fe f9e5 	bl	8005488 <__sinit>
 80070be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d0f3      	beq.n	80070ae <_fflush_r+0xa>
 80070c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80070c8:	07d0      	lsls	r0, r2, #31
 80070ca:	d404      	bmi.n	80070d6 <_fflush_r+0x32>
 80070cc:	0599      	lsls	r1, r3, #22
 80070ce:	d402      	bmi.n	80070d6 <_fflush_r+0x32>
 80070d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80070d2:	f7fe fb2c 	bl	800572e <__retarget_lock_acquire_recursive>
 80070d6:	4628      	mov	r0, r5
 80070d8:	4621      	mov	r1, r4
 80070da:	f7ff ff5f 	bl	8006f9c <__sflush_r>
 80070de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80070e0:	07da      	lsls	r2, r3, #31
 80070e2:	4605      	mov	r5, r0
 80070e4:	d4e4      	bmi.n	80070b0 <_fflush_r+0xc>
 80070e6:	89a3      	ldrh	r3, [r4, #12]
 80070e8:	059b      	lsls	r3, r3, #22
 80070ea:	d4e1      	bmi.n	80070b0 <_fflush_r+0xc>
 80070ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80070ee:	f7fe fb1f 	bl	8005730 <__retarget_lock_release_recursive>
 80070f2:	e7dd      	b.n	80070b0 <_fflush_r+0xc>

080070f4 <memmove>:
 80070f4:	4288      	cmp	r0, r1
 80070f6:	b510      	push	{r4, lr}
 80070f8:	eb01 0402 	add.w	r4, r1, r2
 80070fc:	d902      	bls.n	8007104 <memmove+0x10>
 80070fe:	4284      	cmp	r4, r0
 8007100:	4623      	mov	r3, r4
 8007102:	d807      	bhi.n	8007114 <memmove+0x20>
 8007104:	1e43      	subs	r3, r0, #1
 8007106:	42a1      	cmp	r1, r4
 8007108:	d008      	beq.n	800711c <memmove+0x28>
 800710a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800710e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007112:	e7f8      	b.n	8007106 <memmove+0x12>
 8007114:	4402      	add	r2, r0
 8007116:	4601      	mov	r1, r0
 8007118:	428a      	cmp	r2, r1
 800711a:	d100      	bne.n	800711e <memmove+0x2a>
 800711c:	bd10      	pop	{r4, pc}
 800711e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007122:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007126:	e7f7      	b.n	8007118 <memmove+0x24>

08007128 <_sbrk_r>:
 8007128:	b538      	push	{r3, r4, r5, lr}
 800712a:	4d06      	ldr	r5, [pc, #24]	@ (8007144 <_sbrk_r+0x1c>)
 800712c:	2300      	movs	r3, #0
 800712e:	4604      	mov	r4, r0
 8007130:	4608      	mov	r0, r1
 8007132:	602b      	str	r3, [r5, #0]
 8007134:	f7fa fa6c 	bl	8001610 <_sbrk>
 8007138:	1c43      	adds	r3, r0, #1
 800713a:	d102      	bne.n	8007142 <_sbrk_r+0x1a>
 800713c:	682b      	ldr	r3, [r5, #0]
 800713e:	b103      	cbz	r3, 8007142 <_sbrk_r+0x1a>
 8007140:	6023      	str	r3, [r4, #0]
 8007142:	bd38      	pop	{r3, r4, r5, pc}
 8007144:	20000640 	.word	0x20000640

08007148 <__assert_func>:
 8007148:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800714a:	4614      	mov	r4, r2
 800714c:	461a      	mov	r2, r3
 800714e:	4b09      	ldr	r3, [pc, #36]	@ (8007174 <__assert_func+0x2c>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4605      	mov	r5, r0
 8007154:	68d8      	ldr	r0, [r3, #12]
 8007156:	b954      	cbnz	r4, 800716e <__assert_func+0x26>
 8007158:	4b07      	ldr	r3, [pc, #28]	@ (8007178 <__assert_func+0x30>)
 800715a:	461c      	mov	r4, r3
 800715c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007160:	9100      	str	r1, [sp, #0]
 8007162:	462b      	mov	r3, r5
 8007164:	4905      	ldr	r1, [pc, #20]	@ (800717c <__assert_func+0x34>)
 8007166:	f000 f86f 	bl	8007248 <fiprintf>
 800716a:	f000 f87f 	bl	800726c <abort>
 800716e:	4b04      	ldr	r3, [pc, #16]	@ (8007180 <__assert_func+0x38>)
 8007170:	e7f4      	b.n	800715c <__assert_func+0x14>
 8007172:	bf00      	nop
 8007174:	20000018 	.word	0x20000018
 8007178:	0800818e 	.word	0x0800818e
 800717c:	08008160 	.word	0x08008160
 8007180:	08008153 	.word	0x08008153

08007184 <_calloc_r>:
 8007184:	b570      	push	{r4, r5, r6, lr}
 8007186:	fba1 5402 	umull	r5, r4, r1, r2
 800718a:	b93c      	cbnz	r4, 800719c <_calloc_r+0x18>
 800718c:	4629      	mov	r1, r5
 800718e:	f7ff f99f 	bl	80064d0 <_malloc_r>
 8007192:	4606      	mov	r6, r0
 8007194:	b928      	cbnz	r0, 80071a2 <_calloc_r+0x1e>
 8007196:	2600      	movs	r6, #0
 8007198:	4630      	mov	r0, r6
 800719a:	bd70      	pop	{r4, r5, r6, pc}
 800719c:	220c      	movs	r2, #12
 800719e:	6002      	str	r2, [r0, #0]
 80071a0:	e7f9      	b.n	8007196 <_calloc_r+0x12>
 80071a2:	462a      	mov	r2, r5
 80071a4:	4621      	mov	r1, r4
 80071a6:	f7fe fa1c 	bl	80055e2 <memset>
 80071aa:	e7f5      	b.n	8007198 <_calloc_r+0x14>

080071ac <__ascii_mbtowc>:
 80071ac:	b082      	sub	sp, #8
 80071ae:	b901      	cbnz	r1, 80071b2 <__ascii_mbtowc+0x6>
 80071b0:	a901      	add	r1, sp, #4
 80071b2:	b142      	cbz	r2, 80071c6 <__ascii_mbtowc+0x1a>
 80071b4:	b14b      	cbz	r3, 80071ca <__ascii_mbtowc+0x1e>
 80071b6:	7813      	ldrb	r3, [r2, #0]
 80071b8:	600b      	str	r3, [r1, #0]
 80071ba:	7812      	ldrb	r2, [r2, #0]
 80071bc:	1e10      	subs	r0, r2, #0
 80071be:	bf18      	it	ne
 80071c0:	2001      	movne	r0, #1
 80071c2:	b002      	add	sp, #8
 80071c4:	4770      	bx	lr
 80071c6:	4610      	mov	r0, r2
 80071c8:	e7fb      	b.n	80071c2 <__ascii_mbtowc+0x16>
 80071ca:	f06f 0001 	mvn.w	r0, #1
 80071ce:	e7f8      	b.n	80071c2 <__ascii_mbtowc+0x16>

080071d0 <_realloc_r>:
 80071d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071d4:	4680      	mov	r8, r0
 80071d6:	4615      	mov	r5, r2
 80071d8:	460c      	mov	r4, r1
 80071da:	b921      	cbnz	r1, 80071e6 <_realloc_r+0x16>
 80071dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071e0:	4611      	mov	r1, r2
 80071e2:	f7ff b975 	b.w	80064d0 <_malloc_r>
 80071e6:	b92a      	cbnz	r2, 80071f4 <_realloc_r+0x24>
 80071e8:	f7ff f8fe 	bl	80063e8 <_free_r>
 80071ec:	2400      	movs	r4, #0
 80071ee:	4620      	mov	r0, r4
 80071f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071f4:	f000 f841 	bl	800727a <_malloc_usable_size_r>
 80071f8:	4285      	cmp	r5, r0
 80071fa:	4606      	mov	r6, r0
 80071fc:	d802      	bhi.n	8007204 <_realloc_r+0x34>
 80071fe:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007202:	d8f4      	bhi.n	80071ee <_realloc_r+0x1e>
 8007204:	4629      	mov	r1, r5
 8007206:	4640      	mov	r0, r8
 8007208:	f7ff f962 	bl	80064d0 <_malloc_r>
 800720c:	4607      	mov	r7, r0
 800720e:	2800      	cmp	r0, #0
 8007210:	d0ec      	beq.n	80071ec <_realloc_r+0x1c>
 8007212:	42b5      	cmp	r5, r6
 8007214:	462a      	mov	r2, r5
 8007216:	4621      	mov	r1, r4
 8007218:	bf28      	it	cs
 800721a:	4632      	movcs	r2, r6
 800721c:	f7fe fa89 	bl	8005732 <memcpy>
 8007220:	4621      	mov	r1, r4
 8007222:	4640      	mov	r0, r8
 8007224:	f7ff f8e0 	bl	80063e8 <_free_r>
 8007228:	463c      	mov	r4, r7
 800722a:	e7e0      	b.n	80071ee <_realloc_r+0x1e>

0800722c <__ascii_wctomb>:
 800722c:	4603      	mov	r3, r0
 800722e:	4608      	mov	r0, r1
 8007230:	b141      	cbz	r1, 8007244 <__ascii_wctomb+0x18>
 8007232:	2aff      	cmp	r2, #255	@ 0xff
 8007234:	d904      	bls.n	8007240 <__ascii_wctomb+0x14>
 8007236:	228a      	movs	r2, #138	@ 0x8a
 8007238:	601a      	str	r2, [r3, #0]
 800723a:	f04f 30ff 	mov.w	r0, #4294967295
 800723e:	4770      	bx	lr
 8007240:	700a      	strb	r2, [r1, #0]
 8007242:	2001      	movs	r0, #1
 8007244:	4770      	bx	lr
	...

08007248 <fiprintf>:
 8007248:	b40e      	push	{r1, r2, r3}
 800724a:	b503      	push	{r0, r1, lr}
 800724c:	4601      	mov	r1, r0
 800724e:	ab03      	add	r3, sp, #12
 8007250:	4805      	ldr	r0, [pc, #20]	@ (8007268 <fiprintf+0x20>)
 8007252:	f853 2b04 	ldr.w	r2, [r3], #4
 8007256:	6800      	ldr	r0, [r0, #0]
 8007258:	9301      	str	r3, [sp, #4]
 800725a:	f000 f83f 	bl	80072dc <_vfiprintf_r>
 800725e:	b002      	add	sp, #8
 8007260:	f85d eb04 	ldr.w	lr, [sp], #4
 8007264:	b003      	add	sp, #12
 8007266:	4770      	bx	lr
 8007268:	20000018 	.word	0x20000018

0800726c <abort>:
 800726c:	b508      	push	{r3, lr}
 800726e:	2006      	movs	r0, #6
 8007270:	f000 fa08 	bl	8007684 <raise>
 8007274:	2001      	movs	r0, #1
 8007276:	f7fa f953 	bl	8001520 <_exit>

0800727a <_malloc_usable_size_r>:
 800727a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800727e:	1f18      	subs	r0, r3, #4
 8007280:	2b00      	cmp	r3, #0
 8007282:	bfbc      	itt	lt
 8007284:	580b      	ldrlt	r3, [r1, r0]
 8007286:	18c0      	addlt	r0, r0, r3
 8007288:	4770      	bx	lr

0800728a <__sfputc_r>:
 800728a:	6893      	ldr	r3, [r2, #8]
 800728c:	3b01      	subs	r3, #1
 800728e:	2b00      	cmp	r3, #0
 8007290:	b410      	push	{r4}
 8007292:	6093      	str	r3, [r2, #8]
 8007294:	da08      	bge.n	80072a8 <__sfputc_r+0x1e>
 8007296:	6994      	ldr	r4, [r2, #24]
 8007298:	42a3      	cmp	r3, r4
 800729a:	db01      	blt.n	80072a0 <__sfputc_r+0x16>
 800729c:	290a      	cmp	r1, #10
 800729e:	d103      	bne.n	80072a8 <__sfputc_r+0x1e>
 80072a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80072a4:	f000 b932 	b.w	800750c <__swbuf_r>
 80072a8:	6813      	ldr	r3, [r2, #0]
 80072aa:	1c58      	adds	r0, r3, #1
 80072ac:	6010      	str	r0, [r2, #0]
 80072ae:	7019      	strb	r1, [r3, #0]
 80072b0:	4608      	mov	r0, r1
 80072b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80072b6:	4770      	bx	lr

080072b8 <__sfputs_r>:
 80072b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ba:	4606      	mov	r6, r0
 80072bc:	460f      	mov	r7, r1
 80072be:	4614      	mov	r4, r2
 80072c0:	18d5      	adds	r5, r2, r3
 80072c2:	42ac      	cmp	r4, r5
 80072c4:	d101      	bne.n	80072ca <__sfputs_r+0x12>
 80072c6:	2000      	movs	r0, #0
 80072c8:	e007      	b.n	80072da <__sfputs_r+0x22>
 80072ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072ce:	463a      	mov	r2, r7
 80072d0:	4630      	mov	r0, r6
 80072d2:	f7ff ffda 	bl	800728a <__sfputc_r>
 80072d6:	1c43      	adds	r3, r0, #1
 80072d8:	d1f3      	bne.n	80072c2 <__sfputs_r+0xa>
 80072da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080072dc <_vfiprintf_r>:
 80072dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072e0:	460d      	mov	r5, r1
 80072e2:	b09d      	sub	sp, #116	@ 0x74
 80072e4:	4614      	mov	r4, r2
 80072e6:	4698      	mov	r8, r3
 80072e8:	4606      	mov	r6, r0
 80072ea:	b118      	cbz	r0, 80072f4 <_vfiprintf_r+0x18>
 80072ec:	6a03      	ldr	r3, [r0, #32]
 80072ee:	b90b      	cbnz	r3, 80072f4 <_vfiprintf_r+0x18>
 80072f0:	f7fe f8ca 	bl	8005488 <__sinit>
 80072f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80072f6:	07d9      	lsls	r1, r3, #31
 80072f8:	d405      	bmi.n	8007306 <_vfiprintf_r+0x2a>
 80072fa:	89ab      	ldrh	r3, [r5, #12]
 80072fc:	059a      	lsls	r2, r3, #22
 80072fe:	d402      	bmi.n	8007306 <_vfiprintf_r+0x2a>
 8007300:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007302:	f7fe fa14 	bl	800572e <__retarget_lock_acquire_recursive>
 8007306:	89ab      	ldrh	r3, [r5, #12]
 8007308:	071b      	lsls	r3, r3, #28
 800730a:	d501      	bpl.n	8007310 <_vfiprintf_r+0x34>
 800730c:	692b      	ldr	r3, [r5, #16]
 800730e:	b99b      	cbnz	r3, 8007338 <_vfiprintf_r+0x5c>
 8007310:	4629      	mov	r1, r5
 8007312:	4630      	mov	r0, r6
 8007314:	f000 f938 	bl	8007588 <__swsetup_r>
 8007318:	b170      	cbz	r0, 8007338 <_vfiprintf_r+0x5c>
 800731a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800731c:	07dc      	lsls	r4, r3, #31
 800731e:	d504      	bpl.n	800732a <_vfiprintf_r+0x4e>
 8007320:	f04f 30ff 	mov.w	r0, #4294967295
 8007324:	b01d      	add	sp, #116	@ 0x74
 8007326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800732a:	89ab      	ldrh	r3, [r5, #12]
 800732c:	0598      	lsls	r0, r3, #22
 800732e:	d4f7      	bmi.n	8007320 <_vfiprintf_r+0x44>
 8007330:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007332:	f7fe f9fd 	bl	8005730 <__retarget_lock_release_recursive>
 8007336:	e7f3      	b.n	8007320 <_vfiprintf_r+0x44>
 8007338:	2300      	movs	r3, #0
 800733a:	9309      	str	r3, [sp, #36]	@ 0x24
 800733c:	2320      	movs	r3, #32
 800733e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007342:	f8cd 800c 	str.w	r8, [sp, #12]
 8007346:	2330      	movs	r3, #48	@ 0x30
 8007348:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80074f8 <_vfiprintf_r+0x21c>
 800734c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007350:	f04f 0901 	mov.w	r9, #1
 8007354:	4623      	mov	r3, r4
 8007356:	469a      	mov	sl, r3
 8007358:	f813 2b01 	ldrb.w	r2, [r3], #1
 800735c:	b10a      	cbz	r2, 8007362 <_vfiprintf_r+0x86>
 800735e:	2a25      	cmp	r2, #37	@ 0x25
 8007360:	d1f9      	bne.n	8007356 <_vfiprintf_r+0x7a>
 8007362:	ebba 0b04 	subs.w	fp, sl, r4
 8007366:	d00b      	beq.n	8007380 <_vfiprintf_r+0xa4>
 8007368:	465b      	mov	r3, fp
 800736a:	4622      	mov	r2, r4
 800736c:	4629      	mov	r1, r5
 800736e:	4630      	mov	r0, r6
 8007370:	f7ff ffa2 	bl	80072b8 <__sfputs_r>
 8007374:	3001      	adds	r0, #1
 8007376:	f000 80a7 	beq.w	80074c8 <_vfiprintf_r+0x1ec>
 800737a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800737c:	445a      	add	r2, fp
 800737e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007380:	f89a 3000 	ldrb.w	r3, [sl]
 8007384:	2b00      	cmp	r3, #0
 8007386:	f000 809f 	beq.w	80074c8 <_vfiprintf_r+0x1ec>
 800738a:	2300      	movs	r3, #0
 800738c:	f04f 32ff 	mov.w	r2, #4294967295
 8007390:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007394:	f10a 0a01 	add.w	sl, sl, #1
 8007398:	9304      	str	r3, [sp, #16]
 800739a:	9307      	str	r3, [sp, #28]
 800739c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80073a0:	931a      	str	r3, [sp, #104]	@ 0x68
 80073a2:	4654      	mov	r4, sl
 80073a4:	2205      	movs	r2, #5
 80073a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073aa:	4853      	ldr	r0, [pc, #332]	@ (80074f8 <_vfiprintf_r+0x21c>)
 80073ac:	f7f8 ff10 	bl	80001d0 <memchr>
 80073b0:	9a04      	ldr	r2, [sp, #16]
 80073b2:	b9d8      	cbnz	r0, 80073ec <_vfiprintf_r+0x110>
 80073b4:	06d1      	lsls	r1, r2, #27
 80073b6:	bf44      	itt	mi
 80073b8:	2320      	movmi	r3, #32
 80073ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80073be:	0713      	lsls	r3, r2, #28
 80073c0:	bf44      	itt	mi
 80073c2:	232b      	movmi	r3, #43	@ 0x2b
 80073c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80073c8:	f89a 3000 	ldrb.w	r3, [sl]
 80073cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80073ce:	d015      	beq.n	80073fc <_vfiprintf_r+0x120>
 80073d0:	9a07      	ldr	r2, [sp, #28]
 80073d2:	4654      	mov	r4, sl
 80073d4:	2000      	movs	r0, #0
 80073d6:	f04f 0c0a 	mov.w	ip, #10
 80073da:	4621      	mov	r1, r4
 80073dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073e0:	3b30      	subs	r3, #48	@ 0x30
 80073e2:	2b09      	cmp	r3, #9
 80073e4:	d94b      	bls.n	800747e <_vfiprintf_r+0x1a2>
 80073e6:	b1b0      	cbz	r0, 8007416 <_vfiprintf_r+0x13a>
 80073e8:	9207      	str	r2, [sp, #28]
 80073ea:	e014      	b.n	8007416 <_vfiprintf_r+0x13a>
 80073ec:	eba0 0308 	sub.w	r3, r0, r8
 80073f0:	fa09 f303 	lsl.w	r3, r9, r3
 80073f4:	4313      	orrs	r3, r2
 80073f6:	9304      	str	r3, [sp, #16]
 80073f8:	46a2      	mov	sl, r4
 80073fa:	e7d2      	b.n	80073a2 <_vfiprintf_r+0xc6>
 80073fc:	9b03      	ldr	r3, [sp, #12]
 80073fe:	1d19      	adds	r1, r3, #4
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	9103      	str	r1, [sp, #12]
 8007404:	2b00      	cmp	r3, #0
 8007406:	bfbb      	ittet	lt
 8007408:	425b      	neglt	r3, r3
 800740a:	f042 0202 	orrlt.w	r2, r2, #2
 800740e:	9307      	strge	r3, [sp, #28]
 8007410:	9307      	strlt	r3, [sp, #28]
 8007412:	bfb8      	it	lt
 8007414:	9204      	strlt	r2, [sp, #16]
 8007416:	7823      	ldrb	r3, [r4, #0]
 8007418:	2b2e      	cmp	r3, #46	@ 0x2e
 800741a:	d10a      	bne.n	8007432 <_vfiprintf_r+0x156>
 800741c:	7863      	ldrb	r3, [r4, #1]
 800741e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007420:	d132      	bne.n	8007488 <_vfiprintf_r+0x1ac>
 8007422:	9b03      	ldr	r3, [sp, #12]
 8007424:	1d1a      	adds	r2, r3, #4
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	9203      	str	r2, [sp, #12]
 800742a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800742e:	3402      	adds	r4, #2
 8007430:	9305      	str	r3, [sp, #20]
 8007432:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007508 <_vfiprintf_r+0x22c>
 8007436:	7821      	ldrb	r1, [r4, #0]
 8007438:	2203      	movs	r2, #3
 800743a:	4650      	mov	r0, sl
 800743c:	f7f8 fec8 	bl	80001d0 <memchr>
 8007440:	b138      	cbz	r0, 8007452 <_vfiprintf_r+0x176>
 8007442:	9b04      	ldr	r3, [sp, #16]
 8007444:	eba0 000a 	sub.w	r0, r0, sl
 8007448:	2240      	movs	r2, #64	@ 0x40
 800744a:	4082      	lsls	r2, r0
 800744c:	4313      	orrs	r3, r2
 800744e:	3401      	adds	r4, #1
 8007450:	9304      	str	r3, [sp, #16]
 8007452:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007456:	4829      	ldr	r0, [pc, #164]	@ (80074fc <_vfiprintf_r+0x220>)
 8007458:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800745c:	2206      	movs	r2, #6
 800745e:	f7f8 feb7 	bl	80001d0 <memchr>
 8007462:	2800      	cmp	r0, #0
 8007464:	d03f      	beq.n	80074e6 <_vfiprintf_r+0x20a>
 8007466:	4b26      	ldr	r3, [pc, #152]	@ (8007500 <_vfiprintf_r+0x224>)
 8007468:	bb1b      	cbnz	r3, 80074b2 <_vfiprintf_r+0x1d6>
 800746a:	9b03      	ldr	r3, [sp, #12]
 800746c:	3307      	adds	r3, #7
 800746e:	f023 0307 	bic.w	r3, r3, #7
 8007472:	3308      	adds	r3, #8
 8007474:	9303      	str	r3, [sp, #12]
 8007476:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007478:	443b      	add	r3, r7
 800747a:	9309      	str	r3, [sp, #36]	@ 0x24
 800747c:	e76a      	b.n	8007354 <_vfiprintf_r+0x78>
 800747e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007482:	460c      	mov	r4, r1
 8007484:	2001      	movs	r0, #1
 8007486:	e7a8      	b.n	80073da <_vfiprintf_r+0xfe>
 8007488:	2300      	movs	r3, #0
 800748a:	3401      	adds	r4, #1
 800748c:	9305      	str	r3, [sp, #20]
 800748e:	4619      	mov	r1, r3
 8007490:	f04f 0c0a 	mov.w	ip, #10
 8007494:	4620      	mov	r0, r4
 8007496:	f810 2b01 	ldrb.w	r2, [r0], #1
 800749a:	3a30      	subs	r2, #48	@ 0x30
 800749c:	2a09      	cmp	r2, #9
 800749e:	d903      	bls.n	80074a8 <_vfiprintf_r+0x1cc>
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d0c6      	beq.n	8007432 <_vfiprintf_r+0x156>
 80074a4:	9105      	str	r1, [sp, #20]
 80074a6:	e7c4      	b.n	8007432 <_vfiprintf_r+0x156>
 80074a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80074ac:	4604      	mov	r4, r0
 80074ae:	2301      	movs	r3, #1
 80074b0:	e7f0      	b.n	8007494 <_vfiprintf_r+0x1b8>
 80074b2:	ab03      	add	r3, sp, #12
 80074b4:	9300      	str	r3, [sp, #0]
 80074b6:	462a      	mov	r2, r5
 80074b8:	4b12      	ldr	r3, [pc, #72]	@ (8007504 <_vfiprintf_r+0x228>)
 80074ba:	a904      	add	r1, sp, #16
 80074bc:	4630      	mov	r0, r6
 80074be:	f7fd fb9f 	bl	8004c00 <_printf_float>
 80074c2:	4607      	mov	r7, r0
 80074c4:	1c78      	adds	r0, r7, #1
 80074c6:	d1d6      	bne.n	8007476 <_vfiprintf_r+0x19a>
 80074c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80074ca:	07d9      	lsls	r1, r3, #31
 80074cc:	d405      	bmi.n	80074da <_vfiprintf_r+0x1fe>
 80074ce:	89ab      	ldrh	r3, [r5, #12]
 80074d0:	059a      	lsls	r2, r3, #22
 80074d2:	d402      	bmi.n	80074da <_vfiprintf_r+0x1fe>
 80074d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80074d6:	f7fe f92b 	bl	8005730 <__retarget_lock_release_recursive>
 80074da:	89ab      	ldrh	r3, [r5, #12]
 80074dc:	065b      	lsls	r3, r3, #25
 80074de:	f53f af1f 	bmi.w	8007320 <_vfiprintf_r+0x44>
 80074e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80074e4:	e71e      	b.n	8007324 <_vfiprintf_r+0x48>
 80074e6:	ab03      	add	r3, sp, #12
 80074e8:	9300      	str	r3, [sp, #0]
 80074ea:	462a      	mov	r2, r5
 80074ec:	4b05      	ldr	r3, [pc, #20]	@ (8007504 <_vfiprintf_r+0x228>)
 80074ee:	a904      	add	r1, sp, #16
 80074f0:	4630      	mov	r0, r6
 80074f2:	f7fd fe1d 	bl	8005130 <_printf_i>
 80074f6:	e7e4      	b.n	80074c2 <_vfiprintf_r+0x1e6>
 80074f8:	08008138 	.word	0x08008138
 80074fc:	08008142 	.word	0x08008142
 8007500:	08004c01 	.word	0x08004c01
 8007504:	080072b9 	.word	0x080072b9
 8007508:	0800813e 	.word	0x0800813e

0800750c <__swbuf_r>:
 800750c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800750e:	460e      	mov	r6, r1
 8007510:	4614      	mov	r4, r2
 8007512:	4605      	mov	r5, r0
 8007514:	b118      	cbz	r0, 800751e <__swbuf_r+0x12>
 8007516:	6a03      	ldr	r3, [r0, #32]
 8007518:	b90b      	cbnz	r3, 800751e <__swbuf_r+0x12>
 800751a:	f7fd ffb5 	bl	8005488 <__sinit>
 800751e:	69a3      	ldr	r3, [r4, #24]
 8007520:	60a3      	str	r3, [r4, #8]
 8007522:	89a3      	ldrh	r3, [r4, #12]
 8007524:	071a      	lsls	r2, r3, #28
 8007526:	d501      	bpl.n	800752c <__swbuf_r+0x20>
 8007528:	6923      	ldr	r3, [r4, #16]
 800752a:	b943      	cbnz	r3, 800753e <__swbuf_r+0x32>
 800752c:	4621      	mov	r1, r4
 800752e:	4628      	mov	r0, r5
 8007530:	f000 f82a 	bl	8007588 <__swsetup_r>
 8007534:	b118      	cbz	r0, 800753e <__swbuf_r+0x32>
 8007536:	f04f 37ff 	mov.w	r7, #4294967295
 800753a:	4638      	mov	r0, r7
 800753c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800753e:	6823      	ldr	r3, [r4, #0]
 8007540:	6922      	ldr	r2, [r4, #16]
 8007542:	1a98      	subs	r0, r3, r2
 8007544:	6963      	ldr	r3, [r4, #20]
 8007546:	b2f6      	uxtb	r6, r6
 8007548:	4283      	cmp	r3, r0
 800754a:	4637      	mov	r7, r6
 800754c:	dc05      	bgt.n	800755a <__swbuf_r+0x4e>
 800754e:	4621      	mov	r1, r4
 8007550:	4628      	mov	r0, r5
 8007552:	f7ff fda7 	bl	80070a4 <_fflush_r>
 8007556:	2800      	cmp	r0, #0
 8007558:	d1ed      	bne.n	8007536 <__swbuf_r+0x2a>
 800755a:	68a3      	ldr	r3, [r4, #8]
 800755c:	3b01      	subs	r3, #1
 800755e:	60a3      	str	r3, [r4, #8]
 8007560:	6823      	ldr	r3, [r4, #0]
 8007562:	1c5a      	adds	r2, r3, #1
 8007564:	6022      	str	r2, [r4, #0]
 8007566:	701e      	strb	r6, [r3, #0]
 8007568:	6962      	ldr	r2, [r4, #20]
 800756a:	1c43      	adds	r3, r0, #1
 800756c:	429a      	cmp	r2, r3
 800756e:	d004      	beq.n	800757a <__swbuf_r+0x6e>
 8007570:	89a3      	ldrh	r3, [r4, #12]
 8007572:	07db      	lsls	r3, r3, #31
 8007574:	d5e1      	bpl.n	800753a <__swbuf_r+0x2e>
 8007576:	2e0a      	cmp	r6, #10
 8007578:	d1df      	bne.n	800753a <__swbuf_r+0x2e>
 800757a:	4621      	mov	r1, r4
 800757c:	4628      	mov	r0, r5
 800757e:	f7ff fd91 	bl	80070a4 <_fflush_r>
 8007582:	2800      	cmp	r0, #0
 8007584:	d0d9      	beq.n	800753a <__swbuf_r+0x2e>
 8007586:	e7d6      	b.n	8007536 <__swbuf_r+0x2a>

08007588 <__swsetup_r>:
 8007588:	b538      	push	{r3, r4, r5, lr}
 800758a:	4b29      	ldr	r3, [pc, #164]	@ (8007630 <__swsetup_r+0xa8>)
 800758c:	4605      	mov	r5, r0
 800758e:	6818      	ldr	r0, [r3, #0]
 8007590:	460c      	mov	r4, r1
 8007592:	b118      	cbz	r0, 800759c <__swsetup_r+0x14>
 8007594:	6a03      	ldr	r3, [r0, #32]
 8007596:	b90b      	cbnz	r3, 800759c <__swsetup_r+0x14>
 8007598:	f7fd ff76 	bl	8005488 <__sinit>
 800759c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075a0:	0719      	lsls	r1, r3, #28
 80075a2:	d422      	bmi.n	80075ea <__swsetup_r+0x62>
 80075a4:	06da      	lsls	r2, r3, #27
 80075a6:	d407      	bmi.n	80075b8 <__swsetup_r+0x30>
 80075a8:	2209      	movs	r2, #9
 80075aa:	602a      	str	r2, [r5, #0]
 80075ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80075b0:	81a3      	strh	r3, [r4, #12]
 80075b2:	f04f 30ff 	mov.w	r0, #4294967295
 80075b6:	e033      	b.n	8007620 <__swsetup_r+0x98>
 80075b8:	0758      	lsls	r0, r3, #29
 80075ba:	d512      	bpl.n	80075e2 <__swsetup_r+0x5a>
 80075bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80075be:	b141      	cbz	r1, 80075d2 <__swsetup_r+0x4a>
 80075c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80075c4:	4299      	cmp	r1, r3
 80075c6:	d002      	beq.n	80075ce <__swsetup_r+0x46>
 80075c8:	4628      	mov	r0, r5
 80075ca:	f7fe ff0d 	bl	80063e8 <_free_r>
 80075ce:	2300      	movs	r3, #0
 80075d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80075d2:	89a3      	ldrh	r3, [r4, #12]
 80075d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80075d8:	81a3      	strh	r3, [r4, #12]
 80075da:	2300      	movs	r3, #0
 80075dc:	6063      	str	r3, [r4, #4]
 80075de:	6923      	ldr	r3, [r4, #16]
 80075e0:	6023      	str	r3, [r4, #0]
 80075e2:	89a3      	ldrh	r3, [r4, #12]
 80075e4:	f043 0308 	orr.w	r3, r3, #8
 80075e8:	81a3      	strh	r3, [r4, #12]
 80075ea:	6923      	ldr	r3, [r4, #16]
 80075ec:	b94b      	cbnz	r3, 8007602 <__swsetup_r+0x7a>
 80075ee:	89a3      	ldrh	r3, [r4, #12]
 80075f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80075f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80075f8:	d003      	beq.n	8007602 <__swsetup_r+0x7a>
 80075fa:	4621      	mov	r1, r4
 80075fc:	4628      	mov	r0, r5
 80075fe:	f000 f883 	bl	8007708 <__smakebuf_r>
 8007602:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007606:	f013 0201 	ands.w	r2, r3, #1
 800760a:	d00a      	beq.n	8007622 <__swsetup_r+0x9a>
 800760c:	2200      	movs	r2, #0
 800760e:	60a2      	str	r2, [r4, #8]
 8007610:	6962      	ldr	r2, [r4, #20]
 8007612:	4252      	negs	r2, r2
 8007614:	61a2      	str	r2, [r4, #24]
 8007616:	6922      	ldr	r2, [r4, #16]
 8007618:	b942      	cbnz	r2, 800762c <__swsetup_r+0xa4>
 800761a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800761e:	d1c5      	bne.n	80075ac <__swsetup_r+0x24>
 8007620:	bd38      	pop	{r3, r4, r5, pc}
 8007622:	0799      	lsls	r1, r3, #30
 8007624:	bf58      	it	pl
 8007626:	6962      	ldrpl	r2, [r4, #20]
 8007628:	60a2      	str	r2, [r4, #8]
 800762a:	e7f4      	b.n	8007616 <__swsetup_r+0x8e>
 800762c:	2000      	movs	r0, #0
 800762e:	e7f7      	b.n	8007620 <__swsetup_r+0x98>
 8007630:	20000018 	.word	0x20000018

08007634 <_raise_r>:
 8007634:	291f      	cmp	r1, #31
 8007636:	b538      	push	{r3, r4, r5, lr}
 8007638:	4605      	mov	r5, r0
 800763a:	460c      	mov	r4, r1
 800763c:	d904      	bls.n	8007648 <_raise_r+0x14>
 800763e:	2316      	movs	r3, #22
 8007640:	6003      	str	r3, [r0, #0]
 8007642:	f04f 30ff 	mov.w	r0, #4294967295
 8007646:	bd38      	pop	{r3, r4, r5, pc}
 8007648:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800764a:	b112      	cbz	r2, 8007652 <_raise_r+0x1e>
 800764c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007650:	b94b      	cbnz	r3, 8007666 <_raise_r+0x32>
 8007652:	4628      	mov	r0, r5
 8007654:	f000 f830 	bl	80076b8 <_getpid_r>
 8007658:	4622      	mov	r2, r4
 800765a:	4601      	mov	r1, r0
 800765c:	4628      	mov	r0, r5
 800765e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007662:	f000 b817 	b.w	8007694 <_kill_r>
 8007666:	2b01      	cmp	r3, #1
 8007668:	d00a      	beq.n	8007680 <_raise_r+0x4c>
 800766a:	1c59      	adds	r1, r3, #1
 800766c:	d103      	bne.n	8007676 <_raise_r+0x42>
 800766e:	2316      	movs	r3, #22
 8007670:	6003      	str	r3, [r0, #0]
 8007672:	2001      	movs	r0, #1
 8007674:	e7e7      	b.n	8007646 <_raise_r+0x12>
 8007676:	2100      	movs	r1, #0
 8007678:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800767c:	4620      	mov	r0, r4
 800767e:	4798      	blx	r3
 8007680:	2000      	movs	r0, #0
 8007682:	e7e0      	b.n	8007646 <_raise_r+0x12>

08007684 <raise>:
 8007684:	4b02      	ldr	r3, [pc, #8]	@ (8007690 <raise+0xc>)
 8007686:	4601      	mov	r1, r0
 8007688:	6818      	ldr	r0, [r3, #0]
 800768a:	f7ff bfd3 	b.w	8007634 <_raise_r>
 800768e:	bf00      	nop
 8007690:	20000018 	.word	0x20000018

08007694 <_kill_r>:
 8007694:	b538      	push	{r3, r4, r5, lr}
 8007696:	4d07      	ldr	r5, [pc, #28]	@ (80076b4 <_kill_r+0x20>)
 8007698:	2300      	movs	r3, #0
 800769a:	4604      	mov	r4, r0
 800769c:	4608      	mov	r0, r1
 800769e:	4611      	mov	r1, r2
 80076a0:	602b      	str	r3, [r5, #0]
 80076a2:	f7f9 ff2d 	bl	8001500 <_kill>
 80076a6:	1c43      	adds	r3, r0, #1
 80076a8:	d102      	bne.n	80076b0 <_kill_r+0x1c>
 80076aa:	682b      	ldr	r3, [r5, #0]
 80076ac:	b103      	cbz	r3, 80076b0 <_kill_r+0x1c>
 80076ae:	6023      	str	r3, [r4, #0]
 80076b0:	bd38      	pop	{r3, r4, r5, pc}
 80076b2:	bf00      	nop
 80076b4:	20000640 	.word	0x20000640

080076b8 <_getpid_r>:
 80076b8:	f7f9 bf1a 	b.w	80014f0 <_getpid>

080076bc <__swhatbuf_r>:
 80076bc:	b570      	push	{r4, r5, r6, lr}
 80076be:	460c      	mov	r4, r1
 80076c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076c4:	2900      	cmp	r1, #0
 80076c6:	b096      	sub	sp, #88	@ 0x58
 80076c8:	4615      	mov	r5, r2
 80076ca:	461e      	mov	r6, r3
 80076cc:	da0d      	bge.n	80076ea <__swhatbuf_r+0x2e>
 80076ce:	89a3      	ldrh	r3, [r4, #12]
 80076d0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80076d4:	f04f 0100 	mov.w	r1, #0
 80076d8:	bf14      	ite	ne
 80076da:	2340      	movne	r3, #64	@ 0x40
 80076dc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80076e0:	2000      	movs	r0, #0
 80076e2:	6031      	str	r1, [r6, #0]
 80076e4:	602b      	str	r3, [r5, #0]
 80076e6:	b016      	add	sp, #88	@ 0x58
 80076e8:	bd70      	pop	{r4, r5, r6, pc}
 80076ea:	466a      	mov	r2, sp
 80076ec:	f000 f848 	bl	8007780 <_fstat_r>
 80076f0:	2800      	cmp	r0, #0
 80076f2:	dbec      	blt.n	80076ce <__swhatbuf_r+0x12>
 80076f4:	9901      	ldr	r1, [sp, #4]
 80076f6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80076fa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80076fe:	4259      	negs	r1, r3
 8007700:	4159      	adcs	r1, r3
 8007702:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007706:	e7eb      	b.n	80076e0 <__swhatbuf_r+0x24>

08007708 <__smakebuf_r>:
 8007708:	898b      	ldrh	r3, [r1, #12]
 800770a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800770c:	079d      	lsls	r5, r3, #30
 800770e:	4606      	mov	r6, r0
 8007710:	460c      	mov	r4, r1
 8007712:	d507      	bpl.n	8007724 <__smakebuf_r+0x1c>
 8007714:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007718:	6023      	str	r3, [r4, #0]
 800771a:	6123      	str	r3, [r4, #16]
 800771c:	2301      	movs	r3, #1
 800771e:	6163      	str	r3, [r4, #20]
 8007720:	b003      	add	sp, #12
 8007722:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007724:	ab01      	add	r3, sp, #4
 8007726:	466a      	mov	r2, sp
 8007728:	f7ff ffc8 	bl	80076bc <__swhatbuf_r>
 800772c:	9f00      	ldr	r7, [sp, #0]
 800772e:	4605      	mov	r5, r0
 8007730:	4639      	mov	r1, r7
 8007732:	4630      	mov	r0, r6
 8007734:	f7fe fecc 	bl	80064d0 <_malloc_r>
 8007738:	b948      	cbnz	r0, 800774e <__smakebuf_r+0x46>
 800773a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800773e:	059a      	lsls	r2, r3, #22
 8007740:	d4ee      	bmi.n	8007720 <__smakebuf_r+0x18>
 8007742:	f023 0303 	bic.w	r3, r3, #3
 8007746:	f043 0302 	orr.w	r3, r3, #2
 800774a:	81a3      	strh	r3, [r4, #12]
 800774c:	e7e2      	b.n	8007714 <__smakebuf_r+0xc>
 800774e:	89a3      	ldrh	r3, [r4, #12]
 8007750:	6020      	str	r0, [r4, #0]
 8007752:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007756:	81a3      	strh	r3, [r4, #12]
 8007758:	9b01      	ldr	r3, [sp, #4]
 800775a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800775e:	b15b      	cbz	r3, 8007778 <__smakebuf_r+0x70>
 8007760:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007764:	4630      	mov	r0, r6
 8007766:	f000 f81d 	bl	80077a4 <_isatty_r>
 800776a:	b128      	cbz	r0, 8007778 <__smakebuf_r+0x70>
 800776c:	89a3      	ldrh	r3, [r4, #12]
 800776e:	f023 0303 	bic.w	r3, r3, #3
 8007772:	f043 0301 	orr.w	r3, r3, #1
 8007776:	81a3      	strh	r3, [r4, #12]
 8007778:	89a3      	ldrh	r3, [r4, #12]
 800777a:	431d      	orrs	r5, r3
 800777c:	81a5      	strh	r5, [r4, #12]
 800777e:	e7cf      	b.n	8007720 <__smakebuf_r+0x18>

08007780 <_fstat_r>:
 8007780:	b538      	push	{r3, r4, r5, lr}
 8007782:	4d07      	ldr	r5, [pc, #28]	@ (80077a0 <_fstat_r+0x20>)
 8007784:	2300      	movs	r3, #0
 8007786:	4604      	mov	r4, r0
 8007788:	4608      	mov	r0, r1
 800778a:	4611      	mov	r1, r2
 800778c:	602b      	str	r3, [r5, #0]
 800778e:	f7f9 ff17 	bl	80015c0 <_fstat>
 8007792:	1c43      	adds	r3, r0, #1
 8007794:	d102      	bne.n	800779c <_fstat_r+0x1c>
 8007796:	682b      	ldr	r3, [r5, #0]
 8007798:	b103      	cbz	r3, 800779c <_fstat_r+0x1c>
 800779a:	6023      	str	r3, [r4, #0]
 800779c:	bd38      	pop	{r3, r4, r5, pc}
 800779e:	bf00      	nop
 80077a0:	20000640 	.word	0x20000640

080077a4 <_isatty_r>:
 80077a4:	b538      	push	{r3, r4, r5, lr}
 80077a6:	4d06      	ldr	r5, [pc, #24]	@ (80077c0 <_isatty_r+0x1c>)
 80077a8:	2300      	movs	r3, #0
 80077aa:	4604      	mov	r4, r0
 80077ac:	4608      	mov	r0, r1
 80077ae:	602b      	str	r3, [r5, #0]
 80077b0:	f7f9 ff16 	bl	80015e0 <_isatty>
 80077b4:	1c43      	adds	r3, r0, #1
 80077b6:	d102      	bne.n	80077be <_isatty_r+0x1a>
 80077b8:	682b      	ldr	r3, [r5, #0]
 80077ba:	b103      	cbz	r3, 80077be <_isatty_r+0x1a>
 80077bc:	6023      	str	r3, [r4, #0]
 80077be:	bd38      	pop	{r3, r4, r5, pc}
 80077c0:	20000640 	.word	0x20000640

080077c4 <_init>:
 80077c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077c6:	bf00      	nop
 80077c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077ca:	bc08      	pop	{r3}
 80077cc:	469e      	mov	lr, r3
 80077ce:	4770      	bx	lr

080077d0 <_fini>:
 80077d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077d2:	bf00      	nop
 80077d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077d6:	bc08      	pop	{r3}
 80077d8:	469e      	mov	lr, r3
 80077da:	4770      	bx	lr
